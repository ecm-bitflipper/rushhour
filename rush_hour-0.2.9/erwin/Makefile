#
# Author: Henrik Theiling
#
# @@Begin: Licencing and Copying@@
# 
# Copyright (c) Henrik Theiling
# Licence Version 2, Special Version for Erwin.
# 
# The term 'this software' used in the following, additional to its
# usual usage, also includes the instantiated source files generated by
# tools of this package.
# 
# This software is provided 'as-is', without warranty of any kind,
# express or implied.  In no event will the authors or copyright holders
# be held liable for any damages arising from the use of this software.
# 
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
# 
# 1. The origin of this software must not be misrepresented; you must
# not claim that you wrote the original software. If you use this
# software in a product, an acknowledgment in the product documentation
# would be appreciated.
# 
# 2. Altered source versions must be plainly marked as such, and must
# not be misrepresented as being the original software.
# 
# 3. You must not use any of the names of the authors or copyright
# holders of the original software for advertising or publicity
# pertaining to distribution without specific, written prior permission.
# 
# 4. If you change this software and redistribute parts or all of it in
# any form, you must make the source code of the altered version of this
# software available.  As an exception, files that were generated by
# tools of this package may be used freely, including modification.
# 
# 5. This notice must not be removed or altered from any source
# distribution.
#
# This licence is governed by the Laws of Germany.  Disputes shall be
# settled by Saarbruecken City Court.
#
# @@End: Licencing and Copying@@
#

SHELL=/bin/sh



srcdir=.

VERSION=2.1.85983

CPPFLAGS= \
  ${LESS_INCLUDES} \
  ${LESS_CPPFLAGS}  -I../include -Iinclude -I.. \
  -I $(srcdir)/$(SUBDIR) -I $(srcdir)/$(SUBDIR2) -I $(srcdir)/$(SUBDIR3) \
   \
  -DERWIN_UNIX=1 \
  -DERWIN_COMPILING=1 \
    ${MORE_CPPFLAGS}

GCC_FINAL_CXXFLAGS=
CXXFLAGS= \
  ${LESS_CXXFLAGS}   \
  -Wall -W -Wpointer-arith -Wno-cast-align -Woverloaded-virtual -Wundef -Wmissing-format-attribute -Wconversion -Wwrite-strings -Wsign-promo -O2 -g -fno-rtti -felide-constructors -fno-exceptions \
    ${MORE_CXXFLAGS} \
  $(GCC_FINAL_CXXFLAGS)

GCC_FINAL_CFLAGS=
CFLAGS= \
  ${LESS_CFLAGS}   \
  -Wall -W -Wpointer-arith -Wno-cast-align -Wmissing-prototypes -Wundef -Wmissing-format-attribute -Wwrite-strings -g -O2 \
    ${MORE_CFLAGS} \
  $(GCC_FINAL_CFLAGS)

LDFLAGS= \
  ${LESS_LDFLAGS}   \
   \
    ${MORE_LDFLAGS}

RM=rm
RMF=${RM} -f
ECHO=echo

#PREFIX=lib/
TARGETS= \
 lib/map_int_rgbcolour_p.o lib/map_board_p_node_p.o lib/map_int_char_p.o \
 lib/vector_board_p.o lib/vector_char_p.o lib/vector_edge_p.o \
 lib/vector_node_p.o lib/vector_car_p.o lib/map_int_int.o lib/symtab.o \
 lib/v_char.o
SOURCES= \
 vector_char_p.cpp vector_edge_p.cpp vector_car_p.cpp map_int_char_p.cpp \
 symtab.cpp map_board_p_node_p.cpp vector_board_p.cpp vector_node_p.cpp \
 v_char.cpp map_int_int.cpp \
 map_int_rgbcolour_p.cpp
SUBDIR=src
SUBDIR2=include
SUBDIR3=include

INIT_TARGETS=lib/init.o
BASE_TARGETS=lib/map.o lib/vector.o lib/list.o lib/base.o
OBJECTS=$(INIT_TARGETS) $(TARGETS) $(BASE_TARGETS)

CC=gcc
CXX=g++
AR=ar
RANLIB=ranlib
LORDER=/usr/bin/lorder
TSORT=/usr/bin/tsort

LIST_OBJECTS=\
    for i in `$(LORDER) $(OBJECTS) | $(TSORT)`; do \
        echo "$(FILE_PREFIX)$(LINKOBJS_PREFIX)$$i$(LINKOBJS_SUFFIX)"'$(FILE_SUFFIX)'; done

LIST_DIRS= \
	for i in include lib src targets \
        src include include include \
	    include/erwin; do echo "$(FILE_PREFIX)$$i"'$(FILE_SUFFIX)'; done

LIST_BASE_OTHER= \
	for i in \
        Makefile.in Makefile.cross.in nmakefile wmakefile \
	    configure configure.in configure.erwin configure.def \
	    configure-shellvars configure-install COPYING settings \
	    acerwin.m4 common.m4 Makefile.def.m4 lorder-sh \
	    version; do echo "$(FILE_PREFIX)$$i"'$(FILE_SUFFIX)'; done

LIST_BASE_SOURCES= \
	for i in base vector map list init; do \
        echo "$(FILE_PREFIX)lib/$$i.cpp"'$(FILE_SUFFIX)'; done

LIST_BASE_HEADERS= \
	for i in asm.h asm_gen.h asm_i386.h asm_8664.h asm_ppc.h asm_msvc.h base.h base_i.h \
        confdj.h confmsvc.h confwtcm.h defaults.h defs.h erwin.h \
	    config.h.in classdef.h classundef.h newdelete.h \
	    forwards.h typeinfo.h needed.h stdinc.h vector.h map.h list.h; do \
        echo "$(FILE_PREFIX)include/erwin/$$i"'$(FILE_SUFFIX)'; done

LIST_DSALG_HEADERS= \
	for i in `cd $(srcdir)/include && ls *.*`; do \
        echo "$(FILE_PREFIX)include/$$i"'$(FILE_SUFFIX)'; done

LIST_DSALG_SOURCES= \
	for i in `cd $(srcdir)/src && ls *.*`;  do \
        echo "$(FILE_PREFIX)src/$$i"'$(FILE_SUFFIX)'; done

LIST_MAKE= \
	for i in Makefile Makefile.cross ; do \
        echo "$(FILE_PREFIX)$$i"'$(FILE_SUFFIX)'; done

LIST_OTHER= \
	$(LIST_BASE_OTHER)

LIST_HEADERS= \
	$(LIST_BASE_HEADERS) ; \
	$(LIST_DSALG_HEADERS)

LIST_SOURCES= \
	$(LIST_BASE_SOURCES) ; \
	$(LIST_DSALG_SOURCES)

LIST_FILES= \
	$(LIST_OTHER) ; \
	$(LIST_SOURCES) ; \
	$(LIST_HEADERS)

LIST_DIST_FILES= \
    $(LIST_FILES) ; \
	$(LIST_MAKE)

INSTALL_DATA=cp
MKDIR=mkdir -p

all: all2

.SUFFIXES:
.PHONY: all objects safeclean clean distclean sweep cvs-add dummy

all2: lib/liberwin.a
	@echo "Run make with target 'help' for a list of targets."

.PHONY: help
help: dummy
	@echo "Building:"
	@echo "    all          builds lib/liberwin.a"
	@echo "    objects      builds all object files and makes 'listobjs'"
	@echo "Cleaning Up:"
	@echo "    safeclean    removes objects"
	@echo "    clean        additionally removes library"
	@echo "    distclean    additionally removes configure result"
	@echo "Listings Files:"
	@echo "  All files in listing are prefixed with value of FILE_PREFIX variable."
	@echo "  Example: make FILE_PREFIX=./erwin/ listobjs"
	@echo "   -To stdout-          -Into File-       -This Target Lists-"
	@echo "    list-dirs            listdirs          directories"
	@echo "    list-objects         listobjs          object files"
	@echo "    list-other           listother         misc. files (config, make, etc)"
	@echo "    list-base-headers    listbaseheaders   basic header files"
	@echo "    list-dsalg-headers   listdsalgheaders  header files of data structures"
	@echo "    list-base-sources    listsources       basic source files"
	@echo "    list-dsalg-sources   listdsalgsources  source files of data structures"
	@echo "    list-make            listmake          list Makefiles (with configure done!)"
	@echo "    list-headers         listheaders       base headers + dsalg headers"
	@echo "    list-sources         listsources       base sources + dsalg sources"
	@echo "    list-files           listfiles         sources + headers + other"
	@echo "    list-dist-files      listdistfiles     files + make"
	@echo "  NOTE: Files outside the subdirectory of this make file will not be listed."
	@echo "        This might effect the _u.h files."
	@echo "  Examples:"
	@echo "    To prepare a .targz file containing Erwin sources, use 'listfiles'."
	@echo "    To put objects into another library, use 'listobjs'."
	@echo "    To install headers, use 'listbaseheaders' + 'listdsalgheaders'."
	@echo "Copying Files:"
	@echo "The value of the variable TARGETDIR defines target directory."
	@echo "The value of the variable INSTALL_DATA will be used for copying (default: cp)."
	@echo "The value of the variable MKDIR will be used for making dirs (default: mkdir -p)."
	@echo "    copy-base-headers   the TARGETDIR directory will contain no subdirectories."
	@echo "    copy-dsalg-headers  the TARGETDIR directory will contain no subdirectories."
	@echo "    copy-headers        like copy-dsalg-header with TARGETDIR"
	@echo "                        and  copy-base-headers with TARGETDIR/erwin"
	@echo "    copy-dist-files     copies all files needed for compilation including subdirs"
	@echo "    Replace 'list' by 'dist' for more copying targets."

objects: $(TARGETS) linkobjs

# objects:
.PHONY: list-objects
list-objects: dummy
	@$(LIST_OBJECTS)

.PHONY: linkobjs
linkobjs: dummy
	( $(LIST_OBJECTS) ) > linkobjs

# dirs:
.PHONY: list-dirs
list-dirs: dummy
	@$(LIST_DIRS)

.PHONY: listdirs
listdirs: dummy
	( $(LIST_DIRS) ) > listdirs

# other:
.PHONY: list-other
list-other: dummy
	@$(LIST_OTHER)

.PHONY: listother
listother: dummy
	( $(LIST_OTHER) ) > listother

# headers:
.PHONY: list-headers
list-headers: dummy
	@$(LIST_HEADERS)

.PHONY: listheaders
listheaders: dummy
	( $(LIST_HEADERS) ) > listheaders

# sources:
.PHONY: list-sources
list-sources: dummy
	@$(LIST_SOURCES)

.PHONY: listsources
listsources: dummy
	( $(LIST_SOURCES) ) > listsources

# base headers:
.PHONY: list-base-headers
list-base-headers: dummy
	@$(LIST_BASE_HEADERS)

.PHONY: listbaseheaders
listbaseheaders: dummy
	( $(LIST_BASE_HEADERS) ) > listbaseheaders

# base sources:
.PHONY: list-base-sources
list-base-sources: dummy
	@$(LIST_BASE_SOURCES)

.PHONY: listbasesources
listbasesources: dummy
	( $(LIST_BASE_SOURCES) ) > listbasesources

# dsalg headers:
.PHONY: list-dsalg-headers
list-dsalg-headers: dummy
	@$(LIST_DSALG_HEADERS)

.PHONY: listdsalgheaders
listdsalgheaders: dummy
	( $(LIST_DSALG_HEADERS) ) > listdsalgheaders

# dsalg sources:
.PHONY: list-dsalg-sources
list-dsalg-sources: dummy
	@$(LIST_DSALG_SOURCES)

.PHONY: listdsalgsources
listdsalgsources: dummy
	( $(LIST_DSALG_SOURCES) ) > listdsalgsources

# files:
.PHONY: list-files
list-files: dummy
	@$(LIST_FILES)

.PHONY: listfiles
listfiles: dummy
	( $(LIST_FILES) ) > listfiles

# make:
.PHONY: list-make
list-make: dummy
	@$(LIST_MAKE)

.PHONY: listmake
listmake: dummy
	( $(LIST_MAKE) ) > listmake

# dist-files:
.PHONY: list-dist-files
list-dist-files: dummy
	@$(LIST_DIST_FILES)

.PHONY: listdistfiles
listdistfiles: dummy
	( $(LIST_DIST_FILES) ) > listdistfiles

# Compilation:
lib/init.o: $(srcdir)/lib/init.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/lib/init.cpp -o lib/init.o

lib/map.o: $(srcdir)/lib/map.cpp
	$(CXX) $(CPPFLAGS)  $(CXXFLAGS) -c $(srcdir)/lib/map.cpp -o lib/map.o

lib/vector.o: $(srcdir)/lib/vector.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/lib/vector.cpp -o lib/vector.o

lib/list.o: $(srcdir)/lib/list.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/lib/list.cpp -o lib/list.o

lib/base.o: $(srcdir)/lib/base.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/lib/base.cpp -o lib/base.o


lib/init.s: $(srcdir)/lib/init.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/lib/init.cpp -o lib/init.s

lib/map.s: $(srcdir)/lib/map.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/lib/map.cpp -o lib/map.s

lib/vector.s: $(srcdir)/lib/vector.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/lib/vector.cpp -o lib/vector.s

lib/list.s: $(srcdir)/lib/list.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/lib/list.cpp -o lib/list.s

lib/base.s: $(srcdir)/lib/base.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/lib/base.cpp -o lib/base.s


lib/init.i: $(srcdir)/lib/init.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/lib/init.cpp > lib/init.i

lib/map.i: $(srcdir)/lib/map.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/lib/map.cpp > lib/map.i

lib/vector.i: $(srcdir)/lib/vector.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/lib/vector.cpp > lib/vector.i

lib/list.i: $(srcdir)/lib/list.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/lib/list.cpp > lib/list.i

lib/base.i: $(srcdir)/lib/base.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/lib/base.cpp > lib/base.i

#RULE lib/%.o: $(srcdir)/$(SUBDIR)/%.--SOURCE-ENDING--
#	--COMPILER-- $(CPPFLAGS) --COMPILER-FLAGS-- -c $< -o $@
#
lib/vector_char_p.o: $(srcdir)/$(SUBDIR)/vector_char_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/$(SUBDIR)/vector_char_p.cpp -o lib/vector_char_p.o

lib/vector_edge_p.o: $(srcdir)/$(SUBDIR)/vector_edge_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/$(SUBDIR)/vector_edge_p.cpp -o lib/vector_edge_p.o

lib/vector_car_p.o: $(srcdir)/$(SUBDIR)/vector_car_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/$(SUBDIR)/vector_car_p.cpp -o lib/vector_car_p.o

lib/map_int_char_p.o: $(srcdir)/$(SUBDIR)/map_int_char_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/$(SUBDIR)/map_int_char_p.cpp -o lib/map_int_char_p.o

lib/symtab.o: $(srcdir)/$(SUBDIR)/symtab.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/$(SUBDIR)/symtab.cpp -o lib/symtab.o

lib/map_board_p_node_p.o: $(srcdir)/$(SUBDIR)/map_board_p_node_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/$(SUBDIR)/map_board_p_node_p.cpp -o lib/map_board_p_node_p.o

lib/vector_board_p.o: $(srcdir)/$(SUBDIR)/vector_board_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/$(SUBDIR)/vector_board_p.cpp -o lib/vector_board_p.o

lib/vector_node_p.o: $(srcdir)/$(SUBDIR)/vector_node_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/$(SUBDIR)/vector_node_p.cpp -o lib/vector_node_p.o

lib/v_char.o: $(srcdir)/$(SUBDIR)/v_char.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/$(SUBDIR)/v_char.cpp -o lib/v_char.o

lib/map_int_int.o: $(srcdir)/$(SUBDIR)/map_int_int.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/$(SUBDIR)/map_int_int.cpp -o lib/map_int_int.o

lib/map_int_rgbcolour_p.o: $(srcdir)/$(SUBDIR)/map_int_rgbcolour_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(srcdir)/$(SUBDIR)/map_int_rgbcolour_p.cpp -o lib/map_int_rgbcolour_p.o

#END RULE

#RULE lib/%.s: $(srcdir)/$(SUBDIR)/%.--SOURCE-ENDING--
#	--COMPILER-- $(CPPFLAGS) --COMPILER-FLAGS-- -S $< -o $@
#
lib/vector_char_p.s: $(srcdir)/$(SUBDIR)/vector_char_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/$(SUBDIR)/vector_char_p.cpp -o lib/vector_char_p.s

lib/vector_edge_p.s: $(srcdir)/$(SUBDIR)/vector_edge_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/$(SUBDIR)/vector_edge_p.cpp -o lib/vector_edge_p.s

lib/vector_car_p.s: $(srcdir)/$(SUBDIR)/vector_car_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/$(SUBDIR)/vector_car_p.cpp -o lib/vector_car_p.s

lib/map_int_char_p.s: $(srcdir)/$(SUBDIR)/map_int_char_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/$(SUBDIR)/map_int_char_p.cpp -o lib/map_int_char_p.s

lib/symtab.s: $(srcdir)/$(SUBDIR)/symtab.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/$(SUBDIR)/symtab.cpp -o lib/symtab.s

lib/map_board_p_node_p.s: $(srcdir)/$(SUBDIR)/map_board_p_node_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/$(SUBDIR)/map_board_p_node_p.cpp -o lib/map_board_p_node_p.s

lib/vector_board_p.s: $(srcdir)/$(SUBDIR)/vector_board_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/$(SUBDIR)/vector_board_p.cpp -o lib/vector_board_p.s

lib/vector_node_p.s: $(srcdir)/$(SUBDIR)/vector_node_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/$(SUBDIR)/vector_node_p.cpp -o lib/vector_node_p.s

lib/v_char.s: $(srcdir)/$(SUBDIR)/v_char.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/$(SUBDIR)/v_char.cpp -o lib/v_char.s

lib/map_int_int.s: $(srcdir)/$(SUBDIR)/map_int_int.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/$(SUBDIR)/map_int_int.cpp -o lib/map_int_int.s

lib/map_int_rgbcolour_p.s: $(srcdir)/$(SUBDIR)/map_int_rgbcolour_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -S $(srcdir)/$(SUBDIR)/map_int_rgbcolour_p.cpp -o lib/map_int_rgbcolour_p.s

#END RULE

#RULE lib/%.i: $(srcdir)/$(SUBDIR)/%.--SOURCE-ENDING--
#	--COMPILER-- $(CPPFLAGS) --COMPILER-FLAGS-- -E $< > $@
#
lib/vector_char_p.i: $(srcdir)/$(SUBDIR)/vector_char_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/$(SUBDIR)/vector_char_p.cpp > lib/vector_char_p.i

lib/vector_edge_p.i: $(srcdir)/$(SUBDIR)/vector_edge_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/$(SUBDIR)/vector_edge_p.cpp > lib/vector_edge_p.i

lib/vector_car_p.i: $(srcdir)/$(SUBDIR)/vector_car_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/$(SUBDIR)/vector_car_p.cpp > lib/vector_car_p.i

lib/map_int_char_p.i: $(srcdir)/$(SUBDIR)/map_int_char_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/$(SUBDIR)/map_int_char_p.cpp > lib/map_int_char_p.i

lib/symtab.i: $(srcdir)/$(SUBDIR)/symtab.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/$(SUBDIR)/symtab.cpp > lib/symtab.i

lib/map_board_p_node_p.i: $(srcdir)/$(SUBDIR)/map_board_p_node_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/$(SUBDIR)/map_board_p_node_p.cpp > lib/map_board_p_node_p.i

lib/vector_board_p.i: $(srcdir)/$(SUBDIR)/vector_board_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/$(SUBDIR)/vector_board_p.cpp > lib/vector_board_p.i

lib/vector_node_p.i: $(srcdir)/$(SUBDIR)/vector_node_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/$(SUBDIR)/vector_node_p.cpp > lib/vector_node_p.i

lib/v_char.i: $(srcdir)/$(SUBDIR)/v_char.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/$(SUBDIR)/v_char.cpp > lib/v_char.i

lib/map_int_int.i: $(srcdir)/$(SUBDIR)/map_int_int.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/$(SUBDIR)/map_int_int.cpp > lib/map_int_int.i

lib/map_int_rgbcolour_p.i: $(srcdir)/$(SUBDIR)/map_int_rgbcolour_p.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $(srcdir)/$(SUBDIR)/map_int_rgbcolour_p.cpp > lib/map_int_rgbcolour_p.i

#END RULE

lib/liberwin.a: $(OBJECTS)
	-rm -f lib/liberwin.a
	$(AR) rc lib/liberwin.a `$(LORDER) $(OBJECTS) | $(TSORT)`
	$(RANLIB) lib/liberwin.a

nmakefile.lorder: $(OBJECTS)
	echo 'OBJECTS= '"\\" > nmakefile.lorder
	for i in `$(LORDER) $(OBJECTS) | $(TSORT)`; do \
		echo "   $$i" | sed 's@\.o$$@.obj \\@' | sed 's@/@\\@g' >> nmakefile.lorder ; \
	done
	echo >> nmakefile.lorder
	echo >> nmakefile.lorder

# Maybe do it like this:
#	if test -z "$(TARGETS)" ; then                                                      \
#	    $(AR) rc lib/liberwin.a $(INIT_TARGETS) $(BASE_TARGETS) ;                   \
#	else                                                                                \
#	    $(AR) rc lib/liberwin.a $(INIT_TARGETS) `$(LORDER) $(TARGETS) | $(TSORT)` $(BASE_TARGETS) ; \
#	fi

safeclean: dummy
	-$(RMF) $(OBJECTS)

clean: safeclean
	-$(RMF) lib/*.a lib/cross/*.a *.bak lib/*.bak *.bak
	-$(RMF) lib/*.o lib/cross/*.o

sweep: dummy
	-$(RMF) *\~ lib/*\~ lib/*.bak *,v $(SUBDIR)/*\~ $(SUBDIR)/*.bak $(SUBDIR2)/*\~ $(SUBDIR2)/*.bak $(SUBDIR3)/*\~ $(SUBDIR3)/*.bak

distclean: sweep clean
	-$(RMF) .desktop.el*
	-$(RMF) Makefile Makefile.cross config.log config.cache config.status
	-$(RMF) listdirs listobjs listfiles listdistfiles

cvs-add: distclean
	$(ECHO) *** This does not work.  Please fix me. ***
	false
	-cvs add COPYING Makefile.in Makefile.cross.in settings configure $(SUBDIR) $(SUBDIR2) $(SUBDIR2) targets version
	-(cd $(SUBDIR2) && cvs add erwin *.h *.h)
	-(cd include/erwin && cvs add *.h *.in)
	-(cd lib && cvs add *.cpp cross)
	-(cd src && cvs add *.cpp *.cpp)
	-(cd targets && cvs add *.target)

.PHONY: _copy
_copy: dummy $(LISTING)
	if test -z "$(TARGETDIR)"; then echo "Error: TARGETDIR directory not set."; false; fi
	if test -z "$(LISTING)";   then echo "Error: LISTING not set."; false; fi
	$(MKDIR) $(TARGETDIR)
	for i in . `cat $(LISTING)`; do \
	    if test "$$i" = "."; then true; else \
	        $(INSTALL_DATA) "$$i" "$(TARGETDIR)/`basename $$i`"; \
	    fi ; \
	done

.PHONY: copy-objs
copy-objects: dummy
	$(MAKE) FILE_PREFIX="$(srcdir)/" TARGETDIR="$(TARGETDIR)" LISTING=listobjs _copy

.PHONY: copy-other
copy-other: dummy
	$(MAKE) FILE_PREFIX="$(srcdir)/" TARGETDIR="$(TARGETDIR)" LISTING=listother _copy

.PHONY: copy-base-headers
copy-base-headers: dummy
	$(MAKE) FILE_PREFIX="$(srcdir)/" TARGETDIR="$(TARGETDIR)" LISTING=listbaseheaders _copy

.PHONY: copy-dsalg-headers
copy-dsalg-headers: dummy
	$(MAKE) FILE_PREFIX="$(srcdir)/" TARGETDIR="$(TARGETDIR)" LISTING=listdsalgheaders _copy

.PHONY: copy-base-sources
copy-base-sources: dummy
	$(MAKE) FILE_PREFIX="$(srcdir)/" TARGETDIR="$(TARGETDIR)" LISTING=listbasesources  _copy

.PHONY: copy-dsalg-sources
copy-dsalg-sources: dummy
	$(MAKE) FILE_PREFIX="$(srcdir)/" TARGETDIR="$(TARGETDIR)" LISTING=listdsalgsources _copy

.PHONY: copy-make
copy-make: dummy
	$(MAKE) FILE_PREFIX="$(srcdir)/" TARGETDIR="$(TARGETDIR)" LISTING=listmake _copy

# combinations:
.PHONY: copy-headers
copy-headers: dummy
	$(MAKE) TARGETDIR="$(TARGETDIR)"       copy-dsalg-headers
	$(MAKE) TARGETDIR="$(TARGETDIR)/erwin" copy-base-headers

.PHONY: copy-sources
copy-sources: dummy
	$(MAKE) TARGETDIR="$(TARGETDIR)/lib"        copy-base-sources
	$(MAKE) TARGETDIR="$(TARGETDIR)/src" copy-dsalg-sources

.PHONY: copy-files
copy-files: dummy
	$(MAKE) TARGETDIR="$(TARGETDIR)" copy-other
	$(MAKE) TARGETDIR="$(TARGETDIR)" copy-sources
	$(MAKE) TARGETDIR="$(TARGETDIR)/include" copy-headers
	$(MKDIR) "$(TARGETDIR)/lib"

.PHONY: copy-dist-files
copy-dist-files: dummy
	$(MAKE) TARGETDIR="$(TARGETDIR)" copy-files
	$(MAKE) TARGETDIR="$(TARGETDIR)" copy-make

dummy:
