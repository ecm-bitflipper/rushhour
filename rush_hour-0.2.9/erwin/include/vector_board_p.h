/* -*- Mode: C -*- */
/* Generated Tue Aug 19 15:44:11 GMT 2008
 */
/*
 * Author: Henrik Theiling
 * Description:
 *     Public header file for vectors with arbitrary value types.
 *     This wrapper type can be used to use void* vectors but still
 *     be type safe.
 *
 * @@Begin: Licencing and Copying@@
 *
 * Copyright (c) 1999 Henrik Theiling
 *
 * The term `this software' used in the following, additional to its
 * usual usage, also includes the instantiated source files generated by
 * tools from this package.
 *
 * This software is provided 'as-is', without warranty of any kind,
 * express or implied.  In no event will the authors or copyright holders
 * be held liable for any damages arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must
 * not claim that you wrote the original software. If you use this
 * software in a product, an acknowledgment in the product documentation
 * would be appreciated but is not required.
 *
 * 2. Altered source versions must be plainly marked as such, and must
 * not be misrepresented as being the original software.
 *
 * 3. You must not use any of the names of the authors or copyright
 * holders of the original software for advertising or publicity
 * pertaining to distribution without specific, written prior permission.
 *
 * 4. This notice may not be removed or altered from any source
 * distribution.
 *
 * @@End: Licencing and Copying@@
 *
 */

#ifdef ERWIN_DEBUG_INCLUDE
#warning "Including vector_board_p.h"
#endif

#ifndef ERWIN_VECTOR_BOARD_P_h
#define ERWIN_VECTOR_BOARD_P_h

#ifdef ERWIN_DEBUG_INCLUDE
#warning "First inclusion of vector_board_p.h"
#endif

/* Include the implementation */
#include "vector_char_p.h"

#ifdef HAVE_STDARG_H
#  include <stdarg.h>
#endif






typedef vector_char_p_size_t  vector_board_p_size_t;
typedef vector_char_p_cnt_t   vector_board_p_cnt_t;
typedef vector_char_p_index_t vector_board_p_index_t;

#ifdef vector_char_p_Tchar_t
#ifndef vector_board_p_Tchar_t
#define vector_board_p_Tchar_t vector_char_p_Tchar_t
#endif /* !defined vector_board_p_Tchar_t */
#endif /* defined vector_char_p_Tchar_t */


typedef Board * vector_board_p_value_t;

/*
 * The types */


typedef int (*vector_board_p_cmp_t) (Board * const *, Board * const *);

typedef ERWIN_BOOL (*vector_board_p_feature_t)(Board * const);
typedef Board * (*vector_board_p_map_t)(Board * const);
#define VECTOR_BOARD_P_CMP_T_NULL ((vector_board_p_cmp_t)NULL)

#ifdef __cplusplus
typedef bool (*vector_board_p_cpp_feature_t)(Board * const);
#endif

typedef Board * *vector_board_p_element_ptr_t;
#ifdef __cplusplus
typedef Board * &vector_board_p_element_ref_t;
#endif

typedef int (*vector_board_p_combine_t) (vector_board_p_element_ptr_t, Board * const *);
#define VECTOR_BOARD_P_COMBINE_T_NULL ((vector_board_p_combine_t)NULL)



/* Handle settings */


#ifndef VECTOR_BOARD_P_DIRECT_RECURSION
#  define VECTOR_BOARD_P_DIRECT_RECURSION 0
#endif

#ifndef VECTOR_BOARD_P_MANY_CASTS
#  define VECTOR_BOARD_P_MANY_CASTS VECTOR_CHAR_P_MANY_CASTS
#endif

#ifdef VECTOR_CHAR_P_NO_INT_CONSTRUCTOR
#ifndef VECTOR_BOARD_P_NO_INT_CONSTRUCTOR
#define VECTOR_BOARD_P_NO_INT_CONSTRUCTOR   VECTOR_CHAR_P_NO_INT_CONSTRUCTOR
#endif /* !defined VECTOR_BOARD_P_NO_INT_CONSTRUCTOR */
#endif /* defined VECTOR_CHAR_P_NO_INT_CONSTRUCTOR */
#ifdef VECTOR_CHAR_P_HAVE_INT_CONSTRUCTOR
#ifndef VECTOR_BOARD_P_HAVE_INT_CONSTRUCTOR
#define VECTOR_BOARD_P_HAVE_INT_CONSTRUCTOR VECTOR_CHAR_P_HAVE_INT_CONSTRUCTOR
#endif /* !defined VECTOR_BOARD_P_HAVE_INT_CONSTRUCTOR */
#endif /* defined VECTOR_CHAR_P_HAVE_INT_CONSTRUCTOR */
#ifdef VECTOR_CHAR_P_POSITION_POINTER
#ifndef VECTOR_BOARD_P_POSITION_POINTER
#define VECTOR_BOARD_P_POSITION_POINTER     VECTOR_CHAR_P_POSITION_POINTER
#endif /* !defined VECTOR_BOARD_P_POSITION_POINTER */
#endif /* defined VECTOR_CHAR_P_POSITION_POINTER */

#ifndef VECTOR_BOARD_P_NO_DEFAULT_ARGS
#  define VECTOR_BOARD_P_NO_DEFAULT_ARGS VECTOR_CHAR_P_NO_DEFAULT_ARGS
#endif

#ifndef VECTOR_BOARD_P_CONSTANT_ZERO
#define VECTOR_BOARD_P_CONSTANT_ZERO VECTOR_CHAR_P_CONSTANT_ZERO
#endif /* !defined VECTOR_BOARD_P_CONSTANT_ZERO */
#ifndef VECTOR_BOARD_P_DYN_ZERO
#define VECTOR_BOARD_P_DYN_ZERO      VECTOR_CHAR_P_DYN_ZERO
#endif /* !defined VECTOR_BOARD_P_DYN_ZERO */

#undef  VECTOR_BOARD_P_USE_DEFAULT_ARGS
#if defined(__cplusplus) && VECTOR_BOARD_P_NO_DEFAULT_ARGS == 0
#  define VECTOR_BOARD_P_USE_DEFAULT_ARGS
#  define VECTOR_BOARD_P_DEFAULT_ARG(X) = X
#  if VECTOR_BOARD_P_MANY_CASTS == 0
#    define VECTOR_BOARD_P_DEFAULT_ARG_MANY(X)
#  else
#    define VECTOR_BOARD_P_DEFAULT_ARG_MANY(X) = X
#  endif
#else
#  define VECTOR_BOARD_P_DEFAULT_ARG(X)
#  define VECTOR_BOARD_P_DEFAULT_ARG_MANY(X)
#endif

#define VECTOR_BOARD_P_DEFAULT_ARG_CMP(X)          VECTOR_CHAR_P_DEFAULT_ARG_CMP(X)
#define VECTOR_BOARD_P_DEFAULT_ARG_PRIORITY_CMP(X) VECTOR_CHAR_P_DEFAULT_ARG_PRIORITY_CMP(X)

#undef  vector_errno

#if ERWIN_GLOBAL_ERRNO
#  define vector_errno erwininternalvectorerrno
#endif

#undef  vector_strerror
#define vector_strerror(X) erwininternalvectorstrerror(X)

#undef  VECTOR_OK
#define VECTOR_OK ERWININTERNALVECTOROK

#undef  VECTOR_IS_OK
#define VECTOR_IS_OK(X) ERWININTERNALVECTORISOK(X)

#undef  VECTOR_IS_ERROR
#define VECTOR_IS_ERROR(X) ERWININTERNALVECTORISERROR(X)

#undef  VECTOR_IS_WARNING
#define VECTOR_IS_WARNING(X) ERWININTERNALVECTORISWARNING(X)

#undef  VECTOR_ERR_NOMEM
#define VECTOR_ERR_NOMEM ERWININTERNALVECTORERRNOMEM

#undef  VECTOR_ERR_OUTOFRANGE
#define VECTOR_ERR_OUTOFRANGE ERWININTERNALVECTORERROUTOFRANGE

#undef  VECTOR_ERR_IO
#define VECTOR_ERR_IO ERWININTERNALVECTORERRIO

#undef  VECTOR_ERR_ASSERTIONFAILED
#define VECTOR_ERR_ASSERTIONFAILED ERWININTERNALVECTORERRASSERTIONFAILED

#undef  VECTOR_ERR_NOTCOMPILED
#define VECTOR_ERR_NOTCOMPILED ERWININTERNALVECTORERRNOTCOMPILED

#undef  VECTOR_WARN_OUTOFRANGE
#define VECTOR_WARN_OUTOFRANGE       ERWININTERNALVECTORWARNOUTOFRANGE

#undef  VECTOR_WARN_EMTPY
#define VECTOR_WARN_EMPTY            ERWININTERNALVECTORWARNEMPTY

/*
 * ***** For an explanation of the functions see vector_char_p.h *****
 */

#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_t * vector_board_p_new (void)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER vector_board_p_t * vector_board_p_new (void) 
{
    return (vector_board_p_t *)(void*)vector_char_p_new ();
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_t * vector_board_p_new (void)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#if VECTOR_BOARD_P_DYN_ZERO
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_t * vector_board_p_new_with_zero (Board *  a0)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER vector_board_p_t * vector_board_p_new_with_zero (Board *  a0) 
{
    return (vector_board_p_t *)(void*)vector_char_p_new_with_zero ((char * )a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_t * vector_board_p_new_with_zero (Board *  a0)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_t * vector_board_p_new_with_zero_and_initial_size (Board *  a0, vector_board_p_cnt_t a1)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER vector_board_p_t * vector_board_p_new_with_zero_and_initial_size (Board *  a0, vector_board_p_cnt_t a1) 
{
    return (vector_board_p_t *)(void*)vector_char_p_new_with_zero_and_initial_size ((char * )a0, (vector_char_p_cnt_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_t * vector_board_p_new_with_zero_and_initial_size (Board *  a0, vector_board_p_cnt_t a1)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_t * vector_board_p_new_with_initial_size (vector_board_p_cnt_t a0)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER vector_board_p_t * vector_board_p_new_with_initial_size (vector_board_p_cnt_t a0) 
{
    return (vector_board_p_t *)(void*)vector_char_p_new_with_initial_size ((vector_char_p_cnt_t)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_t * vector_board_p_new_with_initial_size (vector_board_p_cnt_t a0)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_t * vector_board_p_new_from_raw (Board * * a0, vector_board_p_cnt_t a1, vector_board_p_cnt_t a2)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER vector_board_p_t * vector_board_p_new_from_raw (Board * * a0, vector_board_p_cnt_t a1, vector_board_p_cnt_t a2) 
{
    return (vector_board_p_t *)(void*)vector_char_p_new_from_raw ((char * *)(void*)a0, (vector_char_p_cnt_t)a1, (vector_char_p_cnt_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_t * vector_board_p_new_from_raw (Board * * a0, vector_board_p_cnt_t a1, vector_board_p_cnt_t a2)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#if VECTOR_BOARD_P_DYN_ZERO
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_t * vector_board_p_new_from_raw_with_zero (Board * * a0, vector_board_p_cnt_t a1, vector_board_p_cnt_t a2, Board *  a3)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER vector_board_p_t * vector_board_p_new_from_raw_with_zero (Board * * a0, vector_board_p_cnt_t a1, vector_board_p_cnt_t a2, Board *  a3) 
{
    return (vector_board_p_t *)(void*)vector_char_p_new_from_raw_with_zero ((char * *)(void*)a0, (vector_char_p_cnt_t)a1, (vector_char_p_cnt_t)a2, (char * )a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_t * vector_board_p_new_from_raw_with_zero (Board * * a0, vector_board_p_cnt_t a1, vector_board_p_cnt_t a2, Board *  a3)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_t * vector_board_p_new_from_vector (vector_board_p_t * a0)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER vector_board_p_t * vector_board_p_new_from_vector (vector_board_p_t * a0) 
{
    return (vector_board_p_t *)(void*)vector_char_p_new_from_vector ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_t * vector_board_p_new_from_vector (vector_board_p_t * a0)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_init (vector_board_p_t * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_init (vector_board_p_t * a0) 
{
    return vector_char_p_init ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_init (vector_board_p_t * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if VECTOR_BOARD_P_DYN_ZERO
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_init_with_zero_and_initial_size (vector_board_p_t * a0, Board *  a1, vector_board_p_cnt_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_init_with_zero_and_initial_size (vector_board_p_t * a0, Board *  a1, vector_board_p_cnt_t a2) 
{
    return vector_char_p_init_with_zero_and_initial_size ((vector_char_p_t *)(void*)a0, (char * )a1, (vector_char_p_cnt_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_init_with_zero_and_initial_size (vector_board_p_t * a0, Board *  a1, vector_board_p_cnt_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_init_with_initial_size (vector_board_p_t * a0, vector_board_p_cnt_t a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_init_with_initial_size (vector_board_p_t * a0, vector_board_p_cnt_t a1) 
{
    return vector_char_p_init_with_initial_size ((vector_char_p_t *)(void*)a0, (vector_char_p_cnt_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_init_with_initial_size (vector_board_p_t * a0, vector_board_p_cnt_t a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_destroy (vector_board_p_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_destroy (vector_board_p_t * a0)
{
    vector_char_p_destroy ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_destroy (vector_board_p_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_xchg (vector_board_p_t * a0, vector_board_p_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_xchg (vector_board_p_t * a0, vector_board_p_t * a1)
{
    vector_char_p_xchg ((vector_char_p_t *)(void*)a0, (vector_char_p_t *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_xchg (vector_board_p_t * a0, vector_board_p_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if !ERWIN_GLOBAL_ERRNO
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_errno (vector_board_p_t const * a0)   ATTR_UNUSED ATTR_PURE  ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_errno (vector_board_p_t const * a0)  
{
    return vector_char_p_errno ((vector_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_errno (vector_board_p_t const * a0)   ATTR_UNUSED ATTR_PURE  ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_clear_errno (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER void vector_board_p_clear_errno (vector_board_p_t const * a0) 
{
    vector_char_p_clear_errno ((vector_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_clear_errno (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#else
#define vector_board_p_errno(X) vector_errno
#define vector_board_p_clear_errno(X)    ((void)(map_errno= MAP_OK))
#endif
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_t * vector_board_p_copy (vector_board_p_t const * a0) ATTR_UNUSED;
ERWIN_WRAPPER vector_board_p_t * vector_board_p_copy (vector_board_p_t const * a0)
{
    return (vector_board_p_t *)(void*)vector_char_p_copy ((vector_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_t * vector_board_p_copy (vector_board_p_t const * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_t * vector_board_p_copy_err (vector_board_p_t const * a0, int * a1) ATTR_UNUSED;
ERWIN_WRAPPER vector_board_p_t * vector_board_p_copy_err (vector_board_p_t const * a0, int * a1)
{
    return (vector_board_p_t *)(void*)vector_char_p_copy_err ((vector_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_t * vector_board_p_copy_err (vector_board_p_t const * a0, int * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_insert_subvector (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_t const * a2, vector_board_p_index_t a3, vector_board_p_cnt_t a4, ERWIN_BOOL a5) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_insert_subvector (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_t const * a2, vector_board_p_index_t a3, vector_board_p_cnt_t a4, ERWIN_BOOL a5)
{
    return vector_char_p_insert_subvector ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_t const *)(void*)a2, (vector_char_p_index_t)a3, (vector_char_p_cnt_t)a4, a5);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_insert_subvector (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_t const * a2, vector_board_p_index_t a3, vector_board_p_cnt_t a4, ERWIN_BOOL a5) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_t * vector_board_p_subvector (vector_board_p_t const * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2, ERWIN_BOOL a3) ATTR_UNUSED;
ERWIN_WRAPPER vector_board_p_t * vector_board_p_subvector (vector_board_p_t const * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2, ERWIN_BOOL a3)
{
    return (vector_board_p_t *)(void*)vector_char_p_subvector ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_cnt_t)a2, a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_t * vector_board_p_subvector (vector_board_p_t const * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2, ERWIN_BOOL a3) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_delete (vector_board_p_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_delete (vector_board_p_t * a0)
{
    vector_char_p_delete ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_delete (vector_board_p_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_detach (vector_board_p_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_detach (vector_board_p_t * a0)
{
    vector_char_p_detach ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_detach (vector_board_p_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_delete_array (vector_board_p_element_ptr_t a0) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_delete_array (vector_board_p_element_ptr_t a0)
{
    vector_char_p_delete_array ((vector_char_p_element_ptr_t)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_delete_array (vector_board_p_element_ptr_t a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_detach_as_is (vector_board_p_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_detach_as_is (vector_board_p_t * a0)
{
    vector_char_p_detach_as_is ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_detach_as_is (vector_board_p_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_append (vector_board_p_t * a0, Board *  a1) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_append (vector_board_p_t * a0, Board *  a1)
{
    return vector_char_p_append ((vector_char_p_t *)(void*)a0, (char * )a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_append (vector_board_p_t * a0, Board *  a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER Board *  vector_board_p_zero (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER Board *  vector_board_p_zero (vector_board_p_t const * a0) 
{
    return (Board * )vector_char_p_zero ((vector_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT Board *  vector_board_p_zero (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
ERWIN_WRAPPER Board *  vector_board_p_nth (vector_board_p_t const * a0, vector_board_p_index_t a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER Board *  vector_board_p_nth (vector_board_p_t const * a0, vector_board_p_index_t a1) 
{
    return (Board * )vector_char_p_nth ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1);
}
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER Board *  vector_board_p_nth_char (vector_board_p_t const * a0, vector_board_p_index_t a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER Board *  vector_board_p_nth_char (vector_board_p_t const * a0, vector_board_p_index_t a1) 
{
    return (Board * )vector_char_p_nth_char ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT Board *  vector_board_p_nth_char (vector_board_p_t const * a0, vector_board_p_index_t a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER Board *  vector_board_p_first (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER Board *  vector_board_p_first (vector_board_p_t const * a0) 
{
    return (Board * )vector_char_p_first ((vector_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT Board *  vector_board_p_first (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER Board *  vector_board_p_last (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER Board *  vector_board_p_last (vector_board_p_t const * a0) 
{
    return (Board * )vector_char_p_last ((vector_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT Board *  vector_board_p_last (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER Board * vector_board_p_modify (vector_board_p_t * a0, vector_board_p_index_t a1, Board *  a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER Board * vector_board_p_modify (vector_board_p_t * a0, vector_board_p_index_t a1, Board *  a2) 
{
    return (Board *)vector_char_p_modify ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (char * )a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT Board * vector_board_p_modify (vector_board_p_t * a0, vector_board_p_index_t a1, Board *  a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_set (vector_board_p_t * a0, vector_board_p_index_t a1, Board *  a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_set (vector_board_p_t * a0, vector_board_p_index_t a1, Board *  a2) 
{
    return vector_char_p_set ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (char * )a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_set (vector_board_p_t * a0, vector_board_p_index_t a1, Board *  a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_swap (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_index_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER void vector_board_p_swap (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_index_t a2) 
{
    vector_char_p_swap ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_index_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_swap (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_index_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_nth_ptr (vector_board_p_t * a0, vector_board_p_index_t a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_nth_ptr (vector_board_p_t * a0, vector_board_p_index_t a1) 
{
    return (vector_board_p_element_ptr_t)vector_char_p_nth_ptr ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_element_ptr_t vector_board_p_nth_ptr (vector_board_p_t * a0, vector_board_p_index_t a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_nth_ptr_check (vector_board_p_t * a0, vector_board_p_index_t a1) ATTR_UNUSED;
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_nth_ptr_check (vector_board_p_t * a0, vector_board_p_index_t a1)
{
    return (vector_board_p_element_ptr_t)vector_char_p_nth_ptr_check ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_element_ptr_t vector_board_p_nth_ptr_check (vector_board_p_t * a0, vector_board_p_index_t a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_nth_ptr_char (vector_board_p_t * a0, vector_board_p_index_t a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_nth_ptr_char (vector_board_p_t * a0, vector_board_p_index_t a1) 
{
    return (vector_board_p_element_ptr_t)vector_char_p_nth_ptr_char ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_element_ptr_t vector_board_p_nth_ptr_char (vector_board_p_t * a0, vector_board_p_index_t a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_first_ptr (vector_board_p_t * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_first_ptr (vector_board_p_t * a0) 
{
    return (vector_board_p_element_ptr_t)vector_char_p_first_ptr ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_element_ptr_t vector_board_p_first_ptr (vector_board_p_t * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_last_ptr (vector_board_p_t * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_last_ptr (vector_board_p_t * a0) 
{
    return (vector_board_p_element_ptr_t)vector_char_p_last_ptr ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_element_ptr_t vector_board_p_last_ptr (vector_board_p_t * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_reverse (vector_board_p_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_reverse (vector_board_p_t * a0)
{
    vector_char_p_reverse ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_reverse (vector_board_p_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_erase (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_erase (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2)
{
    return vector_char_p_erase ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_cnt_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_erase (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_erase_flags (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2, ERWIN_BOOL a3, ERWIN_BOOL a4) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_erase_flags (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2, ERWIN_BOOL a3, ERWIN_BOOL a4)
{
    return vector_char_p_erase_flags ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_cnt_t)a2, a3, a4);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_erase_flags (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2, ERWIN_BOOL a3, ERWIN_BOOL a4) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_swap_erase (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_swap_erase (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2)
{
    return vector_char_p_swap_erase ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_cnt_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_swap_erase (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_swap_erase_flags (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2, ERWIN_BOOL a3, ERWIN_BOOL a4) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_swap_erase_flags (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2, ERWIN_BOOL a3, ERWIN_BOOL a4)
{
    return vector_char_p_swap_erase_flags ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_cnt_t)a2, a3, a4);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_swap_erase_flags (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2, ERWIN_BOOL a3, ERWIN_BOOL a4) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_erase_if (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2) ATTR_UNUSED;
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_erase_if (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2)
{
    return (vector_board_p_cnt_t)vector_char_p_erase_if ((vector_char_p_t *)(void*)a0, (vector_char_p_feature_t)a1, a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_cnt_t vector_board_p_erase_if (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_erase_equals (vector_board_p_t * a0, vector_board_p_cmp_t a1, vector_board_p_combine_t a2) ATTR_UNUSED;
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_erase_equals (vector_board_p_t * a0, vector_board_p_cmp_t a1, vector_board_p_combine_t a2)
{
    return (vector_board_p_cnt_t)vector_char_p_erase_equals ((vector_char_p_t *)(void*)a0, (vector_char_p_cmp_t)a1, (vector_char_p_combine_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_cnt_t vector_board_p_erase_equals (vector_board_p_t * a0, vector_board_p_cmp_t a1, vector_board_p_combine_t a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_erase_zero (vector_board_p_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_erase_zero (vector_board_p_t * a0)
{
    return (vector_board_p_cnt_t)vector_char_p_erase_zero ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_cnt_t vector_board_p_erase_zero (vector_board_p_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_erase_if_flags (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2, ERWIN_BOOL a3, ERWIN_BOOL a4) ATTR_UNUSED;
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_erase_if_flags (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2, ERWIN_BOOL a3, ERWIN_BOOL a4)
{
    return (vector_board_p_cnt_t)vector_char_p_erase_if_flags ((vector_char_p_t *)(void*)a0, (vector_char_p_feature_t)a1, a2, a3, a4);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_cnt_t vector_board_p_erase_if_flags (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2, ERWIN_BOOL a3, ERWIN_BOOL a4) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_make_heap (vector_board_p_t * a0, vector_board_p_cmp_t a1) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_make_heap (vector_board_p_t * a0, vector_board_p_cmp_t a1)
{
    vector_char_p_make_heap ((vector_char_p_t *)(void*)a0, (vector_char_p_cmp_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_make_heap (vector_board_p_t * a0, vector_board_p_cmp_t a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_heap_left (vector_board_p_t const * a0, vector_board_p_index_t a1)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_heap_left (vector_board_p_t const * a0, vector_board_p_index_t a1) 
{
    return (vector_board_p_index_t)vector_char_p_heap_left ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_index_t vector_board_p_heap_left (vector_board_p_t const * a0, vector_board_p_index_t a1)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_heap_right (vector_board_p_t const * a0, vector_board_p_index_t a1)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_heap_right (vector_board_p_t const * a0, vector_board_p_index_t a1) 
{
    return (vector_board_p_index_t)vector_char_p_heap_right ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_index_t vector_board_p_heap_right (vector_board_p_t const * a0, vector_board_p_index_t a1)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_heap_father (vector_board_p_t const * a0, vector_board_p_index_t a1)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_heap_father (vector_board_p_t const * a0, vector_board_p_index_t a1) 
{
    return (vector_board_p_index_t)vector_char_p_heap_father ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_index_t vector_board_p_heap_father (vector_board_p_t const * a0, vector_board_p_index_t a1)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER Board * vector_board_p_heap_extract (vector_board_p_t * a0, vector_board_p_cmp_t a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER Board * vector_board_p_heap_extract (vector_board_p_t * a0, vector_board_p_cmp_t a1) 
{
    return (Board *)vector_char_p_heap_extract ((vector_char_p_t *)(void*)a0, (vector_char_p_cmp_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT Board * vector_board_p_heap_extract (vector_board_p_t * a0, vector_board_p_cmp_t a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_heap_raise (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cmp_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER void vector_board_p_heap_raise (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cmp_t a2) 
{
    vector_char_p_heap_raise ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_cmp_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_heap_raise (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cmp_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_heap_sink (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cmp_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER void vector_board_p_heap_sink (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cmp_t a2) 
{
    vector_char_p_heap_sink ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_cmp_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_heap_sink (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cmp_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_heap_fix (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cmp_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER void vector_board_p_heap_fix (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cmp_t a2) 
{
    vector_char_p_heap_fix ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_cmp_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_heap_fix (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cmp_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_heap_insert (vector_board_p_t * a0, Board *  a1, vector_board_p_cmp_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_heap_insert (vector_board_p_t * a0, Board *  a1, vector_board_p_cmp_t a2) 
{
    return vector_char_p_heap_insert ((vector_char_p_t *)(void*)a0, (char * )a1, (vector_char_p_cmp_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_heap_insert (vector_board_p_t * a0, Board *  a1, vector_board_p_cmp_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_heap_erase (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cmp_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER void vector_board_p_heap_erase (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cmp_t a2) 
{
    vector_char_p_heap_erase ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_cmp_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_heap_erase (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cmp_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_heap_sort (vector_board_p_t * a0, vector_board_p_cmp_t a1) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_heap_sort (vector_board_p_t * a0, vector_board_p_cmp_t a1)
{
    vector_char_p_heap_sort ((vector_char_p_t *)(void*)a0, (vector_char_p_cmp_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_heap_sort (vector_board_p_t * a0, vector_board_p_cmp_t a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_priority_cmp (vector_board_p_t const * a0, vector_board_p_t const * a1, vector_board_p_cmp_t a2) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_priority_cmp (vector_board_p_t const * a0, vector_board_p_t const * a1, vector_board_p_cmp_t a2)
{
    return vector_char_p_priority_cmp ((vector_char_p_t const *)(void*)a0, (vector_char_p_t const *)(void*)a1, (vector_char_p_cmp_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_priority_cmp (vector_board_p_t const * a0, vector_board_p_t const * a1, vector_board_p_cmp_t a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_chop (vector_board_p_t * a0, vector_board_p_cnt_t a1) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_chop (vector_board_p_t * a0, vector_board_p_cnt_t a1)
{
    return vector_char_p_chop ((vector_char_p_t *)(void*)a0, (vector_char_p_cnt_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_chop (vector_board_p_t * a0, vector_board_p_cnt_t a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_chop_flags (vector_board_p_t * a0, vector_board_p_cnt_t a1, ERWIN_BOOL a2, ERWIN_BOOL a3) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_chop_flags (vector_board_p_t * a0, vector_board_p_cnt_t a1, ERWIN_BOOL a2, ERWIN_BOOL a3)
{
    return vector_char_p_chop_flags ((vector_char_p_t *)(void*)a0, (vector_char_p_cnt_t)a1, a2, a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_chop_flags (vector_board_p_t * a0, vector_board_p_cnt_t a1, ERWIN_BOOL a2, ERWIN_BOOL a3) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER Board * vector_board_p_last_chop1 (vector_board_p_t * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER Board * vector_board_p_last_chop1 (vector_board_p_t * a0) 
{
    return (Board *)vector_char_p_last_chop1 ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT Board * vector_board_p_last_chop1 (vector_board_p_t * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER Board * vector_board_p_first_swap_chop1 (vector_board_p_t * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER Board * vector_board_p_first_swap_chop1 (vector_board_p_t * a0) 
{
    return (Board *)vector_char_p_first_swap_chop1 ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT Board * vector_board_p_first_swap_chop1 (vector_board_p_t * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_append_raw (vector_board_p_t * a0, Board * const * a1, vector_board_p_cnt_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_append_raw (vector_board_p_t * a0, Board * const * a1, vector_board_p_cnt_t a2) 
{
    return vector_char_p_append_raw ((vector_char_p_t *)(void*)a0, (char * const *)(void*)a1, (vector_char_p_cnt_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_append_raw (vector_board_p_t * a0, Board * const * a1, vector_board_p_cnt_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_append_no_copy (vector_board_p_t * a0, Board * const * a1, vector_board_p_cnt_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_append_no_copy (vector_board_p_t * a0, Board * const * a1, vector_board_p_cnt_t a2) 
{
    return vector_char_p_append_no_copy ((vector_char_p_t *)(void*)a0, (char * const *)(void*)a1, (vector_char_p_cnt_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_append_no_copy (vector_board_p_t * a0, Board * const * a1, vector_board_p_cnt_t a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_append_vector (vector_board_p_t * a0, vector_board_p_t const * a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_append_vector (vector_board_p_t * a0, vector_board_p_t const * a1) 
{
    return vector_char_p_append_vector ((vector_char_p_t *)(void*)a0, (vector_char_p_t const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_append_vector (vector_board_p_t * a0, vector_board_p_t const * a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_append_string (vector_board_p_t * a0, Board * const * a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_append_string (vector_board_p_t * a0, Board * const * a1) 
{
    return vector_char_p_append_string ((vector_char_p_t *)(void*)a0, (char * const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_append_string (vector_board_p_t * a0, Board * const * a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_make_gap (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_make_gap (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2)
{
    return vector_char_p_make_gap ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_cnt_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_make_gap (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_make_gap_with (vector_board_p_t * a0, vector_board_p_index_t a1, Board *  a2, vector_board_p_cnt_t a3) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_make_gap_with (vector_board_p_t * a0, vector_board_p_index_t a1, Board *  a2, vector_board_p_cnt_t a3)
{
    return vector_char_p_make_gap_with ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (char * )a2, (vector_char_p_cnt_t)a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_make_gap_with (vector_board_p_t * a0, vector_board_p_index_t a1, Board *  a2, vector_board_p_cnt_t a3) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_overwrite_raw (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_overwrite_raw (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3)
{
    return vector_char_p_overwrite_raw ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (char * const *)(void*)a2, (vector_char_p_cnt_t)a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_overwrite_raw (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_overwrite_flags (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3, ERWIN_BOOL a4, ERWIN_BOOL a5) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_overwrite_flags (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3, ERWIN_BOOL a4, ERWIN_BOOL a5)
{
    return vector_char_p_overwrite_flags ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (char * const *)(void*)a2, (vector_char_p_cnt_t)a3, a4, a5);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_overwrite_flags (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3, ERWIN_BOOL a4, ERWIN_BOOL a5) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_overwrite_string (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_overwrite_string (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2)
{
    return vector_char_p_overwrite_string ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (char * const *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_overwrite_string (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_overwrite_vector (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_t const * a2) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_overwrite_vector (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_t const * a2)
{
    return vector_char_p_overwrite_vector ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_t const *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_overwrite_vector (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_t const * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_overwrite (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_t const * a2, vector_board_p_index_t a3, vector_board_p_cnt_t a4) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_overwrite (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_t const * a2, vector_board_p_index_t a3, vector_board_p_cnt_t a4)
{
    return vector_char_p_overwrite ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_t const *)(void*)a2, (vector_char_p_index_t)a3, (vector_char_p_cnt_t)a4);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_overwrite (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_t const * a2, vector_board_p_index_t a3, vector_board_p_cnt_t a4) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_insert (vector_board_p_t * a0, vector_board_p_index_t a1, Board *  a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_insert (vector_board_p_t * a0, vector_board_p_index_t a1, Board *  a2) 
{
    return vector_char_p_insert ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (char * )a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_insert (vector_board_p_t * a0, vector_board_p_index_t a1, Board *  a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_insert_raw (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_insert_raw (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3)
{
    return vector_char_p_insert_raw ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (char * const *)(void*)a2, (vector_char_p_cnt_t)a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_insert_raw (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_insert_no_copy (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_insert_no_copy (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3)
{
    return vector_char_p_insert_no_copy ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (char * const *)(void*)a2, (vector_char_p_cnt_t)a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_insert_no_copy (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_insert_string (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_insert_string (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2) 
{
    return vector_char_p_insert_string ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (char * const *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_insert_string (vector_board_p_t * a0, vector_board_p_index_t a1, Board * const * a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_insert_vector (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_t const * a2) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_insert_vector (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_t const * a2)
{
    return vector_char_p_insert_vector ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_t const *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_insert_vector (vector_board_p_t * a0, vector_board_p_index_t a1, vector_board_p_t const * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_string_length (vector_board_p_t const * a0, Board * const * a1)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_string_length (vector_board_p_t const * a0, Board * const * a1) 
{
    return (vector_board_p_cnt_t)vector_char_p_string_length ((vector_char_p_t const *)(void*)a0, (char * const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_cnt_t vector_board_p_string_length (vector_board_p_t const * a0, Board * const * a1)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_ensure_size (vector_board_p_t * a0, vector_board_p_cnt_t a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_ensure_size (vector_board_p_t * a0, vector_board_p_cnt_t a1) 
{
    return vector_char_p_ensure_size ((vector_char_p_t *)(void*)a0, (vector_char_p_cnt_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_ensure_size (vector_board_p_t * a0, vector_board_p_cnt_t a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_ensure_size_with (vector_board_p_t * a0, vector_board_p_cnt_t a1, Board *  a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_ensure_size_with (vector_board_p_t * a0, vector_board_p_cnt_t a1, Board *  a2) 
{
    return vector_char_p_ensure_size_with ((vector_char_p_t *)(void*)a0, (vector_char_p_cnt_t)a1, (char * )a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_ensure_size_with (vector_board_p_t * a0, vector_board_p_cnt_t a1, Board *  a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_set_size (vector_board_p_t * a0, vector_board_p_cnt_t a1) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_set_size (vector_board_p_t * a0, vector_board_p_cnt_t a1)
{
    return vector_char_p_set_size ((vector_char_p_t *)(void*)a0, (vector_char_p_cnt_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_set_size (vector_board_p_t * a0, vector_board_p_cnt_t a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_set_size_with (vector_board_p_t * a0, vector_board_p_cnt_t a1, Board *  a2) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_set_size_with (vector_board_p_t * a0, vector_board_p_cnt_t a1, Board *  a2)
{
    return vector_char_p_set_size_with ((vector_char_p_t *)(void*)a0, (vector_char_p_cnt_t)a1, (char * )a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_set_size_with (vector_board_p_t * a0, vector_board_p_cnt_t a1, Board *  a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_set_size_no_resize (vector_board_p_t * a0, vector_board_p_cnt_t a1) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_set_size_no_resize (vector_board_p_t * a0, vector_board_p_cnt_t a1)
{
    return vector_char_p_set_size_no_resize ((vector_char_p_t *)(void*)a0, (vector_char_p_cnt_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_set_size_no_resize (vector_board_p_t * a0, vector_board_p_cnt_t a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_set_size_raw (vector_board_p_t * a0, vector_board_p_cnt_t a1) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_set_size_raw (vector_board_p_t * a0, vector_board_p_cnt_t a1)
{
    return vector_char_p_set_size_raw ((vector_char_p_t *)(void*)a0, (vector_char_p_cnt_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_set_size_raw (vector_board_p_t * a0, vector_board_p_cnt_t a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_shrink (vector_board_p_t * a0, ERWIN_BOOL a1) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_shrink (vector_board_p_t * a0, ERWIN_BOOL a1)
{
    vector_char_p_shrink ((vector_char_p_t *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_shrink (vector_board_p_t * a0, ERWIN_BOOL a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_ensure_table_size (vector_board_p_t * a0, vector_board_p_cnt_t a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int vector_board_p_ensure_table_size (vector_board_p_t * a0, vector_board_p_cnt_t a1) 
{
    return vector_char_p_ensure_table_size ((vector_char_p_t *)(void*)a0, (vector_char_p_cnt_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_ensure_table_size (vector_board_p_t * a0, vector_board_p_cnt_t a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_as_array (vector_board_p_t const * a0) ATTR_UNUSED;
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_as_array (vector_board_p_t const * a0)
{
    return (vector_board_p_element_ptr_t)vector_char_p_as_array ((vector_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_element_ptr_t vector_board_p_as_array (vector_board_p_t const * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_as_open_array (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_as_open_array (vector_board_p_t const * a0) 
{
    return (vector_board_p_element_ptr_t)vector_char_p_as_open_array ((vector_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_element_ptr_t vector_board_p_as_open_array (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_as_array_detach (vector_board_p_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_as_array_detach (vector_board_p_t * a0)
{
    return (vector_board_p_element_ptr_t)vector_char_p_as_array_detach ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_element_ptr_t vector_board_p_as_array_detach (vector_board_p_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_ensure_heap_storage (vector_board_p_t * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER void vector_board_p_ensure_heap_storage (vector_board_p_t * a0) 
{
    vector_char_p_ensure_heap_storage ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_ensure_heap_storage (vector_board_p_t * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_has_heap_storage (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_has_heap_storage (vector_board_p_t const * a0) 
{
    return vector_char_p_has_heap_storage ((vector_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT ERWIN_BOOL vector_board_p_has_heap_storage (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_inline_store_cnt (void)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_inline_store_cnt (void) 
{
    return (vector_board_p_cnt_t)vector_char_p_inline_store_cnt ();
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_cnt_t vector_board_p_inline_store_cnt (void)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_as_open_array_detach (vector_board_p_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_as_open_array_detach (vector_board_p_t * a0)
{
    return (vector_board_p_element_ptr_t)vector_char_p_as_open_array_detach ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_element_ptr_t vector_board_p_as_open_array_detach (vector_board_p_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_qsort (vector_board_p_t * a0, vector_board_p_cmp_t a1) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_qsort (vector_board_p_t * a0, vector_board_p_cmp_t a1)
{
    vector_char_p_qsort ((vector_char_p_t *)(void*)a0, (vector_char_p_cmp_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_qsort (vector_board_p_t * a0, vector_board_p_cmp_t a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_sort (vector_board_p_t * a0, vector_board_p_cmp_t a1) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_sort (vector_board_p_t * a0, vector_board_p_cmp_t a1)
{
    vector_char_p_sort ((vector_char_p_t *)(void*)a0, (vector_char_p_cmp_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_sort (vector_board_p_t * a0, vector_board_p_cmp_t a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_bfind (vector_board_p_t const * a0, Board *  a1, vector_board_p_cmp_t a2) ATTR_UNUSED;
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_bfind (vector_board_p_t const * a0, Board *  a1, vector_board_p_cmp_t a2)
{
    return (vector_board_p_index_t)vector_char_p_bfind ((vector_char_p_t const *)(void*)a0, (char * )a1, (vector_char_p_cmp_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_index_t vector_board_p_bfind (vector_board_p_t const * a0, Board *  a1, vector_board_p_cmp_t a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_locate (vector_board_p_index_t * a0, vector_board_p_t const * a1, Board *  a2, vector_board_p_cmp_t a3, int a4) ATTR_UNUSED;
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_locate (vector_board_p_index_t * a0, vector_board_p_t const * a1, Board *  a2, vector_board_p_cmp_t a3, int a4)
{
    return vector_char_p_locate ((vector_char_p_index_t *)(void*)a0, (vector_char_p_t const *)(void*)a1, (char * )a2, (vector_char_p_cmp_t)a3, a4);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT ERWIN_BOOL vector_board_p_locate (vector_board_p_index_t * a0, vector_board_p_t const * a1, Board *  a2, vector_board_p_cmp_t a3, int a4) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#define vector_board_p_forall(v,i,h) \
        for(vector_board_p_init_iterator((v),&(i)); \
            vector_board_p_next_iteration((v),&(i),&(h)); /*nix*/)
#define vector_board_p_forall_ptr(v,i,h) for(vector_board_p_init_iterator(v,&(i)); vector_board_p_next_iteration_ptr(v,&(i),&(h)); /*nix*/)
#define vector_board_p_forall_ptr_const(v,i,h) for(vector_board_p_init_iterator(v,&(i)); vector_board_p_next_iteration_ptr_const(v,&(i),&(h)); /*nix*/)
#define vector_board_p_forall_reverse(v,i,h) for(vector_board_p_init_iterator_reverse(v,&(i)); vector_board_p_next_iteration_reverse(v,&(i),&(h)); /*nix*/)
#define vector_board_p_forall_ptr_reverse(v,i,h) for(vector_board_p_init_iterator_reverse(v,&(i)); vector_board_p_next_iteration_ptr_reverse(v,&(i),&(h)); /*nix*/)
#define vector_board_p_forall_ptr_const_reverse(v,i,h) for(vector_board_p_init_iterator_reverse(v,&(i)); vector_board_p_next_iteration_ptr_const_reverse(v,&(i),&(h)); /*nix*/)
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_init_iterator (vector_board_p_t const * a0, vector_board_p_index_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_init_iterator (vector_board_p_t const * a0, vector_board_p_index_t * a1)
{
    vector_char_p_init_iterator ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_init_iterator (vector_board_p_t const * a0, vector_board_p_index_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_next_iteration (vector_board_p_t const * a0, vector_board_p_index_t * a1, Board * * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_next_iteration (vector_board_p_t const * a0, vector_board_p_index_t * a1, Board * * a2)
{
    return vector_char_p_next_iteration ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t *)(void*)a1, (char * *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT ERWIN_BOOL vector_board_p_next_iteration (vector_board_p_t const * a0, vector_board_p_index_t * a1, Board * * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_next_iteration_ptr (vector_board_p_t * a0, vector_board_p_index_t * a1, Board * * * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_next_iteration_ptr (vector_board_p_t * a0, vector_board_p_index_t * a1, Board * * * a2)
{
    return vector_char_p_next_iteration_ptr ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t *)(void*)a1, (char * * *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT ERWIN_BOOL vector_board_p_next_iteration_ptr (vector_board_p_t * a0, vector_board_p_index_t * a1, Board * * * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_next_iteration_ptr_const (vector_board_p_t const * a0, vector_board_p_index_t * a1, Board * const * * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_next_iteration_ptr_const (vector_board_p_t const * a0, vector_board_p_index_t * a1, Board * const * * a2)
{
    return vector_char_p_next_iteration_ptr_const ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t *)(void*)a1, (char * const * *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT ERWIN_BOOL vector_board_p_next_iteration_ptr_const (vector_board_p_t const * a0, vector_board_p_index_t * a1, Board * const * * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_init_iterator_reverse (vector_board_p_t const * a0, vector_board_p_index_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_init_iterator_reverse (vector_board_p_t const * a0, vector_board_p_index_t * a1)
{
    vector_char_p_init_iterator_reverse ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_init_iterator_reverse (vector_board_p_t const * a0, vector_board_p_index_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_next_iteration_reverse (vector_board_p_t const * a0, vector_board_p_index_t * a1, Board * * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_next_iteration_reverse (vector_board_p_t const * a0, vector_board_p_index_t * a1, Board * * a2)
{
    return vector_char_p_next_iteration_reverse ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t *)(void*)a1, (char * *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT ERWIN_BOOL vector_board_p_next_iteration_reverse (vector_board_p_t const * a0, vector_board_p_index_t * a1, Board * * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_next_iteration_ptr_reverse (vector_board_p_t * a0, vector_board_p_index_t * a1, Board * * * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_next_iteration_ptr_reverse (vector_board_p_t * a0, vector_board_p_index_t * a1, Board * * * a2)
{
    return vector_char_p_next_iteration_ptr_reverse ((vector_char_p_t *)(void*)a0, (vector_char_p_index_t *)(void*)a1, (char * * *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT ERWIN_BOOL vector_board_p_next_iteration_ptr_reverse (vector_board_p_t * a0, vector_board_p_index_t * a1, Board * * * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_next_iteration_ptr_const_reverse (vector_board_p_t const * a0, vector_board_p_index_t * a1, Board * const * * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_next_iteration_ptr_const_reverse (vector_board_p_t const * a0, vector_board_p_index_t * a1, Board * const * * a2)
{
    return vector_char_p_next_iteration_ptr_const_reverse ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t *)(void*)a1, (char * const * *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT ERWIN_BOOL vector_board_p_next_iteration_ptr_const_reverse (vector_board_p_t const * a0, vector_board_p_index_t * a1, Board * const * * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_clear (vector_board_p_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_clear (vector_board_p_t * a0)
{
    vector_char_p_clear ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_clear (vector_board_p_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_clear_keep (vector_board_p_t * a0, vector_board_p_cnt_t a1) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_clear_keep (vector_board_p_t * a0, vector_board_p_cnt_t a1)
{
    vector_char_p_clear_keep ((vector_char_p_t *)(void*)a0, (vector_char_p_cnt_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_clear_keep (vector_board_p_t * a0, vector_board_p_cnt_t a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_clear_flags (vector_board_p_t * a0, ERWIN_BOOL a1, ERWIN_BOOL a2) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_clear_flags (vector_board_p_t * a0, ERWIN_BOOL a1, ERWIN_BOOL a2)
{
    vector_char_p_clear_flags ((vector_char_p_t *)(void*)a0, a1, a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_clear_flags (vector_board_p_t * a0, ERWIN_BOOL a1, ERWIN_BOOL a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_clear_no_resize (vector_board_p_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_clear_no_resize (vector_board_p_t * a0)
{
    vector_char_p_clear_no_resize ((vector_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_clear_no_resize (vector_board_p_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_nentries (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_nentries (vector_board_p_t const * a0) 
{
    return (vector_board_p_cnt_t)vector_char_p_nentries ((vector_char_p_t const *)(void*)a0);
}
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_empty (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_empty (vector_board_p_t const * a0) 
{
    return vector_char_p_empty ((vector_char_p_t const *)(void*)a0);
}
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_table_size (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER vector_board_p_cnt_t vector_board_p_table_size (vector_board_p_t const * a0) 
{
    return (vector_board_p_cnt_t)vector_char_p_table_size ((vector_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_cnt_t vector_board_p_table_size (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_find (vector_board_p_t const * a0, vector_board_p_index_t a1, Board *  a2)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_find (vector_board_p_t const * a0, vector_board_p_index_t a1, Board *  a2) 
{
    return (vector_board_p_index_t)vector_char_p_find ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1, (char * )a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_index_t vector_board_p_find (vector_board_p_t const * a0, vector_board_p_index_t a1, Board *  a2)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_find_ptr (vector_board_p_t const * a0, vector_board_p_index_t a1, Board *  a2)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_find_ptr (vector_board_p_t const * a0, vector_board_p_index_t a1, Board *  a2) 
{
    return (vector_board_p_element_ptr_t)vector_char_p_find_ptr ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1, (char * )a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_element_ptr_t vector_board_p_find_ptr (vector_board_p_t const * a0, vector_board_p_index_t a1, Board *  a2)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_rfind (vector_board_p_t const * a0, vector_board_p_index_t a1, Board *  a2)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_rfind (vector_board_p_t const * a0, vector_board_p_index_t a1, Board *  a2) 
{
    return (vector_board_p_index_t)vector_char_p_rfind ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1, (char * )a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_index_t vector_board_p_rfind (vector_board_p_t const * a0, vector_board_p_index_t a1, Board *  a2)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_rfind_ptr (vector_board_p_t const * a0, vector_board_p_index_t a1, Board *  a2)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER vector_board_p_element_ptr_t vector_board_p_rfind_ptr (vector_board_p_t const * a0, vector_board_p_index_t a1, Board *  a2) 
{
    return (vector_board_p_element_ptr_t)vector_char_p_rfind_ptr ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1, (char * )a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_element_ptr_t vector_board_p_rfind_ptr (vector_board_p_t const * a0, vector_board_p_index_t a1, Board *  a2)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_find_raw (vector_board_p_t const * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_find_raw (vector_board_p_t const * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3) 
{
    return (vector_board_p_index_t)vector_char_p_find_raw ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1, (char * const *)(void*)a2, (vector_char_p_cnt_t)a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_index_t vector_board_p_find_raw (vector_board_p_t const * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_rfind_raw (vector_board_p_t const * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_rfind_raw (vector_board_p_t const * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3) 
{
    return (vector_board_p_index_t)vector_char_p_rfind_raw ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1, (char * const *)(void*)a2, (vector_char_p_cnt_t)a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_index_t vector_board_p_rfind_raw (vector_board_p_t const * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_find_if (vector_board_p_t const * a0, vector_board_p_index_t a1, vector_board_p_feature_t a2, ERWIN_BOOL a3) ATTR_UNUSED;
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_find_if (vector_board_p_t const * a0, vector_board_p_index_t a1, vector_board_p_feature_t a2, ERWIN_BOOL a3)
{
    return (vector_board_p_index_t)vector_char_p_find_if ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_feature_t)a2, a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_index_t vector_board_p_find_if (vector_board_p_t const * a0, vector_board_p_index_t a1, vector_board_p_feature_t a2, ERWIN_BOOL a3) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_rfind_if (vector_board_p_t const * a0, vector_board_p_index_t a1, vector_board_p_feature_t a2, ERWIN_BOOL a3) ATTR_UNUSED;
ERWIN_WRAPPER vector_board_p_index_t vector_board_p_rfind_if (vector_board_p_t const * a0, vector_board_p_index_t a1, vector_board_p_feature_t a2, ERWIN_BOOL a3)
{
    return (vector_board_p_index_t)vector_char_p_rfind_if ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_feature_t)a2, a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT vector_board_p_index_t vector_board_p_rfind_if (vector_board_p_t const * a0, vector_board_p_index_t a1, vector_board_p_feature_t a2, ERWIN_BOOL a3) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_is_equal_at (vector_board_p_t const * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER ERWIN_BOOL vector_board_p_is_equal_at (vector_board_p_t const * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3) 
{
    return vector_char_p_is_equal_at ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1, (char * const *)(void*)a2, (vector_char_p_cnt_t)a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT ERWIN_BOOL vector_board_p_is_equal_at (vector_board_p_t const * a0, vector_board_p_index_t a1, Board * const * a2, vector_board_p_cnt_t a3)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_ltrim_if (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_ltrim_if (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2)
{
    vector_char_p_ltrim_if ((vector_char_p_t *)(void*)a0, (vector_char_p_feature_t)a1, a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_ltrim_if (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_rtrim_if (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_rtrim_if (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2)
{
    vector_char_p_rtrim_if ((vector_char_p_t *)(void*)a0, (vector_char_p_feature_t)a1, a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_rtrim_if (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_trim_if (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_trim_if (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2)
{
    vector_char_p_trim_if ((vector_char_p_t *)(void*)a0, (vector_char_p_feature_t)a1, a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_trim_if (vector_board_p_t * a0, vector_board_p_feature_t a1, ERWIN_BOOL a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void vector_board_p_map (vector_board_p_t * a0, vector_board_p_map_t a1) ATTR_UNUSED;
ERWIN_WRAPPER void vector_board_p_map (vector_board_p_t * a0, vector_board_p_map_t a1)
{
    vector_char_p_map ((vector_char_p_t *)(void*)a0, (vector_char_p_map_t)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT void vector_board_p_map (vector_board_p_t * a0, vector_board_p_map_t a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int vector_board_p_cmp (vector_board_p_t const * a0, vector_board_p_t const * a1, vector_board_p_cmp_t a2) ATTR_UNUSED;
ERWIN_WRAPPER int vector_board_p_cmp (vector_board_p_t const * a0, vector_board_p_t const * a1, vector_board_p_cmp_t a2)
{
    return vector_char_p_cmp ((vector_char_p_t const *)(void*)a0, (vector_char_p_t const *)(void*)a1, (vector_char_p_cmp_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT int vector_board_p_cmp (vector_board_p_t const * a0, vector_board_p_t const * a1, vector_board_p_cmp_t a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER hashval_t vector_board_p_hash_raw (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER hashval_t vector_board_p_hash_raw (vector_board_p_t const * a0) 
{
    return vector_char_p_hash_raw ((vector_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT hashval_t vector_board_p_hash_raw (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER hashval_t vector_board_p_hash (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER hashval_t vector_board_p_hash (vector_board_p_t const * a0) 
{
    return vector_char_p_hash ((vector_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERWIN_EXPORT hashval_t vector_board_p_hash (vector_board_p_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/



#ifdef __cplusplus
struct vector_board_p_t : protected vector_char_p_t
#else
struct vector_board_p_t
#endif
{
#ifndef __cplusplus
    vector_char_p_t impl;
#endif

#ifdef __cplusplus
    typedef vector_char_p_t Super;
public:
#if !ERWIN_DEFAULT_NEW_DELETE
    static void *operator new(size_t s)               { return Super::operator new(s);   }
    static void operator delete(void *p, size_t s)    { Super::operator delete(p,s);     }
    static void *operator new[](size_t s)             { return Super::operator new[](s); }
    static void operator delete[](void *p, size_t s)  { Super::operator delete[](p,s);   }
#endif
public:
#ifdef __cplusplus
#if !ERWIN_DEFAULT_NEW_DELETE
#endif
#endif
#if ERWIN_CAST_INLINING
    vector_board_p_t (void):
        vector_char_p_t ()
    {}
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline vector_board_p_t const & static_zero ()
    {
        return (vector_board_p_t const &)vector_char_p_t::static_zero ();
    }
#else /*!ERWIN_CAST_INLINING*/
    static vector_board_p_t const & static_zero ();
#endif /*ERWIN_CAST_INLINING*/
#if VECTOR_BOARD_P_HAVE_INT_CONSTRUCTOR
#if ERWIN_CAST_INLINING
    ERWIN_EXPLICIT vector_board_p_t (vector_board_p_cnt_t a0):
        vector_char_p_t ((vector_char_p_cnt_t)a0)
    {}
#else /*!ERWIN_CAST_INLINING*/
    ERWIN_EXPLICIT vector_board_p_t (vector_board_p_cnt_t a0);
#endif /*ERWIN_CAST_INLINING*/
#endif
#if VECTOR_BOARD_P_DYN_ZERO
#if ERWIN_CAST_INLINING
    ERWIN_EXPLICIT vector_board_p_t (Board *  a0):
        vector_char_p_t ((char * )a0)
    {}
#else /*!ERWIN_CAST_INLINING*/
    ERWIN_EXPLICIT vector_board_p_t (Board *  a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t (Board *  a0, vector_board_p_cnt_t a1):
        vector_char_p_t ((char * )a0, (vector_char_p_cnt_t)a1)
    {}
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t (Board *  a0, vector_board_p_cnt_t a1);
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    vector_board_p_t (vector_board_p_t const * a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true)):
        vector_char_p_t ((vector_char_p_t const *)(void*)a0, a1)
    {}
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t (vector_board_p_t const * a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t (vector_board_p_t const * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2, bool a3 VECTOR_BOARD_P_DEFAULT_ARG(true)):
        vector_char_p_t ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_cnt_t)a2, a3)
    {}
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t (vector_board_p_t const * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2, bool a3 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t (Board * const * a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true)):
        vector_char_p_t ((char * const *)(void*)a0, a1)
    {}
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t (Board * const * a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t (Board * const * a0, vector_board_p_cnt_t a1, bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true)):
        vector_char_p_t ((char * const *)(void*)a0, (vector_char_p_cnt_t)a1, a2)
    {}
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t (Board * const * a0, vector_board_p_cnt_t a1, bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t (bool a0, Board * * a1, vector_board_p_cnt_t a2, vector_board_p_cnt_t a3):
        vector_char_p_t (a0, (char * *)(void*)a1, (vector_char_p_cnt_t)a2, (vector_char_p_cnt_t)a3)
    {}
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t (bool a0, Board * * a1, vector_board_p_cnt_t a2, vector_board_p_cnt_t a3);
#endif /*ERWIN_CAST_INLINING*/
#if VECTOR_BOARD_P_DYN_ZERO
#if ERWIN_CAST_INLINING
    vector_board_p_t (bool a0, Board * * a1, vector_board_p_cnt_t a2, vector_board_p_cnt_t a3, Board *  a4):
        vector_char_p_t (a0, (char * *)(void*)a1, (vector_char_p_cnt_t)a2, (vector_char_p_cnt_t)a3, (char * )a4)
    {}
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t (bool a0, Board * * a1, vector_board_p_cnt_t a2, vector_board_p_cnt_t a3, Board *  a4);
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    vector_board_p_t (bool a0, vector_board_p_t * a1):
        vector_char_p_t (a0, (vector_char_p_t *)(void*)a1)
    {}
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t (bool a0, vector_board_p_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t (bool a0, vector_board_p_t & a1):
        vector_char_p_t (a0, (vector_char_p_t &)a1)
    {}
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t (bool a0, vector_board_p_t & a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    void _constructor (void)
    {
        vector_char_p_t::_constructor ();
    }
#else /*!ERWIN_CAST_INLINING*/
    void _constructor (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    void _destructor (void)
    {
        vector_char_p_t::_destructor ();
    }
#else /*!ERWIN_CAST_INLINING*/
    void _destructor (void);
#endif /*ERWIN_CAST_INLINING*/
protected:
#ifndef NDEBUG
#if ERWIN_CAST_INLINING
    void cn () const
    {
        vector_char_p_t::cn ();
    }
#else /*!ERWIN_CAST_INLINING*/
    void cn () const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    void cn (void const * a0) const
    {
        vector_char_p_t::cn (a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    void cn (void const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#else
#if ERWIN_CAST_INLINING
    static inline void cn ()
    {
        vector_char_p_t::cn ();
    }
#else /*!ERWIN_CAST_INLINING*/
    static void cn ();
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void cn (void const * a0)
    {
        vector_char_p_t::cn (a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void cn (void const * a0);
#endif /*ERWIN_CAST_INLINING*/
#endif
public:
#if !ERWIN_GLOBAL_ERRNO
#if ERWIN_CAST_INLINING
    int get_errno (void) const
    {
        return vector_char_p_t::get_errno ();
    }
#else /*!ERWIN_CAST_INLINING*/
    int get_errno (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    void clear_errno (void) const
    {
        vector_char_p_t::clear_errno ();
    }
#else /*!ERWIN_CAST_INLINING*/
    void clear_errno (void) const;
#endif /*ERWIN_CAST_INLINING*/
#else
#if ERWIN_CAST_INLINING
    static inline int get_errno (void)
    {
        return vector_char_p_t::get_errno ();
    }
#else /*!ERWIN_CAST_INLINING*/
    static int get_errno (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void clear_errno (void)
    {
        vector_char_p_t::clear_errno ();
    }
#else /*!ERWIN_CAST_INLINING*/
    static void clear_errno (void);
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    vector_board_p_t (vector_board_p_t const & a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true)):
        vector_char_p_t ((vector_char_p_t const &)a0, a1)
    {}
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t (vector_board_p_t const & a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t (vector_board_p_t const & a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2, bool a3 VECTOR_BOARD_P_DEFAULT_ARG(true)):
        vector_char_p_t ((vector_char_p_t const &)a0, (vector_char_p_index_t)a1, (vector_char_p_cnt_t)a2, a3)
    {}
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t (vector_board_p_t const & a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2, bool a3 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t * copy (void) const
    {
        return (vector_board_p_t *)(void*)vector_char_p_t::copy ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t * copy (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t * copy_err (int * a0) const
    {
        return (vector_board_p_t *)(void*)vector_char_p_t::copy_err (a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t * copy_err (int * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t * copy_detach ()
    {
        return (vector_board_p_t *)(void*)vector_char_p_t::copy_detach ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t * copy_detach ();
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & xchg (vector_board_p_t * a0)
    {
        return (vector_board_p_t &)vector_char_p_t::xchg ((vector_char_p_t *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & xchg (vector_board_p_t * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & xchg (vector_board_p_t & a0)
    {
        return (vector_board_p_t &)vector_char_p_t::xchg ((vector_char_p_t &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & xchg (vector_board_p_t & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t * subvector (vector_board_p_index_t a0, vector_board_p_cnt_t a1) const
    {
        return (vector_board_p_t *)(void*)vector_char_p_t::subvector ((vector_char_p_index_t)a0, (vector_char_p_cnt_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t * subvector (vector_board_p_index_t a0, vector_board_p_cnt_t a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t * subvector (vector_board_p_index_t a0, vector_board_p_cnt_t a1, bool a2) const
    {
        return (vector_board_p_t *)(void*)vector_char_p_t::subvector ((vector_char_p_index_t)a0, (vector_char_p_cnt_t)a1, a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t * subvector (vector_board_p_index_t a0, vector_board_p_cnt_t a1, bool a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & operator= (vector_board_p_t const & a0)
    {
        return (vector_board_p_t &)vector_char_p_t::operator= ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & operator= (vector_board_p_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & operator= (vector_board_p_t const * a0)
    {
        return (vector_board_p_t &)vector_char_p_t::operator= ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & operator= (vector_board_p_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & detach (void)
    {
        return (vector_board_p_t &)vector_char_p_t::detach ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & detach (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & detach_as_is (void)
    {
        return (vector_board_p_t &)vector_char_p_t::detach_as_is ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & detach_as_is (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    operator vector_board_p_t const * () const
    {
        return (vector_board_p_t const *)(void*)vector_char_p_t::operator vector_char_p_t const * ();
    }
#else /*!ERWIN_CAST_INLINING*/
    operator vector_board_p_t const * () const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    operator vector_board_p_t * ()
    {
        return (vector_board_p_t *)(void*)vector_char_p_t::operator vector_char_p_t * ();
    }
#else /*!ERWIN_CAST_INLINING*/
    operator vector_board_p_t * ();
#endif /*ERWIN_CAST_INLINING*/
#if VECTOR_BOARD_P_MANY_CASTS != 0
#if ERWIN_CAST_INLINING
    operator vector_board_p_element_ptr_t () const
    {
        return (vector_board_p_element_ptr_t)vector_char_p_t::operator vector_char_p_element_ptr_t ();
    }
#else /*!ERWIN_CAST_INLINING*/
    operator vector_board_p_element_ptr_t () const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    operator bool () const
    {
        return vector_char_p_t::operator bool ();
    }
#else /*!ERWIN_CAST_INLINING*/
    operator bool () const;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if VECTOR_BOARD_P_POSITION_POINTER
#if ERWIN_CAST_INLINING
    vector_board_p_index_t * pos_ptr ()
    {
        return (vector_board_p_index_t *)(void*)vector_char_p_t::pos_ptr ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t * pos_ptr ();
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t & pos_ref ()
    {
        return (vector_board_p_index_t &)vector_char_p_t::pos_ref ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t & pos_ref ();
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t pos ()
    {
        return (vector_board_p_index_t)vector_char_p_t::pos ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t pos ();
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    void set_pos (vector_board_p_index_t a0)
    {
        vector_char_p_t::set_pos ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    void set_pos (vector_board_p_index_t a0);
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    Board *  nth (vector_board_p_index_t a0) const
    {
        return (Board * )vector_char_p_t::nth ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    Board *  nth (vector_board_p_index_t a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board *  nth_char (vector_board_p_index_t a0) const
    {
        return (Board * )vector_char_p_t::nth_char ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    Board *  nth_char (vector_board_p_index_t a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ptr_t nth_ptr_check (vector_board_p_index_t a0)
    {
        return (vector_board_p_element_ptr_t)vector_char_p_t::nth_ptr_check ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ptr_t nth_ptr_check (vector_board_p_index_t a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board * const * nth_ptr_check (vector_board_p_index_t a0) const
    {
        return (Board * const *)(void*)vector_char_p_t::nth_ptr_check ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    Board * const * nth_ptr_check (vector_board_p_index_t a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ptr_t nth_ptr_char (vector_board_p_index_t a0)
    {
        return (vector_board_p_element_ptr_t)vector_char_p_t::nth_ptr_char ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ptr_t nth_ptr_char (vector_board_p_index_t a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board * const * nth_ptr_char (vector_board_p_index_t a0) const
    {
        return (Board * const *)(void*)vector_char_p_t::nth_ptr_char ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    Board * const * nth_ptr_char (vector_board_p_index_t a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ptr_t nth_ptr (vector_board_p_index_t a0)
    {
        return (vector_board_p_element_ptr_t)vector_char_p_t::nth_ptr ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ptr_t nth_ptr (vector_board_p_index_t a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board * const * nth_ptr (vector_board_p_index_t a0) const
    {
        return (Board * const *)(void*)vector_char_p_t::nth_ptr ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    Board * const * nth_ptr (vector_board_p_index_t a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ref_t nth_ref (vector_board_p_index_t a0)
    {
        return (vector_board_p_element_ref_t)vector_char_p_t::nth_ref ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ref_t nth_ref (vector_board_p_index_t a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board * const & nth_ref (vector_board_p_index_t a0) const
    {
        return (Board * const &)vector_char_p_t::nth_ref ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    Board * const & nth_ref (vector_board_p_index_t a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ref_t nth_ref_check (vector_board_p_index_t a0)
    {
        return (vector_board_p_element_ref_t)vector_char_p_t::nth_ref_check ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ref_t nth_ref_check (vector_board_p_index_t a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board * const & nth_ref_check (vector_board_p_index_t a0) const
    {
        return (Board * const &)vector_char_p_t::nth_ref_check ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    Board * const & nth_ref_check (vector_board_p_index_t a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ref_t nth_ref_char (vector_board_p_index_t a0)
    {
        return (vector_board_p_element_ref_t)vector_char_p_t::nth_ref_char ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ref_t nth_ref_char (vector_board_p_index_t a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board * const & nth_ref_char (vector_board_p_index_t a0) const
    {
        return (Board * const &)vector_char_p_t::nth_ref_char ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    Board * const & nth_ref_char (vector_board_p_index_t a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ref_t operator[] (vector_board_p_index_t a0)
    {
        return (vector_board_p_element_ref_t)vector_char_p_t::operator[] ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ref_t operator[] (vector_board_p_index_t a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board *  operator[] (vector_board_p_index_t a0) const
    {
        return (Board * )vector_char_p_t::operator[] ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    Board *  operator[] (vector_board_p_index_t a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board *  first (void) const
    {
        return (Board * )vector_char_p_t::first ();
    }
#else /*!ERWIN_CAST_INLINING*/
    Board *  first (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ptr_t first_ptr ()
    {
        return (vector_board_p_element_ptr_t)vector_char_p_t::first_ptr ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ptr_t first_ptr ();
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ref_t first_ref ()
    {
        return (vector_board_p_element_ref_t)vector_char_p_t::first_ref ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ref_t first_ref ();
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board *  last (void) const
    {
        return (Board * )vector_char_p_t::last ();
    }
#else /*!ERWIN_CAST_INLINING*/
    Board *  last (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ptr_t last_ptr ()
    {
        return (vector_board_p_element_ptr_t)vector_char_p_t::last_ptr ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ptr_t last_ptr ();
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ref_t last_ref ()
    {
        return (vector_board_p_element_ref_t)vector_char_p_t::last_ref ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ref_t last_ref ();
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board * modify (vector_board_p_index_t a0, Board *  a1)
    {
        return (Board *)vector_char_p_t::modify ((vector_char_p_index_t)a0, (char * )a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    Board * modify (vector_board_p_index_t a0, Board *  a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & reverse (void)
    {
        return (vector_board_p_t &)vector_char_p_t::reverse ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & reverse (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board * last_chop1 (void)
    {
        return (Board *)vector_char_p_t::last_chop1 ();
    }
#else /*!ERWIN_CAST_INLINING*/
    Board * last_chop1 (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board * first_swap_chop1 (void)
    {
        return (Board *)vector_char_p_t::first_swap_chop1 ();
    }
#else /*!ERWIN_CAST_INLINING*/
    Board * first_swap_chop1 (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & set (vector_board_p_index_t a0, Board *  a1)
    {
        return (vector_board_p_t &)vector_char_p_t::set ((vector_char_p_index_t)a0, (char * )a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & set (vector_board_p_index_t a0, Board *  a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & swap_erase (vector_board_p_index_t a0, vector_board_p_cnt_t a1 = -1)
    {
        return (vector_board_p_t &)vector_char_p_t::swap_erase ((vector_char_p_index_t)a0, (vector_char_p_cnt_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & swap_erase (vector_board_p_index_t a0, vector_board_p_cnt_t a1 = -1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & swap_erase (vector_board_p_index_t a0, vector_board_p_cnt_t a1, bool a2, bool a3)
    {
        return (vector_board_p_t &)vector_char_p_t::swap_erase ((vector_char_p_index_t)a0, (vector_char_p_cnt_t)a1, a2, a3);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & swap_erase (vector_board_p_index_t a0, vector_board_p_cnt_t a1, bool a2, bool a3);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & erase (vector_board_p_index_t a0, vector_board_p_cnt_t a1 = -1)
    {
        return (vector_board_p_t &)vector_char_p_t::erase ((vector_char_p_index_t)a0, (vector_char_p_cnt_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & erase (vector_board_p_index_t a0, vector_board_p_cnt_t a1 = -1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_cnt_t erase_zero ()
    {
        return (vector_board_p_cnt_t)vector_char_p_t::erase_zero ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_cnt_t erase_zero ();
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & erase (vector_board_p_index_t a0, vector_board_p_cnt_t a1, bool a2, bool a3)
    {
        return (vector_board_p_t &)vector_char_p_t::erase ((vector_char_p_index_t)a0, (vector_char_p_cnt_t)a1, a2, a3);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & erase (vector_board_p_index_t a0, vector_board_p_cnt_t a1, bool a2, bool a3);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_cnt_t erase_if (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true), bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true), bool a3 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_cnt_t)vector_char_p_t::erase_if ((vector_char_p_feature_t)a0, a1, a2, a3);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_cnt_t erase_if (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true), bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true), bool a3 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_cnt_t erase_if_not (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true), bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true), bool a3 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_cnt_t)vector_char_p_t::erase_if_not ((vector_char_p_feature_t)a0, a1, a2, a3);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_cnt_t erase_if_not (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true), bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true), bool a3 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_cnt_t erase_equals (vector_board_p_cmp_t a0 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL), vector_board_p_combine_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_COMBINE_T_NULL))
    {
        return (vector_board_p_cnt_t)vector_char_p_t::erase_equals ((vector_char_p_cmp_t)a0, (vector_char_p_combine_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_cnt_t erase_equals (vector_board_p_cmp_t a0 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL), vector_board_p_combine_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_COMBINE_T_NULL));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & swap_chop (vector_board_p_cnt_t a0 VECTOR_BOARD_P_DEFAULT_ARG(1))
    {
        return (vector_board_p_t &)vector_char_p_t::swap_chop ((vector_char_p_cnt_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & swap_chop (vector_board_p_cnt_t a0 VECTOR_BOARD_P_DEFAULT_ARG(1));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & swap_chop (bool a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_t &)vector_char_p_t::swap_chop (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & swap_chop (bool a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & swap_chop (vector_board_p_cnt_t a0, bool a1, bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_t &)vector_char_p_t::swap_chop ((vector_char_p_cnt_t)a0, a1, a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & swap_chop (vector_board_p_cnt_t a0, bool a1, bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & chop (vector_board_p_cnt_t a0 VECTOR_BOARD_P_DEFAULT_ARG(1))
    {
        return (vector_board_p_t &)vector_char_p_t::chop ((vector_char_p_cnt_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & chop (vector_board_p_cnt_t a0 VECTOR_BOARD_P_DEFAULT_ARG(1));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & chop (bool a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_t &)vector_char_p_t::chop (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & chop (bool a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & chop (vector_board_p_cnt_t a0, bool a1, bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_t &)vector_char_p_t::chop ((vector_char_p_cnt_t)a0, a1, a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & chop (vector_board_p_cnt_t a0, bool a1, bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & prepend (Board *  a0)
    {
        return (vector_board_p_t &)vector_char_p_t::prepend ((char * )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & prepend (Board *  a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & prepend_raw (Board * const * a0, vector_board_p_cnt_t a1)
    {
        return (vector_board_p_t &)vector_char_p_t::prepend_raw ((char * const *)(void*)a0, (vector_char_p_cnt_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & prepend_raw (Board * const * a0, vector_board_p_cnt_t a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & prepend_no_copy (Board * const * a0, vector_board_p_cnt_t a1)
    {
        return (vector_board_p_t &)vector_char_p_t::prepend_no_copy ((char * const *)(void*)a0, (vector_char_p_cnt_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & prepend_no_copy (Board * const * a0, vector_board_p_cnt_t a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & prepend_vector (vector_board_p_t const * a0)
    {
        return (vector_board_p_t &)vector_char_p_t::prepend_vector ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & prepend_vector (vector_board_p_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & prepend_vector (vector_board_p_t const & a0)
    {
        return (vector_board_p_t &)vector_char_p_t::prepend_vector ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & prepend_vector (vector_board_p_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & prepend_string (Board * const * a0)
    {
        return (vector_board_p_t &)vector_char_p_t::prepend_string ((char * const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & prepend_string (Board * const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & append (Board *  a0)
    {
        return (vector_board_p_t &)vector_char_p_t::append ((char * )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & append (Board *  a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & append_raw (Board * const * a0, vector_board_p_cnt_t a1)
    {
        return (vector_board_p_t &)vector_char_p_t::append_raw ((char * const *)(void*)a0, (vector_char_p_cnt_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & append_raw (Board * const * a0, vector_board_p_cnt_t a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & append_no_copy (Board * const * a0, vector_board_p_cnt_t a1)
    {
        return (vector_board_p_t &)vector_char_p_t::append_no_copy ((char * const *)(void*)a0, (vector_char_p_cnt_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & append_no_copy (Board * const * a0, vector_board_p_cnt_t a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & append_vector (vector_board_p_t const * a0)
    {
        return (vector_board_p_t &)vector_char_p_t::append_vector ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & append_vector (vector_board_p_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & append_vector (vector_board_p_t const & a0)
    {
        return (vector_board_p_t &)vector_char_p_t::append_vector ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & append_vector (vector_board_p_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & append_string (Board * const * a0)
    {
        return (vector_board_p_t &)vector_char_p_t::append_string ((char * const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & append_string (Board * const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & append_subvector (vector_board_p_t const & a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2 VECTOR_BOARD_P_DEFAULT_ARG(-1), ERWIN_BOOL a3 VECTOR_BOARD_P_DEFAULT_ARG(ERWIN_TRUE))
    {
        return (vector_board_p_t &)vector_char_p_t::append_subvector ((vector_char_p_t const &)a0, (vector_char_p_index_t)a1, (vector_char_p_cnt_t)a2, a3);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & append_subvector (vector_board_p_t const & a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2 VECTOR_BOARD_P_DEFAULT_ARG(-1), ERWIN_BOOL a3 VECTOR_BOARD_P_DEFAULT_ARG(ERWIN_TRUE));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & append_subvector (vector_board_p_t const * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2 VECTOR_BOARD_P_DEFAULT_ARG(-1), ERWIN_BOOL a3 VECTOR_BOARD_P_DEFAULT_ARG(ERWIN_TRUE))
    {
        return (vector_board_p_t &)vector_char_p_t::append_subvector ((vector_char_p_t const *)(void*)a0, (vector_char_p_index_t)a1, (vector_char_p_cnt_t)a2, a3);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & append_subvector (vector_board_p_t const * a0, vector_board_p_index_t a1, vector_board_p_cnt_t a2 VECTOR_BOARD_P_DEFAULT_ARG(-1), ERWIN_BOOL a3 VECTOR_BOARD_P_DEFAULT_ARG(ERWIN_TRUE));
#endif /*ERWIN_CAST_INLINING*/
#if VECTOR_BOARD_P_DIRECT_RECURSION == 0
#if ERWIN_CAST_INLINING
    vector_board_p_t & prepend (vector_board_p_t const * a0)
    {
        return (vector_board_p_t &)vector_char_p_t::prepend ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & prepend (vector_board_p_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & prepend (vector_board_p_t const & a0)
    {
        return (vector_board_p_t &)vector_char_p_t::prepend ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & prepend (vector_board_p_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & prepend (Board * const * a0)
    {
        return (vector_board_p_t &)vector_char_p_t::prepend ((char * const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & prepend (Board * const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & append (vector_board_p_t const * a0)
    {
        return (vector_board_p_t &)vector_char_p_t::append ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & append (vector_board_p_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & append (vector_board_p_t const & a0)
    {
        return (vector_board_p_t &)vector_char_p_t::append ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & append (vector_board_p_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & append (Board * const * a0)
    {
        return (vector_board_p_t &)vector_char_p_t::append ((char * const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & append (Board * const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & operator<< (Board * const * a0)
    {
        return (vector_board_p_t &)vector_char_p_t::operator<< ((char * const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & operator<< (Board * const * a0);
#endif /*ERWIN_CAST_INLINING*/
#endif /* VECTOR_BOARD_P_DIRECT_RECURSION == 0*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & operator<< (Board *  a0)
    {
        return (vector_board_p_t &)vector_char_p_t::operator<< ((char * )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & operator<< (Board *  a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & operator<< (vector_board_p_t const * a0)
    {
        return (vector_board_p_t &)vector_char_p_t::operator<< ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & operator<< (vector_board_p_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & operator<< (vector_board_p_t const & a0)
    {
        return (vector_board_p_t &)vector_char_p_t::operator<< ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & operator<< (vector_board_p_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find (Board *  a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find ((char * )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find (Board *  a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find_raw (Board * const * a0, vector_board_p_cnt_t a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find_raw ((char * const *)(void*)a0, (vector_char_p_cnt_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find_raw (Board * const * a0, vector_board_p_cnt_t a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find_string (Board * const * a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find_string ((char * const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find_string (Board * const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find_vector (vector_board_p_t const & a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find_vector ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find_vector (vector_board_p_t const & a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find_vector (vector_board_p_t const * a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find_vector ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find_vector (vector_board_p_t const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if VECTOR_BOARD_P_DIRECT_RECURSION == 0
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find (Board * const * a0, vector_board_p_cnt_t a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find ((char * const *)(void*)a0, (vector_char_p_cnt_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find (Board * const * a0, vector_board_p_cnt_t a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find (Board * const * a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find ((char * const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find (Board * const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find (vector_board_p_t const & a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find (vector_board_p_t const & a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find (vector_board_p_t const * a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find (vector_board_p_t const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find (vector_board_p_index_t a0, Board *  a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find ((vector_char_p_index_t)a0, (char * )a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find (vector_board_p_index_t a0, Board *  a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find_raw (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find_raw ((vector_char_p_index_t)a0, (char * const *)(void*)a1, (vector_char_p_cnt_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find_raw (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find_string (vector_board_p_index_t a0, Board * const * a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find_string ((vector_char_p_index_t)a0, (char * const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find_string (vector_board_p_index_t a0, Board * const * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find_vector (vector_board_p_index_t a0, vector_board_p_t const & a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find_vector ((vector_char_p_index_t)a0, (vector_char_p_t const &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find_vector (vector_board_p_index_t a0, vector_board_p_t const & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find_vector (vector_board_p_index_t a0, vector_board_p_t const * a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find_vector ((vector_char_p_index_t)a0, (vector_char_p_t const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find_vector (vector_board_p_index_t a0, vector_board_p_t const * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if VECTOR_BOARD_P_DIRECT_RECURSION == 0
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find ((vector_char_p_index_t)a0, (char * const *)(void*)a1, (vector_char_p_cnt_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find (vector_board_p_index_t a0, Board * const * a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find ((vector_char_p_index_t)a0, (char * const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find (vector_board_p_index_t a0, Board * const * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find (vector_board_p_index_t a0, vector_board_p_t const & a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find ((vector_char_p_index_t)a0, (vector_char_p_t const &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find (vector_board_p_index_t a0, vector_board_p_t const & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find (vector_board_p_index_t a0, vector_board_p_t const * a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::find ((vector_char_p_index_t)a0, (vector_char_p_t const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find (vector_board_p_index_t a0, vector_board_p_t const * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind (Board *  a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind ((char * )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind (Board *  a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind_raw (Board * const * a0, vector_board_p_cnt_t a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind_raw ((char * const *)(void*)a0, (vector_char_p_cnt_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind_raw (Board * const * a0, vector_board_p_cnt_t a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind_string (Board * const * a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind_string ((char * const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind_string (Board * const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind_vector (vector_board_p_t const & a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind_vector ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind_vector (vector_board_p_t const & a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind_vector (vector_board_p_t const * a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind_vector ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind_vector (vector_board_p_t const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if VECTOR_BOARD_P_DIRECT_RECURSION == 0
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind (Board * const * a0, vector_board_p_cnt_t a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind ((char * const *)(void*)a0, (vector_char_p_cnt_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind (Board * const * a0, vector_board_p_cnt_t a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind (Board * const * a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind ((char * const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind (Board * const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind (vector_board_p_t const & a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind (vector_board_p_t const & a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind (vector_board_p_t const * a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind (vector_board_p_t const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind (vector_board_p_index_t a0, Board *  a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind ((vector_char_p_index_t)a0, (char * )a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind (vector_board_p_index_t a0, Board *  a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind_raw (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind_raw ((vector_char_p_index_t)a0, (char * const *)(void*)a1, (vector_char_p_cnt_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind_raw (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind_string (vector_board_p_index_t a0, Board * const * a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind_string ((vector_char_p_index_t)a0, (char * const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind_string (vector_board_p_index_t a0, Board * const * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind_vector (vector_board_p_index_t a0, vector_board_p_t const & a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind_vector ((vector_char_p_index_t)a0, (vector_char_p_t const &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind_vector (vector_board_p_index_t a0, vector_board_p_t const & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind_vector (vector_board_p_index_t a0, vector_board_p_t const * a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind_vector ((vector_char_p_index_t)a0, (vector_char_p_t const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind_vector (vector_board_p_index_t a0, vector_board_p_t const * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if VECTOR_BOARD_P_DIRECT_RECURSION == 0
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind ((vector_char_p_index_t)a0, (char * const *)(void*)a1, (vector_char_p_cnt_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind (vector_board_p_index_t a0, Board * const * a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind ((vector_char_p_index_t)a0, (char * const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind (vector_board_p_index_t a0, Board * const * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind (vector_board_p_index_t a0, vector_board_p_t const & a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind ((vector_char_p_index_t)a0, (vector_char_p_t const &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind (vector_board_p_index_t a0, vector_board_p_t const & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind (vector_board_p_index_t a0, vector_board_p_t const * a1) const
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind ((vector_char_p_index_t)a0, (vector_char_p_t const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind (vector_board_p_index_t a0, vector_board_p_t const * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    bool is_equal_at_raw (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2) const
    {
        return vector_char_p_t::is_equal_at_raw ((vector_char_p_index_t)a0, (char * const *)(void*)a1, (vector_char_p_cnt_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool is_equal_at_raw (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool is_equal_at_string (vector_board_p_index_t a0, Board * const * a1) const
    {
        return vector_char_p_t::is_equal_at_string ((vector_char_p_index_t)a0, (char * const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool is_equal_at_string (vector_board_p_index_t a0, Board * const * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool is_equal_at_vector (vector_board_p_index_t a0, vector_board_p_t const & a1) const
    {
        return vector_char_p_t::is_equal_at_vector ((vector_char_p_index_t)a0, (vector_char_p_t const &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool is_equal_at_vector (vector_board_p_index_t a0, vector_board_p_t const & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool is_equal_at_vector (vector_board_p_index_t a0, vector_board_p_t const * a1) const
    {
        return vector_char_p_t::is_equal_at_vector ((vector_char_p_index_t)a0, (vector_char_p_t const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool is_equal_at_vector (vector_board_p_index_t a0, vector_board_p_t const * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if VECTOR_BOARD_P_DIRECT_RECURSION == 0
#if ERWIN_CAST_INLINING
    bool is_equal_at (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2) const
    {
        return vector_char_p_t::is_equal_at ((vector_char_p_index_t)a0, (char * const *)(void*)a1, (vector_char_p_cnt_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool is_equal_at (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool is_equal_at (vector_board_p_index_t a0, Board * const * a1) const
    {
        return vector_char_p_t::is_equal_at ((vector_char_p_index_t)a0, (char * const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool is_equal_at (vector_board_p_index_t a0, Board * const * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool is_equal_at (vector_board_p_index_t a0, vector_board_p_t const & a1) const
    {
        return vector_char_p_t::is_equal_at ((vector_char_p_index_t)a0, (vector_char_p_t const &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool is_equal_at (vector_board_p_index_t a0, vector_board_p_t const & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool is_equal_at (vector_board_p_index_t a0, vector_board_p_t const * a1) const
    {
        return vector_char_p_t::is_equal_at ((vector_char_p_index_t)a0, (vector_char_p_t const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool is_equal_at (vector_board_p_index_t a0, vector_board_p_t const * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find_if (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_index_t)vector_char_p_t::find_if ((vector_char_p_feature_t)a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find_if (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find_if (vector_board_p_index_t a0, vector_board_p_feature_t a1, bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_index_t)vector_char_p_t::find_if ((vector_char_p_index_t)a0, (vector_char_p_feature_t)a1, a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find_if (vector_board_p_index_t a0, vector_board_p_feature_t a1, bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind_if (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind_if ((vector_char_p_feature_t)a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind_if (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind_if (vector_board_p_index_t a0, vector_board_p_feature_t a1, bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind_if ((vector_char_p_index_t)a0, (vector_char_p_feature_t)a1, a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind_if (vector_board_p_index_t a0, vector_board_p_feature_t a1, bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find_if_not (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_index_t)vector_char_p_t::find_if_not ((vector_char_p_feature_t)a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find_if_not (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t find_if_not (vector_board_p_index_t a0, vector_board_p_feature_t a1, bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_index_t)vector_char_p_t::find_if_not ((vector_char_p_index_t)a0, (vector_char_p_feature_t)a1, a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t find_if_not (vector_board_p_index_t a0, vector_board_p_feature_t a1, bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind_if_not (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind_if_not ((vector_char_p_feature_t)a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind_if_not (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t rfind_if_not (vector_board_p_index_t a0, vector_board_p_feature_t a1, bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_index_t)vector_char_p_t::rfind_if_not ((vector_char_p_index_t)a0, (vector_char_p_feature_t)a1, a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t rfind_if_not (vector_board_p_index_t a0, vector_board_p_feature_t a1, bool a2 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & ltrim_if (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_t &)vector_char_p_t::ltrim_if ((vector_char_p_feature_t)a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & ltrim_if (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & ltrim_if_not (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_t &)vector_char_p_t::ltrim_if_not ((vector_char_p_feature_t)a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & ltrim_if_not (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & rtrim_if (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_t &)vector_char_p_t::rtrim_if ((vector_char_p_feature_t)a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & rtrim_if (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & rtrim_if_not (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_t &)vector_char_p_t::rtrim_if_not ((vector_char_p_feature_t)a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & rtrim_if_not (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & trim_if (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_t &)vector_char_p_t::trim_if ((vector_char_p_feature_t)a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & trim_if (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & trim_if_not (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true))
    {
        return (vector_board_p_t &)vector_char_p_t::trim_if_not ((vector_char_p_feature_t)a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & trim_if_not (vector_board_p_feature_t a0, bool a1 VECTOR_BOARD_P_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & map (vector_board_p_map_t a0)
    {
        return (vector_board_p_t &)vector_char_p_t::map ((vector_char_p_map_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & map (vector_board_p_map_t a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & make_gap (vector_board_p_index_t a0, vector_board_p_cnt_t a1)
    {
        return (vector_board_p_t &)vector_char_p_t::make_gap ((vector_char_p_index_t)a0, (vector_char_p_cnt_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & make_gap (vector_board_p_index_t a0, vector_board_p_cnt_t a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & make_gap (vector_board_p_index_t a0, Board *  a1, vector_board_p_cnt_t a2)
    {
        return (vector_board_p_t &)vector_char_p_t::make_gap ((vector_char_p_index_t)a0, (char * )a1, (vector_char_p_cnt_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & make_gap (vector_board_p_index_t a0, Board *  a1, vector_board_p_cnt_t a2);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & make_gap_with (vector_board_p_index_t a0, Board *  a1, vector_board_p_cnt_t a2)
    {
        return (vector_board_p_t &)vector_char_p_t::make_gap_with ((vector_char_p_index_t)a0, (char * )a1, (vector_char_p_cnt_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & make_gap_with (vector_board_p_index_t a0, Board *  a1, vector_board_p_cnt_t a2);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board *  zero (void) const
    {
        return (Board * )vector_char_p_t::zero ();
    }
#else /*!ERWIN_CAST_INLINING*/
    Board *  zero (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & overwrite (vector_board_p_index_t a0, vector_board_p_t const * a1, vector_board_p_index_t a2, vector_board_p_cnt_t a3)
    {
        return (vector_board_p_t &)vector_char_p_t::overwrite ((vector_char_p_index_t)a0, (vector_char_p_t const *)(void*)a1, (vector_char_p_index_t)a2, (vector_char_p_cnt_t)a3);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & overwrite (vector_board_p_index_t a0, vector_board_p_t const * a1, vector_board_p_index_t a2, vector_board_p_cnt_t a3);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & overwrite (vector_board_p_index_t a0, vector_board_p_t const & a1, vector_board_p_index_t a2, vector_board_p_cnt_t a3)
    {
        return (vector_board_p_t &)vector_char_p_t::overwrite ((vector_char_p_index_t)a0, (vector_char_p_t const &)a1, (vector_char_p_index_t)a2, (vector_char_p_cnt_t)a3);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & overwrite (vector_board_p_index_t a0, vector_board_p_t const & a1, vector_board_p_index_t a2, vector_board_p_cnt_t a3);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & overwrite_raw (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2)
    {
        return (vector_board_p_t &)vector_char_p_t::overwrite_raw ((vector_char_p_index_t)a0, (char * const *)(void*)a1, (vector_char_p_cnt_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & overwrite_raw (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & overwrite_string (vector_board_p_index_t a0, Board * const * a1)
    {
        return (vector_board_p_t &)vector_char_p_t::overwrite_string ((vector_char_p_index_t)a0, (char * const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & overwrite_string (vector_board_p_index_t a0, Board * const * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & overwrite_vector (vector_board_p_index_t a0, vector_board_p_t const * a1)
    {
        return (vector_board_p_t &)vector_char_p_t::overwrite_vector ((vector_char_p_index_t)a0, (vector_char_p_t const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & overwrite_vector (vector_board_p_index_t a0, vector_board_p_t const * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & overwrite_vector (vector_board_p_index_t a0, vector_board_p_t const & a1)
    {
        return (vector_board_p_t &)vector_char_p_t::overwrite_vector ((vector_char_p_index_t)a0, (vector_char_p_t const &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & overwrite_vector (vector_board_p_index_t a0, vector_board_p_t const & a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & overwrite_flags (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2, bool a3, bool a4)
    {
        return (vector_board_p_t &)vector_char_p_t::overwrite_flags ((vector_char_p_index_t)a0, (char * const *)(void*)a1, (vector_char_p_cnt_t)a2, a3, a4);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & overwrite_flags (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2, bool a3, bool a4);
#endif /*ERWIN_CAST_INLINING*/
#if VECTOR_BOARD_P_DIRECT_RECURSION == 0
#if ERWIN_CAST_INLINING
    vector_board_p_t & overwrite (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2)
    {
        return (vector_board_p_t &)vector_char_p_t::overwrite ((vector_char_p_index_t)a0, (char * const *)(void*)a1, (vector_char_p_cnt_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & overwrite (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & overwrite (vector_board_p_index_t a0, Board * const * a1)
    {
        return (vector_board_p_t &)vector_char_p_t::overwrite ((vector_char_p_index_t)a0, (char * const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & overwrite (vector_board_p_index_t a0, Board * const * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & overwrite (vector_board_p_index_t a0, vector_board_p_t const * a1)
    {
        return (vector_board_p_t &)vector_char_p_t::overwrite ((vector_char_p_index_t)a0, (vector_char_p_t const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & overwrite (vector_board_p_index_t a0, vector_board_p_t const * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & overwrite (vector_board_p_index_t a0, vector_board_p_t const & a1)
    {
        return (vector_board_p_t &)vector_char_p_t::overwrite ((vector_char_p_index_t)a0, (vector_char_p_t const &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & overwrite (vector_board_p_index_t a0, vector_board_p_t const & a1);
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    vector_board_p_t & insert (vector_board_p_index_t a0, Board *  a1)
    {
        return (vector_board_p_t &)vector_char_p_t::insert ((vector_char_p_index_t)a0, (char * )a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & insert (vector_board_p_index_t a0, Board *  a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & insert_raw (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2)
    {
        return (vector_board_p_t &)vector_char_p_t::insert_raw ((vector_char_p_index_t)a0, (char * const *)(void*)a1, (vector_char_p_cnt_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & insert_raw (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & insert_no_copy (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2)
    {
        return (vector_board_p_t &)vector_char_p_t::insert_no_copy ((vector_char_p_index_t)a0, (char * const *)(void*)a1, (vector_char_p_cnt_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & insert_no_copy (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & insert_string (vector_board_p_index_t a0, Board * const * a1)
    {
        return (vector_board_p_t &)vector_char_p_t::insert_string ((vector_char_p_index_t)a0, (char * const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & insert_string (vector_board_p_index_t a0, Board * const * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & insert_vector (vector_board_p_index_t a0, vector_board_p_t const * a1)
    {
        return (vector_board_p_t &)vector_char_p_t::insert_vector ((vector_char_p_index_t)a0, (vector_char_p_t const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & insert_vector (vector_board_p_index_t a0, vector_board_p_t const * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & insert_vector (vector_board_p_index_t a0, vector_board_p_t const & a1)
    {
        return (vector_board_p_t &)vector_char_p_t::insert_vector ((vector_char_p_index_t)a0, (vector_char_p_t const &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & insert_vector (vector_board_p_index_t a0, vector_board_p_t const & a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & insert_subvector (vector_board_p_index_t a0, vector_board_p_t const * a1, vector_board_p_index_t a2 VECTOR_BOARD_P_DEFAULT_ARG(0), vector_board_p_cnt_t a3 VECTOR_BOARD_P_DEFAULT_ARG(-1), ERWIN_BOOL a4 VECTOR_BOARD_P_DEFAULT_ARG(ERWIN_TRUE))
    {
        return (vector_board_p_t &)vector_char_p_t::insert_subvector ((vector_char_p_index_t)a0, (vector_char_p_t const *)(void*)a1, (vector_char_p_index_t)a2, (vector_char_p_cnt_t)a3, a4);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & insert_subvector (vector_board_p_index_t a0, vector_board_p_t const * a1, vector_board_p_index_t a2 VECTOR_BOARD_P_DEFAULT_ARG(0), vector_board_p_cnt_t a3 VECTOR_BOARD_P_DEFAULT_ARG(-1), ERWIN_BOOL a4 VECTOR_BOARD_P_DEFAULT_ARG(ERWIN_TRUE));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & insert_subvector (vector_board_p_index_t a0, vector_board_p_t const & a1, vector_board_p_index_t a2 VECTOR_BOARD_P_DEFAULT_ARG(0), vector_board_p_cnt_t a3 VECTOR_BOARD_P_DEFAULT_ARG(-1), ERWIN_BOOL a4 VECTOR_BOARD_P_DEFAULT_ARG(ERWIN_TRUE))
    {
        return (vector_board_p_t &)vector_char_p_t::insert_subvector ((vector_char_p_index_t)a0, (vector_char_p_t const &)a1, (vector_char_p_index_t)a2, (vector_char_p_cnt_t)a3, a4);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & insert_subvector (vector_board_p_index_t a0, vector_board_p_t const & a1, vector_board_p_index_t a2 VECTOR_BOARD_P_DEFAULT_ARG(0), vector_board_p_cnt_t a3 VECTOR_BOARD_P_DEFAULT_ARG(-1), ERWIN_BOOL a4 VECTOR_BOARD_P_DEFAULT_ARG(ERWIN_TRUE));
#endif /*ERWIN_CAST_INLINING*/
#if VECTOR_BOARD_P_DIRECT_RECURSION == 0
#if ERWIN_CAST_INLINING
    vector_board_p_t & insert (vector_board_p_index_t a0, vector_board_p_t const & a1, vector_board_p_index_t a2, vector_board_p_cnt_t a3 VECTOR_BOARD_P_DEFAULT_ARG(-1), ERWIN_BOOL a4 VECTOR_BOARD_P_DEFAULT_ARG(ERWIN_TRUE))
    {
        return (vector_board_p_t &)vector_char_p_t::insert ((vector_char_p_index_t)a0, (vector_char_p_t const &)a1, (vector_char_p_index_t)a2, (vector_char_p_cnt_t)a3, a4);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & insert (vector_board_p_index_t a0, vector_board_p_t const & a1, vector_board_p_index_t a2, vector_board_p_cnt_t a3 VECTOR_BOARD_P_DEFAULT_ARG(-1), ERWIN_BOOL a4 VECTOR_BOARD_P_DEFAULT_ARG(ERWIN_TRUE));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & insert (vector_board_p_index_t a0, vector_board_p_t const * a1, vector_board_p_index_t a2, vector_board_p_cnt_t a3 VECTOR_BOARD_P_DEFAULT_ARG(-1), ERWIN_BOOL a4 VECTOR_BOARD_P_DEFAULT_ARG(ERWIN_TRUE))
    {
        return (vector_board_p_t &)vector_char_p_t::insert ((vector_char_p_index_t)a0, (vector_char_p_t const *)(void*)a1, (vector_char_p_index_t)a2, (vector_char_p_cnt_t)a3, a4);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & insert (vector_board_p_index_t a0, vector_board_p_t const * a1, vector_board_p_index_t a2, vector_board_p_cnt_t a3 VECTOR_BOARD_P_DEFAULT_ARG(-1), ERWIN_BOOL a4 VECTOR_BOARD_P_DEFAULT_ARG(ERWIN_TRUE));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & insert (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2)
    {
        return (vector_board_p_t &)vector_char_p_t::insert ((vector_char_p_index_t)a0, (char * const *)(void*)a1, (vector_char_p_cnt_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & insert (vector_board_p_index_t a0, Board * const * a1, vector_board_p_cnt_t a2);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & insert (vector_board_p_index_t a0, Board * const * a1)
    {
        return (vector_board_p_t &)vector_char_p_t::insert ((vector_char_p_index_t)a0, (char * const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & insert (vector_board_p_index_t a0, Board * const * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & insert (vector_board_p_index_t a0, vector_board_p_t const * a1)
    {
        return (vector_board_p_t &)vector_char_p_t::insert ((vector_char_p_index_t)a0, (vector_char_p_t const *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & insert (vector_board_p_index_t a0, vector_board_p_t const * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & insert (vector_board_p_index_t a0, vector_board_p_t const & a1)
    {
        return (vector_board_p_t &)vector_char_p_t::insert ((vector_char_p_index_t)a0, (vector_char_p_t const &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & insert (vector_board_p_index_t a0, vector_board_p_t const & a1);
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    vector_board_p_cnt_t string_length (Board * const * a0) const
    {
        return (vector_board_p_cnt_t)vector_char_p_t::string_length ((char * const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_cnt_t string_length (Board * const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & ensure_size (vector_board_p_cnt_t a0)
    {
        return (vector_board_p_t &)vector_char_p_t::ensure_size ((vector_char_p_cnt_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & ensure_size (vector_board_p_cnt_t a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & ensure_size (vector_board_p_cnt_t a0, Board *  a1)
    {
        return (vector_board_p_t &)vector_char_p_t::ensure_size ((vector_char_p_cnt_t)a0, (char * )a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & ensure_size (vector_board_p_cnt_t a0, Board *  a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & set_size (vector_board_p_cnt_t a0)
    {
        return (vector_board_p_t &)vector_char_p_t::set_size ((vector_char_p_cnt_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & set_size (vector_board_p_cnt_t a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & set_size (vector_board_p_cnt_t a0, Board *  a1)
    {
        return (vector_board_p_t &)vector_char_p_t::set_size ((vector_char_p_cnt_t)a0, (char * )a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & set_size (vector_board_p_cnt_t a0, Board *  a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int ensure_table_size (vector_board_p_cnt_t a0)
    {
        return vector_char_p_t::ensure_table_size ((vector_char_p_cnt_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    int ensure_table_size (vector_board_p_cnt_t a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ptr_t as_array (void) const
    {
        return (vector_board_p_element_ptr_t)vector_char_p_t::as_array ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ptr_t as_array (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ptr_t as_open_array (void) const
    {
        return (vector_board_p_element_ptr_t)vector_char_p_t::as_open_array ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ptr_t as_open_array (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ptr_t as_array_detach (void)
    {
        return (vector_board_p_element_ptr_t)vector_char_p_t::as_array_detach ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ptr_t as_array_detach (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & ensure_heap_storage (void)
    {
        return (vector_board_p_t &)vector_char_p_t::ensure_heap_storage ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & ensure_heap_storage (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool has_heap_storage () const
    {
        return vector_char_p_t::has_heap_storage ();
    }
#else /*!ERWIN_CAST_INLINING*/
    bool has_heap_storage () const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline vector_board_p_cnt_t inline_store_cnt ()
    {
        return (vector_board_p_cnt_t)vector_char_p_t::inline_store_cnt ();
    }
#else /*!ERWIN_CAST_INLINING*/
    static vector_board_p_cnt_t inline_store_cnt ();
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ptr_t as_open_array_detach (void)
    {
        return (vector_board_p_element_ptr_t)vector_char_p_t::as_open_array_detach ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ptr_t as_open_array_detach (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_element_ptr_t operator+ (vector_board_p_index_t a0)
    {
        return (vector_board_p_element_ptr_t)vector_char_p_t::operator+ ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ptr_t operator+ (vector_board_p_index_t a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_IGNORE_BROKEN_MS_COMPILER
#if ERWIN_CAST_INLINING
    Board * const * operator+ (vector_board_p_index_t a0) const
    {
        return (Board * const *)(void*)vector_char_p_t::operator+ ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    Board * const * operator+ (vector_board_p_index_t a0) const;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    vector_board_p_element_ref_t operator* ()
    {
        return (vector_board_p_element_ref_t)vector_char_p_t::operator* ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ref_t operator* ();
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_IGNORE_BROKEN_MS_COMPILER
#if ERWIN_CAST_INLINING
    Board *  operator* () const
    {
        return (Board * )vector_char_p_t::operator* ();
    }
#else /*!ERWIN_CAST_INLINING*/
    Board *  operator* () const;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    vector_board_p_element_ptr_t operator+ () const
    {
        return (vector_board_p_element_ptr_t)vector_char_p_t::operator+ ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_element_ptr_t operator+ () const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & make_heap (vector_board_p_cmp_t a0 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL))
    {
        return (vector_board_p_t &)vector_char_p_t::make_heap ((vector_char_p_cmp_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & make_heap (vector_board_p_cmp_t a0 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t heap_left (vector_board_p_index_t a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::heap_left ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t heap_left (vector_board_p_index_t a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t heap_right (vector_board_p_index_t a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::heap_right ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t heap_right (vector_board_p_index_t a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t heap_father (vector_board_p_index_t a0) const
    {
        return (vector_board_p_index_t)vector_char_p_t::heap_father ((vector_char_p_index_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t heap_father (vector_board_p_index_t a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    Board * heap_extract (vector_board_p_cmp_t a0 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL))
    {
        return (Board *)vector_char_p_t::heap_extract ((vector_char_p_cmp_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    Board * heap_extract (vector_board_p_cmp_t a0 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & heap_raise (vector_board_p_index_t a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL))
    {
        return (vector_board_p_t &)vector_char_p_t::heap_raise ((vector_char_p_index_t)a0, (vector_char_p_cmp_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & heap_raise (vector_board_p_index_t a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & heap_sink (vector_board_p_index_t a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL))
    {
        return (vector_board_p_t &)vector_char_p_t::heap_sink ((vector_char_p_index_t)a0, (vector_char_p_cmp_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & heap_sink (vector_board_p_index_t a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & heap_fix (vector_board_p_index_t a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL))
    {
        return (vector_board_p_t &)vector_char_p_t::heap_fix ((vector_char_p_index_t)a0, (vector_char_p_cmp_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & heap_fix (vector_board_p_index_t a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & heap_insert (Board *  a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL))
    {
        return (vector_board_p_t &)vector_char_p_t::heap_insert ((char * )a0, (vector_char_p_cmp_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & heap_insert (Board *  a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & heap_erase (vector_board_p_index_t a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL))
    {
        return (vector_board_p_t &)vector_char_p_t::heap_erase ((vector_char_p_index_t)a0, (vector_char_p_cmp_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & heap_erase (vector_board_p_index_t a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & heap_sort (vector_board_p_cmp_t a0 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL))
    {
        return (vector_board_p_t &)vector_char_p_t::heap_sort ((vector_char_p_cmp_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & heap_sort (vector_board_p_cmp_t a0 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & qsort (vector_board_p_cmp_t a0 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL))
    {
        return (vector_board_p_t &)vector_char_p_t::qsort ((vector_char_p_cmp_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & qsort (vector_board_p_cmp_t a0 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & sort (vector_board_p_cmp_t a0 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL))
    {
        return (vector_board_p_t &)vector_char_p_t::sort ((vector_char_p_cmp_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & sort (vector_board_p_cmp_t a0 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_index_t bfind (Board *  a0, vector_board_p_cmp_t a1 = NULL) const
    {
        return (vector_board_p_index_t)vector_char_p_t::bfind ((char * )a0, (vector_char_p_cmp_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_index_t bfind (Board *  a0, vector_board_p_cmp_t a1 = NULL) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    hashval_t hash_raw (void) const
    {
        return vector_char_p_t::hash_raw ();
    }
#else /*!ERWIN_CAST_INLINING*/
    hashval_t hash_raw (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    hashval_t hash (void) const
    {
        return vector_char_p_t::hash ();
    }
#else /*!ERWIN_CAST_INLINING*/
    hashval_t hash (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    void init_iterator (vector_board_p_index_t * a0) const
    {
        vector_char_p_t::init_iterator ((vector_char_p_index_t *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    void init_iterator (vector_board_p_index_t * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_iteration (vector_board_p_index_t * a0, Board * * a1) const
    {
        return vector_char_p_t::next_iteration ((vector_char_p_index_t *)(void*)a0, (char * *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_iteration (vector_board_p_index_t * a0, Board * * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_iteration_ptr (vector_board_p_index_t * a0, Board * * * a1)
    {
        return vector_char_p_t::next_iteration_ptr ((vector_char_p_index_t *)(void*)a0, (char * * *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_iteration_ptr (vector_board_p_index_t * a0, Board * * * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_iteration_ptr (vector_board_p_index_t * a0, Board * const * * a1) const
    {
        return vector_char_p_t::next_iteration_ptr ((vector_char_p_index_t *)(void*)a0, (char * const * *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_iteration_ptr (vector_board_p_index_t * a0, Board * const * * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    void init_iterator_reverse (vector_board_p_index_t * a0) const
    {
        vector_char_p_t::init_iterator_reverse ((vector_char_p_index_t *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    void init_iterator_reverse (vector_board_p_index_t * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_iteration_reverse (vector_board_p_index_t * a0, Board * * a1) const
    {
        return vector_char_p_t::next_iteration_reverse ((vector_char_p_index_t *)(void*)a0, (char * *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_iteration_reverse (vector_board_p_index_t * a0, Board * * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_iteration_ptr_reverse (vector_board_p_index_t * a0, Board * * * a1)
    {
        return vector_char_p_t::next_iteration_ptr_reverse ((vector_char_p_index_t *)(void*)a0, (char * * *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_iteration_ptr_reverse (vector_board_p_index_t * a0, Board * * * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_iteration_ptr_reverse (vector_board_p_index_t * a0, Board * const * * a1) const
    {
        return vector_char_p_t::next_iteration_ptr_reverse ((vector_char_p_index_t *)(void*)a0, (char * const * *)(void*)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_iteration_ptr_reverse (vector_board_p_index_t * a0, Board * const * * a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & shrink (bool a0 = true)
    {
        return (vector_board_p_t &)vector_char_p_t::shrink (a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & shrink (bool a0 = true);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & clear ()
    {
        return (vector_board_p_t &)vector_char_p_t::clear ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & clear ();
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & clear_keep (vector_board_p_cnt_t a0)
    {
        return (vector_board_p_t &)vector_char_p_t::clear_keep ((vector_char_p_cnt_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & clear_keep (vector_board_p_cnt_t a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & clear_no_resize ()
    {
        return (vector_board_p_t &)vector_char_p_t::clear_no_resize ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & clear_no_resize ();
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void delete_array (vector_board_p_element_ptr_t a0)
    {
        vector_char_p_t::delete_array ((vector_char_p_element_ptr_t)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void delete_array (vector_board_p_element_ptr_t a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & clear (bool a0, bool a1)
    {
        return (vector_board_p_t &)vector_char_p_t::clear (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & clear (bool a0, bool a1);
#endif /*ERWIN_CAST_INLINING*/
#ifdef VECTOR_BOARD_P_INLINE__NENTRIES
#if ERWIN_CAST_INLINING
    vector_board_p_cnt_t nentries () const
    {
        return (vector_board_p_cnt_t)vector_char_p_t::nentries ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_cnt_t nentries () const;
#endif /*ERWIN_CAST_INLINING*/
#else
#if ERWIN_CAST_INLINING
    vector_board_p_cnt_t nentries () const
    {
        return (vector_board_p_cnt_t)vector_char_p_t::nentries ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_cnt_t nentries () const;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    bool empty () const
    {
        return vector_char_p_t::empty ();
    }
#else /*!ERWIN_CAST_INLINING*/
    bool empty () const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool non_empty () const
    {
        return vector_char_p_t::non_empty ();
    }
#else /*!ERWIN_CAST_INLINING*/
    bool non_empty () const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_cnt_t table_size () const
    {
        return (vector_board_p_cnt_t)vector_char_p_t::table_size ();
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_cnt_t table_size () const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int cmp (vector_board_p_t const * a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL)) const
    {
        return vector_char_p_t::cmp ((vector_char_p_t const *)(void*)a0, (vector_char_p_cmp_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    int cmp (vector_board_p_t const * a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL)) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int cmp (vector_board_p_t const & a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL)) const
    {
        return vector_char_p_t::cmp ((vector_char_p_t const &)a0, (vector_char_p_cmp_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    int cmp (vector_board_p_t const & a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL)) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int priority_cmp (vector_board_p_t const * a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL)) const
    {
        return vector_char_p_t::priority_cmp ((vector_char_p_t const *)(void*)a0, (vector_char_p_cmp_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    int priority_cmp (vector_board_p_t const * a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL)) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int priority_cmp (vector_board_p_t const & a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL)) const
    {
        return vector_char_p_t::priority_cmp ((vector_char_p_t const &)a0, (vector_char_p_cmp_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    int priority_cmp (vector_board_p_t const & a0, vector_board_p_cmp_t a1 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL)) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator== (vector_board_p_t const & a0)
    {
        return vector_char_p_t::operator== ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator== (vector_board_p_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator== (vector_board_p_t const * a0)
    {
        return vector_char_p_t::operator== ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator== (vector_board_p_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator!= (vector_board_p_t const & a0)
    {
        return vector_char_p_t::operator!= ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator!= (vector_board_p_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator!= (vector_board_p_t const * a0)
    {
        return vector_char_p_t::operator!= ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator!= (vector_board_p_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator<= (vector_board_p_t const & a0)
    {
        return vector_char_p_t::operator<= ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator<= (vector_board_p_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator<= (vector_board_p_t const * a0)
    {
        return vector_char_p_t::operator<= ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator<= (vector_board_p_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator>= (vector_board_p_t const & a0)
    {
        return vector_char_p_t::operator>= ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator>= (vector_board_p_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator>= (vector_board_p_t const * a0)
    {
        return vector_char_p_t::operator>= ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator>= (vector_board_p_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator< (vector_board_p_t const & a0)
    {
        return vector_char_p_t::operator< ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator< (vector_board_p_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator< (vector_board_p_t const * a0)
    {
        return vector_char_p_t::operator< ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator< (vector_board_p_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator> (vector_board_p_t const & a0)
    {
        return vector_char_p_t::operator> ((vector_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator> (vector_board_p_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator> (vector_board_p_t const * a0)
    {
        return vector_char_p_t::operator> ((vector_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator> (vector_board_p_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    vector_board_p_t & swap (vector_board_p_index_t a0, vector_board_p_index_t a1)
    {
        return (vector_board_p_t &)vector_char_p_t::swap ((vector_char_p_index_t)a0, (vector_char_p_index_t)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    vector_board_p_t & swap (vector_board_p_index_t a0, vector_board_p_index_t a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool locate (vector_board_p_index_t & a0, Board *  a1, int a2) const
    {
        return vector_char_p_t::locate ((vector_char_p_index_t &)a0, (char * )a1, a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool locate (vector_board_p_index_t & a0, Board *  a1, int a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool locate (vector_board_p_index_t & a0, Board *  a1, vector_board_p_cmp_t a2 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL), int a3 VECTOR_BOARD_P_DEFAULT_ARG(0)) const
    {
        return vector_char_p_t::locate ((vector_char_p_index_t &)a0, (char * )a1, (vector_char_p_cmp_t)a2, a3);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool locate (vector_board_p_index_t & a0, Board *  a1, vector_board_p_cmp_t a2 VECTOR_BOARD_P_DEFAULT_ARG(VECTOR_BOARD_P_CMP_T_NULL), int a3 VECTOR_BOARD_P_DEFAULT_ARG(0)) const;
#endif /*ERWIN_CAST_INLINING*/
#endif /* __cplusplus */
};

#ifdef __cplusplus

extern "C++" {
ERWIN_WRAPPER
vector_board_p_t *erwin_ptr_of(vector_board_p_t *x) { return x;  }

ERWIN_WRAPPER
vector_board_p_t *erwin_ptr_of(vector_board_p_t &x) { return &x; }

ERWIN_WRAPPER
vector_board_p_t const *erwin_ptr_const_of (vector_board_p_t const *x) { return x;  }

ERWIN_WRAPPER
vector_board_p_t const *erwin_ptr_const_of (vector_board_p_t const &x) { return &x; }
}

#endif /* defined(__cplusplus) */


#ifdef VECTOR_BOARD_P_TP_DEEP
#  if VECTOR_BOARD_P_TP_DEEP
#    ifndef VECTOR_BOARD_P_TP_DEEP_COPY
#      define VECTOR_BOARD_P_TP_DEEP_COPY 1
#    endif
#    ifndef VECTOR_BOARD_P_TP_DEEP_COMPARE
#      define VECTOR_BOARD_P_TP_DEEP_COMPARE 1
#    endif
#  else
#    ifndef VECTOR_BOARD_P_TP_DEEP_COPY
#      define VECTOR_BOARD_P_TP_DEEP_COPY 0
#    endif
#    ifndef VECTOR_BOARD_P_TP_DEEP_COMPARE
#      define VECTOR_BOARD_P_TP_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef VECTOR_BOARD_P_TP_DEEP_COPY
#define VECTOR_BOARD_P_TP_DEEP_COPY 0
#endif /* !defined VECTOR_BOARD_P_TP_DEEP_COPY */

#ifndef VECTOR_BOARD_P_TP_DEEP_COMPARE
#define VECTOR_BOARD_P_TP_DEEP_COMPARE 0
#endif /* !defined VECTOR_BOARD_P_TP_DEEP_COMPARE */

#ifdef VECTOR_BOARD_P_T_CONSTP_DEEP
#  if VECTOR_BOARD_P_T_CONSTP_DEEP
#    ifndef VECTOR_BOARD_P_T_CONSTP_DEEP_COPY
#      define VECTOR_BOARD_P_T_CONSTP_DEEP_COPY 1
#    endif
#    ifndef VECTOR_BOARD_P_T_CONSTP_DEEP_COMPARE
#      define VECTOR_BOARD_P_T_CONSTP_DEEP_COMPARE 1
#    endif
#  else
#    ifndef VECTOR_BOARD_P_T_CONSTP_DEEP_COPY
#      define VECTOR_BOARD_P_T_CONSTP_DEEP_COPY 0
#    endif
#    ifndef VECTOR_BOARD_P_T_CONSTP_DEEP_COMPARE
#      define VECTOR_BOARD_P_T_CONSTP_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef VECTOR_BOARD_P_T_CONSTP_DEEP_COPY
#define VECTOR_BOARD_P_T_CONSTP_DEEP_COPY 0
#endif /* !defined VECTOR_BOARD_P_T_CONSTP_DEEP_COPY */

#ifndef VECTOR_BOARD_P_T_CONSTP_DEEP_COMPARE
#define VECTOR_BOARD_P_T_CONSTP_DEEP_COMPARE 0
#endif /* !defined VECTOR_BOARD_P_T_CONSTP_DEEP_COMPARE */

#ifdef CONST_VECTOR_BOARD_P_TP_DEEP
#  if CONST_VECTOR_BOARD_P_TP_DEEP
#    ifndef CONST_VECTOR_BOARD_P_TP_DEEP_COPY
#      define CONST_VECTOR_BOARD_P_TP_DEEP_COPY 1
#    endif
#    ifndef CONST_VECTOR_BOARD_P_TP_DEEP_COMPARE
#      define CONST_VECTOR_BOARD_P_TP_DEEP_COMPARE 1
#    endif
#  else
#    ifndef CONST_VECTOR_BOARD_P_TP_DEEP_COPY
#      define CONST_VECTOR_BOARD_P_TP_DEEP_COPY 0
#    endif
#    ifndef CONST_VECTOR_BOARD_P_TP_DEEP_COMPARE
#      define CONST_VECTOR_BOARD_P_TP_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef CONST_VECTOR_BOARD_P_TP_DEEP_COPY
#define CONST_VECTOR_BOARD_P_TP_DEEP_COPY 0
#endif /* !defined CONST_VECTOR_BOARD_P_TP_DEEP_COPY */

#ifndef CONST_VECTOR_BOARD_P_TP_DEEP_COMPARE
#define CONST_VECTOR_BOARD_P_TP_DEEP_COMPARE 0
#endif /* !defined CONST_VECTOR_BOARD_P_TP_DEEP_COMPARE */

#ifdef VECTORBOARDPP_DEEP
#  if VECTORBOARDPP_DEEP
#    ifndef VECTORBOARDPP_DEEP_COPY
#      define VECTORBOARDPP_DEEP_COPY 1
#    endif
#    ifndef VECTORBOARDPP_DEEP_COMPARE
#      define VECTORBOARDPP_DEEP_COMPARE 1
#    endif
#  else
#    ifndef VECTORBOARDPP_DEEP_COPY
#      define VECTORBOARDPP_DEEP_COPY 0
#    endif
#    ifndef VECTORBOARDPP_DEEP_COMPARE
#      define VECTORBOARDPP_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef VECTORBOARDPP_DEEP_COPY
#define VECTORBOARDPP_DEEP_COPY 0
#endif /* !defined VECTORBOARDPP_DEEP_COPY */

#ifndef VECTORBOARDPP_DEEP_COMPARE
#define VECTORBOARDPP_DEEP_COMPARE 0
#endif /* !defined VECTORBOARDPP_DEEP_COMPARE */

#ifdef VECTORBOARDP_CONSTP_DEEP
#  if VECTORBOARDP_CONSTP_DEEP
#    ifndef VECTORBOARDP_CONSTP_DEEP_COPY
#      define VECTORBOARDP_CONSTP_DEEP_COPY 1
#    endif
#    ifndef VECTORBOARDP_CONSTP_DEEP_COMPARE
#      define VECTORBOARDP_CONSTP_DEEP_COMPARE 1
#    endif
#  else
#    ifndef VECTORBOARDP_CONSTP_DEEP_COPY
#      define VECTORBOARDP_CONSTP_DEEP_COPY 0
#    endif
#    ifndef VECTORBOARDP_CONSTP_DEEP_COMPARE
#      define VECTORBOARDP_CONSTP_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef VECTORBOARDP_CONSTP_DEEP_COPY
#define VECTORBOARDP_CONSTP_DEEP_COPY 0
#endif /* !defined VECTORBOARDP_CONSTP_DEEP_COPY */

#ifndef VECTORBOARDP_CONSTP_DEEP_COMPARE
#define VECTORBOARDP_CONSTP_DEEP_COMPARE 0
#endif /* !defined VECTORBOARDP_CONSTP_DEEP_COMPARE */

#ifdef CONST_VECTORBOARDPP_DEEP
#  if CONST_VECTORBOARDPP_DEEP
#    ifndef CONST_VECTORBOARDPP_DEEP_COPY
#      define CONST_VECTORBOARDPP_DEEP_COPY 1
#    endif
#    ifndef CONST_VECTORBOARDPP_DEEP_COMPARE
#      define CONST_VECTORBOARDPP_DEEP_COMPARE 1
#    endif
#  else
#    ifndef CONST_VECTORBOARDPP_DEEP_COPY
#      define CONST_VECTORBOARDPP_DEEP_COPY 0
#    endif
#    ifndef CONST_VECTORBOARDPP_DEEP_COMPARE
#      define CONST_VECTORBOARDPP_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef CONST_VECTORBOARDPP_DEEP_COPY
#define CONST_VECTORBOARDPP_DEEP_COPY 0
#endif /* !defined CONST_VECTORBOARDPP_DEEP_COPY */

#ifndef CONST_VECTORBOARDPP_DEEP_COMPARE
#define CONST_VECTORBOARDPP_DEEP_COMPARE 0
#endif /* !defined CONST_VECTORBOARDPP_DEEP_COMPARE */

#ifdef VECTOR_BOARD_P_T_P_DEEP
#  if VECTOR_BOARD_P_T_P_DEEP
#    ifndef VECTOR_BOARD_P_T_P_DEEP_COPY
#      define VECTOR_BOARD_P_T_P_DEEP_COPY 1
#    endif
#    ifndef VECTOR_BOARD_P_T_P_DEEP_COMPARE
#      define VECTOR_BOARD_P_T_P_DEEP_COMPARE 1
#    endif
#  else
#    ifndef VECTOR_BOARD_P_T_P_DEEP_COPY
#      define VECTOR_BOARD_P_T_P_DEEP_COPY 0
#    endif
#    ifndef VECTOR_BOARD_P_T_P_DEEP_COMPARE
#      define VECTOR_BOARD_P_T_P_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef VECTOR_BOARD_P_T_P_DEEP_COPY
#define VECTOR_BOARD_P_T_P_DEEP_COPY 0
#endif /* !defined VECTOR_BOARD_P_T_P_DEEP_COPY */

#ifndef VECTOR_BOARD_P_T_P_DEEP_COMPARE
#define VECTOR_BOARD_P_T_P_DEEP_COMPARE 0
#endif /* !defined VECTOR_BOARD_P_T_P_DEEP_COMPARE */

#ifdef VECTOR_BOARD_P_T_CONST_P_DEEP
#  if VECTOR_BOARD_P_T_CONST_P_DEEP
#    ifndef VECTOR_BOARD_P_T_CONST_P_DEEP_COPY
#      define VECTOR_BOARD_P_T_CONST_P_DEEP_COPY 1
#    endif
#    ifndef VECTOR_BOARD_P_T_CONST_P_DEEP_COMPARE
#      define VECTOR_BOARD_P_T_CONST_P_DEEP_COMPARE 1
#    endif
#  else
#    ifndef VECTOR_BOARD_P_T_CONST_P_DEEP_COPY
#      define VECTOR_BOARD_P_T_CONST_P_DEEP_COPY 0
#    endif
#    ifndef VECTOR_BOARD_P_T_CONST_P_DEEP_COMPARE
#      define VECTOR_BOARD_P_T_CONST_P_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef VECTOR_BOARD_P_T_CONST_P_DEEP_COPY
#define VECTOR_BOARD_P_T_CONST_P_DEEP_COPY 0
#endif /* !defined VECTOR_BOARD_P_T_CONST_P_DEEP_COPY */

#ifndef VECTOR_BOARD_P_T_CONST_P_DEEP_COMPARE
#define VECTOR_BOARD_P_T_CONST_P_DEEP_COMPARE 0
#endif /* !defined VECTOR_BOARD_P_T_CONST_P_DEEP_COMPARE */

#ifdef CONST_VECTOR_BOARD_P_T_P_DEEP
#  if CONST_VECTOR_BOARD_P_T_P_DEEP
#    ifndef CONST_VECTOR_BOARD_P_T_P_DEEP_COPY
#      define CONST_VECTOR_BOARD_P_T_P_DEEP_COPY 1
#    endif
#    ifndef CONST_VECTOR_BOARD_P_T_P_DEEP_COMPARE
#      define CONST_VECTOR_BOARD_P_T_P_DEEP_COMPARE 1
#    endif
#  else
#    ifndef CONST_VECTOR_BOARD_P_T_P_DEEP_COPY
#      define CONST_VECTOR_BOARD_P_T_P_DEEP_COPY 0
#    endif
#    ifndef CONST_VECTOR_BOARD_P_T_P_DEEP_COMPARE
#      define CONST_VECTOR_BOARD_P_T_P_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef CONST_VECTOR_BOARD_P_T_P_DEEP_COPY
#define CONST_VECTOR_BOARD_P_T_P_DEEP_COPY 0
#endif /* !defined CONST_VECTOR_BOARD_P_T_P_DEEP_COPY */

#ifndef CONST_VECTOR_BOARD_P_T_P_DEEP_COMPARE
#define CONST_VECTOR_BOARD_P_T_P_DEEP_COMPARE 0
#endif /* !defined CONST_VECTOR_BOARD_P_T_P_DEEP_COMPARE */

#ifdef VECTORBOARDP_P_DEEP
#  if VECTORBOARDP_P_DEEP
#    ifndef VECTORBOARDP_P_DEEP_COPY
#      define VECTORBOARDP_P_DEEP_COPY 1
#    endif
#    ifndef VECTORBOARDP_P_DEEP_COMPARE
#      define VECTORBOARDP_P_DEEP_COMPARE 1
#    endif
#  else
#    ifndef VECTORBOARDP_P_DEEP_COPY
#      define VECTORBOARDP_P_DEEP_COPY 0
#    endif
#    ifndef VECTORBOARDP_P_DEEP_COMPARE
#      define VECTORBOARDP_P_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef VECTORBOARDP_P_DEEP_COPY
#define VECTORBOARDP_P_DEEP_COPY 0
#endif /* !defined VECTORBOARDP_P_DEEP_COPY */

#ifndef VECTORBOARDP_P_DEEP_COMPARE
#define VECTORBOARDP_P_DEEP_COMPARE 0
#endif /* !defined VECTORBOARDP_P_DEEP_COMPARE */

#ifdef VECTORBOARDP_CONST_P_DEEP
#  if VECTORBOARDP_CONST_P_DEEP
#    ifndef VECTORBOARDP_CONST_P_DEEP_COPY
#      define VECTORBOARDP_CONST_P_DEEP_COPY 1
#    endif
#    ifndef VECTORBOARDP_CONST_P_DEEP_COMPARE
#      define VECTORBOARDP_CONST_P_DEEP_COMPARE 1
#    endif
#  else
#    ifndef VECTORBOARDP_CONST_P_DEEP_COPY
#      define VECTORBOARDP_CONST_P_DEEP_COPY 0
#    endif
#    ifndef VECTORBOARDP_CONST_P_DEEP_COMPARE
#      define VECTORBOARDP_CONST_P_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef VECTORBOARDP_CONST_P_DEEP_COPY
#define VECTORBOARDP_CONST_P_DEEP_COPY 0
#endif /* !defined VECTORBOARDP_CONST_P_DEEP_COPY */

#ifndef VECTORBOARDP_CONST_P_DEEP_COMPARE
#define VECTORBOARDP_CONST_P_DEEP_COMPARE 0
#endif /* !defined VECTORBOARDP_CONST_P_DEEP_COMPARE */

#ifdef CONST_VECTORBOARDP_P_DEEP
#  if CONST_VECTORBOARDP_P_DEEP
#    ifndef CONST_VECTORBOARDP_P_DEEP_COPY
#      define CONST_VECTORBOARDP_P_DEEP_COPY 1
#    endif
#    ifndef CONST_VECTORBOARDP_P_DEEP_COMPARE
#      define CONST_VECTORBOARDP_P_DEEP_COMPARE 1
#    endif
#  else
#    ifndef CONST_VECTORBOARDP_P_DEEP_COPY
#      define CONST_VECTORBOARDP_P_DEEP_COPY 0
#    endif
#    ifndef CONST_VECTORBOARDP_P_DEEP_COMPARE
#      define CONST_VECTORBOARDP_P_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef CONST_VECTORBOARDP_P_DEEP_COPY
#define CONST_VECTORBOARDP_P_DEEP_COPY 0
#endif /* !defined CONST_VECTORBOARDP_P_DEEP_COPY */

#ifndef CONST_VECTORBOARDP_P_DEEP_COMPARE
#define CONST_VECTORBOARDP_P_DEEP_COMPARE 0
#endif /* !defined CONST_VECTORBOARDP_P_DEEP_COMPARE */

#if VECTOR_BOARD_P_TP_DEEP_COMPARE && !defined(VECTOR_BOARD_P_TP_HASHVAL)
#define VECTOR_BOARD_P_TP_HASHVAL(A1) vector_board_p_hashval((A1))
#endif

#if VECTOR_BOARD_P_T_CONSTP_DEEP_COMPARE && !defined(VECTOR_BOARD_P_T_CONSTP_HASHVAL)
#define VECTOR_BOARD_P_T_CONSTP_HASHVAL(A1) vector_board_p_hashval((A1))
#endif

#if CONST_VECTOR_BOARD_P_TP_DEEP_COMPARE && !defined(CONST_VECTOR_BOARD_P_TP_HASHVAL)
#define CONST_VECTOR_BOARD_P_TP_HASHVAL(A1) vector_board_p_hashval((A1))
#endif

#if VECTORBOARDPP_DEEP_COMPARE && !defined(VECTORBOARDPP_HASHVAL)
#define VECTORBOARDPP_HASHVAL(A1) ((A1)->hashval())
#endif

#if VECTORBOARDP_CONSTP_DEEP_COMPARE && !defined(VECTORBOARDP_CONSTP_HASHVAL)
#define VECTORBOARDP_CONSTP_HASHVAL(A1) ((A1)->hashval())
#endif

#if CONST_VECTORBOARDPP_DEEP_COMPARE && !defined(CONST_VECTORBOARDPP_HASHVAL)
#define CONST_VECTORBOARDPP_HASHVAL(A1) ((A1)->hashval())
#endif

#if VECTOR_BOARD_P_T_P_DEEP_COMPARE && !defined(VECTOR_BOARD_P_T_P_HASHVAL)
#define VECTOR_BOARD_P_T_P_HASHVAL(A1) vector_board_p_hashval((A1))
#endif

#if VECTOR_BOARD_P_T_CONST_P_DEEP_COMPARE && !defined(VECTOR_BOARD_P_T_CONST_P_HASHVAL)
#define VECTOR_BOARD_P_T_CONST_P_HASHVAL(A1) vector_board_p_hashval((A1))
#endif

#if CONST_VECTOR_BOARD_P_T_P_DEEP_COMPARE && !defined(CONST_VECTOR_BOARD_P_T_P_HASHVAL)
#define CONST_VECTOR_BOARD_P_T_P_HASHVAL(A1) vector_board_p_hashval((A1))
#endif

#if VECTORBOARDP_P_DEEP_COMPARE && !defined(VECTORBOARDP_P_HASHVAL)
#define VECTORBOARDP_P_HASHVAL(A1) ((A1)->hashval())
#endif

#if VECTORBOARDP_CONST_P_DEEP_COMPARE && !defined(VECTORBOARDP_CONST_P_HASHVAL)
#define VECTORBOARDP_CONST_P_HASHVAL(A1) ((A1)->hashval())
#endif

#if CONST_VECTORBOARDP_P_DEEP_COMPARE && !defined(CONST_VECTORBOARDP_P_HASHVAL)
#define CONST_VECTORBOARDP_P_HASHVAL(A1) ((A1)->hashval())
#endif

#ifndef VECTORBOARDP_HASHVAL
#define VECTORBOARDP_HASHVAL(A1) ((A1).hashval())
#endif

#if VECTOR_BOARD_P_TP_DEEP_COMPARE && !defined(VECTOR_BOARD_P_TP_CMP)
#define VECTOR_BOARD_P_TP_CMP(A1,A2) vector_board_p_cmp((A1),(A2),NULL)
#endif

#if VECTOR_BOARD_P_T_CONSTP_DEEP_COMPARE && !defined(VECTOR_BOARD_P_T_CONSTP_CMP)
#define VECTOR_BOARD_P_T_CONSTP_CMP(A1,A2) vector_board_p_cmp((A1),(A2),NULL)
#endif

#if CONST_VECTOR_BOARD_P_TP_DEEP_COMPARE && !defined(CONST_VECTOR_BOARD_P_TP_CMP)
#define CONST_VECTOR_BOARD_P_TP_CMP(A1,A2) vector_board_p_cmp((A1),(A2),NULL)
#endif

#if VECTORBOARDPP_DEEP_COMPARE && !defined(VECTORBOARDPP_CMP)
#define VECTORBOARDPP_CMP(A1,A2) ((A1)->cmp((A2),NULL))
#endif

#if VECTORBOARDP_CONSTP_DEEP_COMPARE && !defined(VECTORBOARDP_CONSTP_CMP)
#define VECTORBOARDP_CONSTP_CMP(A1,A2) ((A1)->cmp((A2),NULL))
#endif

#if CONST_VECTORBOARDPP_DEEP_COMPARE && !defined(CONST_VECTORBOARDPP_CMP)
#define CONST_VECTORBOARDPP_CMP(A1,A2) ((A1)->cmp((A2),NULL))
#endif

#if VECTOR_BOARD_P_T_P_DEEP_COMPARE && !defined(VECTOR_BOARD_P_T_P_CMP)
#define VECTOR_BOARD_P_T_P_CMP(A1,A2) vector_board_p_cmp((A1),(A2),NULL)
#endif

#if VECTOR_BOARD_P_T_CONST_P_DEEP_COMPARE && !defined(VECTOR_BOARD_P_T_CONST_P_CMP)
#define VECTOR_BOARD_P_T_CONST_P_CMP(A1,A2) vector_board_p_cmp((A1),(A2),NULL)
#endif

#if CONST_VECTOR_BOARD_P_T_P_DEEP_COMPARE && !defined(CONST_VECTOR_BOARD_P_T_P_CMP)
#define CONST_VECTOR_BOARD_P_T_P_CMP(A1,A2) vector_board_p_cmp((A1),(A2),NULL)
#endif

#if VECTORBOARDP_P_DEEP_COMPARE && !defined(VECTORBOARDP_P_CMP)
#define VECTORBOARDP_P_CMP(A1,A2) ((A1)->cmp((A2),NULL))
#endif

#if VECTORBOARDP_CONST_P_DEEP_COMPARE && !defined(VECTORBOARDP_CONST_P_CMP)
#define VECTORBOARDP_CONST_P_CMP(A1,A2) ((A1)->cmp((A2),NULL))
#endif

#if CONST_VECTORBOARDP_P_DEEP_COMPARE && !defined(CONST_VECTORBOARDP_P_CMP)
#define CONST_VECTORBOARDP_P_CMP(A1,A2) ((A1)->cmp((A2),NULL))
#endif

#ifndef VECTORBOARDP_CMP
#define VECTORBOARDP_CMP(A1,A2) ((A1).cmp((A2),NULL))
#endif

#ifndef VECTORBOARDP_ZERO
#define VECTORBOARDP_ZERO (VectorBoardP::static_zero())
#endif

#ifndef VECTOR_BOARD_P_TP_CONSTANT_ZERO
#define VECTOR_BOARD_P_TP_CONSTANT_ZERO(A1) vector_board_p_constant_zero((A1))
#endif

#ifndef VECTOR_BOARD_P_T_CONSTP_CONSTANT_ZERO
#define VECTOR_BOARD_P_T_CONSTP_CONSTANT_ZERO(A1) vector_board_p_constant_zero((A1))
#endif

#ifndef CONST_VECTOR_BOARD_P_TP_CONSTANT_ZERO
#define CONST_VECTOR_BOARD_P_TP_CONSTANT_ZERO(A1) vector_board_p_constant_zero((A1))
#endif

#ifndef VECTORBOARDPP_CONSTANT_ZERO
#define VECTORBOARDPP_CONSTANT_ZERO(A1) ((A1)->constant_zero())
#endif

#ifndef VECTORBOARDP_CONSTP_CONSTANT_ZERO
#define VECTORBOARDP_CONSTP_CONSTANT_ZERO(A1) ((A1)->constant_zero())
#endif

#ifndef CONST_VECTORBOARDPP_CONSTANT_ZERO
#define CONST_VECTORBOARDPP_CONSTANT_ZERO(A1) ((A1)->constant_zero())
#endif

#ifndef VECTOR_BOARD_P_T_P_CONSTANT_ZERO
#define VECTOR_BOARD_P_T_P_CONSTANT_ZERO(A1) vector_board_p_constant_zero((A1))
#endif

#ifndef VECTOR_BOARD_P_T_CONST_P_CONSTANT_ZERO
#define VECTOR_BOARD_P_T_CONST_P_CONSTANT_ZERO(A1) vector_board_p_constant_zero((A1))
#endif

#ifndef CONST_VECTOR_BOARD_P_T_P_CONSTANT_ZERO
#define CONST_VECTOR_BOARD_P_T_P_CONSTANT_ZERO(A1) vector_board_p_constant_zero((A1))
#endif

#ifndef VECTORBOARDP_P_CONSTANT_ZERO
#define VECTORBOARDP_P_CONSTANT_ZERO(A1) ((A1)->constant_zero())
#endif

#ifndef VECTORBOARDP_CONST_P_CONSTANT_ZERO
#define VECTORBOARDP_CONST_P_CONSTANT_ZERO(A1) ((A1)->constant_zero())
#endif

#ifndef CONST_VECTORBOARDP_P_CONSTANT_ZERO
#define CONST_VECTORBOARDP_P_CONSTANT_ZERO(A1) ((A1)->constant_zero())
#endif

#if VECTOR_BOARD_P_TP_DEEP_COPY && !defined(VECTOR_BOARD_P_TP_ICOPY)
#define VECTOR_BOARD_P_TP_ICOPY(A1,A2) vector_board_p_copy_err((A1),(A2))
#endif

#if VECTOR_BOARD_P_T_CONSTP_DEEP_COPY && !defined(VECTOR_BOARD_P_T_CONSTP_ICOPY)
#define VECTOR_BOARD_P_T_CONSTP_ICOPY(A1,A2) vector_board_p_copy_err((A1),(A2))
#endif

#if CONST_VECTOR_BOARD_P_TP_DEEP_COPY && !defined(CONST_VECTOR_BOARD_P_TP_ICOPY)
#define CONST_VECTOR_BOARD_P_TP_ICOPY(A1,A2) vector_board_p_copy_err((A1),(A2))
#endif

#if VECTORBOARDPP_DEEP_COPY && !defined(VECTORBOARDPP_ICOPY)
#define VECTORBOARDPP_ICOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if VECTORBOARDP_CONSTP_DEEP_COPY && !defined(VECTORBOARDP_CONSTP_ICOPY)
#define VECTORBOARDP_CONSTP_ICOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if CONST_VECTORBOARDPP_DEEP_COPY && !defined(CONST_VECTORBOARDPP_ICOPY)
#define CONST_VECTORBOARDPP_ICOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if VECTOR_BOARD_P_T_P_DEEP_COPY && !defined(VECTOR_BOARD_P_T_P_ICOPY)
#define VECTOR_BOARD_P_T_P_ICOPY(A1,A2) vector_board_p_copy_err((A1),(A2))
#endif

#if VECTOR_BOARD_P_T_CONST_P_DEEP_COPY && !defined(VECTOR_BOARD_P_T_CONST_P_ICOPY)
#define VECTOR_BOARD_P_T_CONST_P_ICOPY(A1,A2) vector_board_p_copy_err((A1),(A2))
#endif

#if CONST_VECTOR_BOARD_P_T_P_DEEP_COPY && !defined(CONST_VECTOR_BOARD_P_T_P_ICOPY)
#define CONST_VECTOR_BOARD_P_T_P_ICOPY(A1,A2) vector_board_p_copy_err((A1),(A2))
#endif

#if VECTORBOARDP_P_DEEP_COPY && !defined(VECTORBOARDP_P_ICOPY)
#define VECTORBOARDP_P_ICOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if VECTORBOARDP_CONST_P_DEEP_COPY && !defined(VECTORBOARDP_CONST_P_ICOPY)
#define VECTORBOARDP_CONST_P_ICOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if CONST_VECTORBOARDP_P_DEEP_COPY && !defined(CONST_VECTORBOARDP_P_ICOPY)
#define CONST_VECTORBOARDP_P_ICOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if VECTOR_BOARD_P_TP_DEEP_COPY && !defined(VECTOR_BOARD_P_TP_OCOPY)
#define VECTOR_BOARD_P_TP_OCOPY(A1,A2) vector_board_p_copy_err((A1),(A2))
#endif

#if VECTOR_BOARD_P_T_CONSTP_DEEP_COPY && !defined(VECTOR_BOARD_P_T_CONSTP_OCOPY)
#define VECTOR_BOARD_P_T_CONSTP_OCOPY(A1,A2) vector_board_p_copy_err((A1),(A2))
#endif

#if CONST_VECTOR_BOARD_P_TP_DEEP_COPY && !defined(CONST_VECTOR_BOARD_P_TP_OCOPY)
#define CONST_VECTOR_BOARD_P_TP_OCOPY(A1,A2) vector_board_p_copy_err((A1),(A2))
#endif

#if VECTORBOARDPP_DEEP_COPY && !defined(VECTORBOARDPP_OCOPY)
#define VECTORBOARDPP_OCOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if VECTORBOARDP_CONSTP_DEEP_COPY && !defined(VECTORBOARDP_CONSTP_OCOPY)
#define VECTORBOARDP_CONSTP_OCOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if CONST_VECTORBOARDPP_DEEP_COPY && !defined(CONST_VECTORBOARDPP_OCOPY)
#define CONST_VECTORBOARDPP_OCOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if VECTOR_BOARD_P_T_P_DEEP_COPY && !defined(VECTOR_BOARD_P_T_P_OCOPY)
#define VECTOR_BOARD_P_T_P_OCOPY(A1,A2) vector_board_p_copy_err((A1),(A2))
#endif

#if VECTOR_BOARD_P_T_CONST_P_DEEP_COPY && !defined(VECTOR_BOARD_P_T_CONST_P_OCOPY)
#define VECTOR_BOARD_P_T_CONST_P_OCOPY(A1,A2) vector_board_p_copy_err((A1),(A2))
#endif

#if CONST_VECTOR_BOARD_P_T_P_DEEP_COPY && !defined(CONST_VECTOR_BOARD_P_T_P_OCOPY)
#define CONST_VECTOR_BOARD_P_T_P_OCOPY(A1,A2) vector_board_p_copy_err((A1),(A2))
#endif

#if VECTORBOARDP_P_DEEP_COPY && !defined(VECTORBOARDP_P_OCOPY)
#define VECTORBOARDP_P_OCOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if VECTORBOARDP_CONST_P_DEEP_COPY && !defined(VECTORBOARDP_CONST_P_OCOPY)
#define VECTORBOARDP_CONST_P_OCOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if CONST_VECTORBOARDP_P_DEEP_COPY && !defined(CONST_VECTORBOARDP_P_OCOPY)
#define CONST_VECTORBOARDP_P_OCOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if VECTOR_BOARD_P_TP_DEEP_COPY && !defined(VECTOR_BOARD_P_TP_IFREE)
#define VECTOR_BOARD_P_TP_IFREE(A1) vector_board_p_delete((A1))
#endif

#if VECTOR_BOARD_P_T_CONSTP_DEEP_COPY && !defined(VECTOR_BOARD_P_T_CONSTP_IFREE)
#define VECTOR_BOARD_P_T_CONSTP_IFREE(A1) vector_board_p_delete((A1))
#endif

#if CONST_VECTOR_BOARD_P_TP_DEEP_COPY && !defined(CONST_VECTOR_BOARD_P_TP_IFREE)
#define CONST_VECTOR_BOARD_P_TP_IFREE(A1) vector_board_p_delete((A1))
#endif

#if VECTORBOARDPP_DEEP_COPY && !defined(VECTORBOARDPP_IFREE)
#define VECTORBOARDPP_IFREE(A1) delete((A1))
#endif

#if VECTORBOARDP_CONSTP_DEEP_COPY && !defined(VECTORBOARDP_CONSTP_IFREE)
#define VECTORBOARDP_CONSTP_IFREE(A1) delete((A1))
#endif

#if CONST_VECTORBOARDPP_DEEP_COPY && !defined(CONST_VECTORBOARDPP_IFREE)
#define CONST_VECTORBOARDPP_IFREE(A1) delete((A1))
#endif

#if VECTOR_BOARD_P_T_P_DEEP_COPY && !defined(VECTOR_BOARD_P_T_P_IFREE)
#define VECTOR_BOARD_P_T_P_IFREE(A1) vector_board_p_delete((A1))
#endif

#if VECTOR_BOARD_P_T_CONST_P_DEEP_COPY && !defined(VECTOR_BOARD_P_T_CONST_P_IFREE)
#define VECTOR_BOARD_P_T_CONST_P_IFREE(A1) vector_board_p_delete((A1))
#endif

#if CONST_VECTOR_BOARD_P_T_P_DEEP_COPY && !defined(CONST_VECTOR_BOARD_P_T_P_IFREE)
#define CONST_VECTOR_BOARD_P_T_P_IFREE(A1) vector_board_p_delete((A1))
#endif

#if VECTORBOARDP_P_DEEP_COPY && !defined(VECTORBOARDP_P_IFREE)
#define VECTORBOARDP_P_IFREE(A1) delete((A1))
#endif

#if VECTORBOARDP_CONST_P_DEEP_COPY && !defined(VECTORBOARDP_CONST_P_IFREE)
#define VECTORBOARDP_CONST_P_IFREE(A1) delete((A1))
#endif

#if CONST_VECTORBOARDP_P_DEEP_COPY && !defined(CONST_VECTORBOARDP_P_IFREE)
#define CONST_VECTORBOARDP_P_IFREE(A1) delete((A1))
#endif

#if VECTOR_BOARD_P_TP_DEEP_COPY && !defined(VECTOR_BOARD_P_TP_OFREE)
#define VECTOR_BOARD_P_TP_OFREE(A1) vector_board_p_delete((A1))
#endif

#if VECTOR_BOARD_P_T_CONSTP_DEEP_COPY && !defined(VECTOR_BOARD_P_T_CONSTP_OFREE)
#define VECTOR_BOARD_P_T_CONSTP_OFREE(A1) vector_board_p_delete((A1))
#endif

#if CONST_VECTOR_BOARD_P_TP_DEEP_COPY && !defined(CONST_VECTOR_BOARD_P_TP_OFREE)
#define CONST_VECTOR_BOARD_P_TP_OFREE(A1) vector_board_p_delete((A1))
#endif

#if VECTORBOARDPP_DEEP_COPY && !defined(VECTORBOARDPP_OFREE)
#define VECTORBOARDPP_OFREE(A1) delete((A1))
#endif

#if VECTORBOARDP_CONSTP_DEEP_COPY && !defined(VECTORBOARDP_CONSTP_OFREE)
#define VECTORBOARDP_CONSTP_OFREE(A1) delete((A1))
#endif

#if CONST_VECTORBOARDPP_DEEP_COPY && !defined(CONST_VECTORBOARDPP_OFREE)
#define CONST_VECTORBOARDPP_OFREE(A1) delete((A1))
#endif

#if VECTOR_BOARD_P_T_P_DEEP_COPY && !defined(VECTOR_BOARD_P_T_P_OFREE)
#define VECTOR_BOARD_P_T_P_OFREE(A1) vector_board_p_delete((A1))
#endif

#if VECTOR_BOARD_P_T_CONST_P_DEEP_COPY && !defined(VECTOR_BOARD_P_T_CONST_P_OFREE)
#define VECTOR_BOARD_P_T_CONST_P_OFREE(A1) vector_board_p_delete((A1))
#endif

#if CONST_VECTOR_BOARD_P_T_P_DEEP_COPY && !defined(CONST_VECTOR_BOARD_P_T_P_OFREE)
#define CONST_VECTOR_BOARD_P_T_P_OFREE(A1) vector_board_p_delete((A1))
#endif

#if VECTORBOARDP_P_DEEP_COPY && !defined(VECTORBOARDP_P_OFREE)
#define VECTORBOARDP_P_OFREE(A1) delete((A1))
#endif

#if VECTORBOARDP_CONST_P_DEEP_COPY && !defined(VECTORBOARDP_CONST_P_OFREE)
#define VECTORBOARDP_CONST_P_OFREE(A1) delete((A1))
#endif

#if CONST_VECTORBOARDP_P_DEEP_COPY && !defined(CONST_VECTORBOARDP_P_OFREE)
#define CONST_VECTORBOARDP_P_OFREE(A1) delete((A1))
#endif


#endif /* ERWINMM_VECTOR_BOARD_P_h */
