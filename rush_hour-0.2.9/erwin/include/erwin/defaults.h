/* -*- Mode: C -*- */
/* Author: Henrik Theiling
 * Description:
 *       The Erwin library for standard data structures and algorithms.
 *
 *       This file is included by the implementation of the data
 *       structures to get default definitions of important macros
 *       if the user did not provide them.  For many standard types,
 *       it is obvious how they should be hashed and compared.  This
 *       is defined here.
 *
 *       DO NOT INCLUDE THIS FILE IN YOUR APPLICATION!  THAT WILL BREAK
 *       THE #INCLUSION ORDER.
 *
 * @@Begin: Licencing and Copying@@
 * 
 * Copyright (c) Henrik Theiling
 * Licence Version 2, Special Version for Erwin.
 * 
 * The term 'this software' used in the following, additional to its
 * usual usage, also includes the instantiated source files generated by
 * tools of this package.
 * 
 * This software is provided 'as-is', without warranty of any kind,
 * express or implied.  In no event will the authors or copyright holders
 * be held liable for any damages arising from the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 * 1. The origin of this software must not be misrepresented; you must
 * not claim that you wrote the original software. If you use this
 * software in a product, an acknowledgment in the product documentation
 * would be appreciated.
 * 
 * 2. Altered source versions must be plainly marked as such, and must
 * not be misrepresented as being the original software.
 * 
 * 3. You must not use any of the names of the authors or copyright
 * holders of the original software for advertising or publicity
 * pertaining to distribution without specific, written prior permission.
 * 
 * 4. If you change this software and redistribute parts or all of it in
 * any form, you must make the source code of the altered version of this
 * software available.  As an exception, files that were generated by
 * tools of this package may be used freely, including modification.
 * 
 * 5. This notice must not be removed or altered from any source
 * distribution.
 * 
 * This licence is governed by the Laws of Germany.  Disputes shall be
 * settled by Saarbruecken City Court.
 * 
 * @@End: Licencing and Copying@@
 *
 */

#ifdef ERWIN_DEBUG_INCLUDE
#warning "Including defaults.h."
#endif

#ifndef ERWIN_DEFAULTS_H
#define ERWIN_DEFAULTS_H

#ifdef ERWIN_DEBUG_INCLUDE
#warning "First inclusion of defaults.h."
#endif

/* Provide hash values and comparisons for simple types.
 * Please note that there are no defaults for char *, since
 * you have to choose whether it is case sensitive. */

#ifndef ERWIN_DEFAULT_CMP
#define ERWIN_DEFAULT_CMP(X,Y)     (((X) < (Y)) ? -1 : (((X) > (Y)) ? 1 : 0))
#endif /* !defined ERWIN_DEFAULT_CMP */
#ifndef ERWIN_DEFAULT_EQUAL
#define ERWIN_DEFAULT_EQUAL(X,Y)   ((X) == (Y))
#endif /* !defined ERWIN_DEFAULT_EQUAL */

#ifndef ERWIN_INT_SUBCMP
#define ERWIN_INT_SUBCMP(X,Y)      (((int)(X)) - ((int)(Y)))
#endif /* !defined ERWIN_INT_SUBCMP */
   /* Only works if sizeof(X) < sizeof(int)! */

#ifndef ERWIN_DEFAULT_HASH_RAW
#define ERWIN_DEFAULT_HASH_RAW(X)  HASHVAL_CAST(X)
#endif /* !defined ERWIN_DEFAULT_HASH_RAW */

/* compat: */
#ifndef ERWIN_DEFAULT_HASHVAL
#define ERWIN_DEFAULT_HASHVAL ERWIN_DEFAULT_HASH_RAW
#endif /* !defined ERWIN_DEFAULT_HASHVAL */


/* Lexical comparisons: */

#ifndef ERWIN_LEXICAL_CMP
#define ERWIN_LEXICAL_CMP(RESULT,T,X,Y,V) \
           ((((RESULT) = T##_CMP((X),(Y))) != 0) ? (RESULT) : (V))
#endif /* !defined ERWIN_LEXICAL_CMP */
  /* For comparisons of structs.
   * RESULT is a local variable that may be used for computations.
   *
   * It would be better to declare the variable in a macro, but this is not possible
   * in standard C.
   */


/* Unrolled for some depth.  These also all need a local variable `result'! */
#ifndef ERWIN_LEXICAL_CMP1
#define ERWIN_LEXICAL_CMP1(R,T1,X1,Y1)      \
            ERWIN_LEXICAL_CMP(R, T1,X1,Y1, 0)
#endif /* !defined ERWIN_LEXICAL_CMP1 */

#ifndef ERWIN_LEXICAL_CMP2
#define ERWIN_LEXICAL_CMP2(R, T1,X1,Y1, T2,X2,Y2) \
            ERWIN_LEXICAL_CMP(R, T1,X1,Y1,         \
                ERWIN_LEXICAL_CMP1(R, T2,X2,Y2))
#endif /* !defined ERWIN_LEXICAL_CMP2 */
   /* usage:
    * int something_compare (something const *a, something const *b)
    * {
    *     int result;
    *     return ERWIN_LEXICAL_CMP2 (result,
    *               STRING_CASE, a->name, b->name,
    *               INT,         a->age,  b->age);
    * }
    */

#ifndef ERWIN_LEXICAL_CMP3
#define ERWIN_LEXICAL_CMP3(R, T1,X1,Y1, T2,X2,Y2, T3,X3,Y3) \
            ERWIN_LEXICAL_CMP(R, T1, X1, Y1,                 \
                ERWIN_LEXICAL_CMP2(R, T2,X2,Y2, T3,X3,Y3))
#endif /* !defined ERWIN_LEXICAL_CMP3 */

#ifndef ERWIN_LEXICAL_CMP4
#define ERWIN_LEXICAL_CMP4(R, T1,X1,Y1, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4) \
            ERWIN_LEXICAL_CMP(R, T1, X1, Y1,                           \
                ERWIN_LEXICAL_CMP3(R, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4))
#endif /* !defined ERWIN_LEXICAL_CMP4 */

#ifndef ERWIN_LEXICAL_CMP5
#define ERWIN_LEXICAL_CMP5(R, T1,X1,Y1, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5) \
            ERWIN_LEXICAL_CMP(R, T1,X1,Y1,                                       \
                ERWIN_LEXICAL_CMP4(R, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5))
#endif /* !defined ERWIN_LEXICAL_CMP5 */

#ifndef ERWIN_LEXICAL_CMP6
#define ERWIN_LEXICAL_CMP6(R, T1,X1,Y1, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5, T6,X6,Y6) \
            ERWIN_LEXICAL_CMP(R, T1,X1,Y1,                                                 \
                ERWIN_LEXICAL_CMP5(R, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5,              \
                                             T6,X6,Y6))
#endif /* !defined ERWIN_LEXICAL_CMP6 */

#ifndef ERWIN_LEXICAL_CMP7
#define ERWIN_LEXICAL_CMP7(R, T1,X1,Y1, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5, \
                                     T6,X6,Y6, T7,X7,Y7)                                \
            ERWIN_LEXICAL_CMP(R, T1,X1, Y1,                                      \
                ERWIN_LEXICAL_CMP6(R, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5,    \
                                             T6,X6,Y6, T7,X7,Y7))
#endif /* !defined ERWIN_LEXICAL_CMP7 */

#ifndef ERWIN_LEXICAL_CMP8
#define ERWIN_LEXICAL_CMP8(R, T1,X1,Y1, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5, \
                                     T6,X6,Y6, T7,X7,Y7, T8,X8,Y8)                      \
            ERWIN_LEXICAL_CMP(R, T1, X1, Y1,                                     \
                ERWIN_LEXICAL_CMP7(R, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5,    \
                                             T6,X6,Y6, T7,X7,Y7, T8,X8,Y8))
#endif /* !defined ERWIN_LEXICAL_CMP8 */

#ifndef ERWIN_LEXICAL_CMP9
#define ERWIN_LEXICAL_CMP9(R, T1,X1,Y1, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5, \
                                     T6,X6,Y6, T7,X7,Y7, T8,X8,Y8, T9,X9,Y9)            \
            ERWIN_LEXICAL_CMP(R, T1, X1, Y1,                                     \
                ERWIN_LEXICAL_CMP8(R, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5,    \
                                             T6,X6,Y6, T7,X7,Y7, T8,X8,Y8, T9,X9,Y9))
#endif /* !defined ERWIN_LEXICAL_CMP9 */

/* ********************************************************************** */

#ifndef ERWIN_LEXICAL_CMP_THIS
#define ERWIN_LEXICAL_CMP_THIS(R,O,T1,M1,V)           \
            ERWIN_LEXICAL_CMP(R, T1, M1, (O).M1, V)
#endif /* !defined ERWIN_LEXICAL_CMP_THIS */
  /* For comparisons of classes */

/* unrolled: */
#ifndef ERWIN_LEXICAL_CMP_THIS1
#define ERWIN_LEXICAL_CMP_THIS1(R,O,T1,M1)   \
            ERWIN_LEXICAL_CMP1(R, T1, M1, (O).M1)
#endif /* !defined ERWIN_LEXICAL_CMP_THIS1 */

#ifndef ERWIN_LEXICAL_CMP_THIS2
#define ERWIN_LEXICAL_CMP_THIS2(R,O,T1,M1,T2,M2) \
            ERWIN_LEXICAL_CMP2(R, T1,M1,(O).M1, T2,M2,(O).M2)
#endif /* !defined ERWIN_LEXICAL_CMP_THIS2 */

#ifndef ERWIN_LEXICAL_CMP_THIS3
#define ERWIN_LEXICAL_CMP_THIS3(R,O,T1,M1,T2,M2,T3,M3) \
            ERWIN_LEXICAL_CMP3(                         \
                R, T1,M1,(O).M1, T2,M2,(O).M2, T3,M3,(O).M3)
#endif /* !defined ERWIN_LEXICAL_CMP_THIS3 */

#ifndef ERWIN_LEXICAL_CMP_THIS4
#define ERWIN_LEXICAL_CMP_THIS4(R,O,T1,M1,T2,M2,T3,M3,T4,M4)       \
            ERWIN_LEXICAL_CMP4(                                     \
                R, T1,M1,(O).M1, T2,M2,(O).M2, T3,M3,(O).M3, T4,M4,(O).M4)
#endif /* !defined ERWIN_LEXICAL_CMP_THIS4 */

#ifndef ERWIN_LEXICAL_CMP_THIS5
#define ERWIN_LEXICAL_CMP_THIS5(R,O,T1,M1,T2,M2,T3,M3,T4,M4,T5,M5)               \
            ERWIN_LEXICAL_CMP5(                                                   \
                R, T1,M1,(O).M1, T2,M2,(O).M2, T3,M3,(O).M3, T4,M4,(O).M4, T5,M5,(O).M5)
#endif /* !defined ERWIN_LEXICAL_CMP_THIS5 */

#ifndef ERWIN_LEXICAL_CMP_THIS6
#define ERWIN_LEXICAL_CMP_THIS6(R,O,T1,M1,T2,M2,T3,M3,T4,M4,T5,M5,T6,M6)         \
            ERWIN_LEXICAL_CMP6(                                                   \
                R, T1,M1,(O).M1, T2,M2,(O).M2, T3,M3,(O).M3, T4,M4,(O).M4, T5,M5,(O).M5, \
                T6,M6,(O).M6)
#endif /* !defined ERWIN_LEXICAL_CMP_THIS6 */

#ifndef ERWIN_LEXICAL_CMP_THIS7
#define ERWIN_LEXICAL_CMP_THIS7(R,O,T1,M1,T2,M2,T3,M3,T4,M4,T5,M5,T6,M6,T7,M7)   \
            ERWIN_LEXICAL_CMP7(                                                   \
                R, T1,M1,(O).M1, T2,M2,(O).M2, T3,M3,(O).M3, T4,M4,(O).M4, T5,M5,(O).M5, \
                T6,M6,(O).M6, T7,M7,(O).M7)
#endif /* !defined ERWIN_LEXICAL_CMP_THIS7 */

#ifndef ERWIN_LEXICAL_CMP_THIS8
#define ERWIN_LEXICAL_CMP_THIS8(R,O,T1,M1,T2,M2,T3,M3,T4,M4,T5,M5,T6,M6,T7,M7,T8,M8) \
            ERWIN_LEXICAL_CMP8(                                                       \
                R, T1,M1,(O).M1, T2,M2,(O).M2, T3,M3,(O).M3, T4,M4,(O).M4, T5,M5,(O).M5,     \
                T6,M6,(O).M6, T7,M7,(O).M7, T8,M8,(O).M8)
#endif /* !defined ERWIN_LEXICAL_CMP_THIS8 */

#ifndef ERWIN_LEXICAL_CMP_THIS9
#define ERWIN_LEXICAL_CMP_THIS9(R,O,T1,M1,T2,M2,T3,M3,T4,M4,T5,M5,T6,M6,T7,M7,T8,M8,T9,M9) \
            ERWIN_LEXICAL_CMP9(                                                             \
                R, T1,M1,(O).M1, T2,M2,(O).M2, T3,M3,(O).M3, T4,M4,(O).M4, T5,M5,(O).M5,           \
                T6,M6,(O).M6, T7,M7,(O).M7, T8,M8,(O).M8, T9,M9,(O).M9)
#endif /* !defined ERWIN_LEXICAL_CMP_THIS9 */

/* ********************************************************************** */

#ifndef ERWIN_WRAP_NULL_CMP
#define ERWIN_WRAP_NULL_CMP(X,Y,V) \
          ((X) == NULL ? ((Y) == NULL ? 0 : -1) : ((Y) == NULL ? 1 : (V)))
#endif /* !defined ERWIN_WRAP_NULL_CMP */
  /* This checks X and Y to be non-zero before evaluating the real
   * comparison value V.  NULL pointers are assumed to be smaller than
   * anything else.
   *
   * This is the table of values:
   *      X         Y          result
   *      NULL      NULL       0
   *      NULL      non-NULL   -1
   *      non-NULL  NULL       +1
   *      non-NULL  non-NULL   V
   */

/* EQUAL */
/* _EQUAL: mostly redundant, but:
 * The definitions of EQUAL are for compilers that do not understand and optimise
 * CMP(X,Y) == 0, and for unsigned types that generate a warning when compared
 * with 0 (since x < 0 is  always false).
 *
 * If _CMP is defined but not _EQUAL, we must use _CMP instead.
 *
 * Unfortunately, this is now very long. :-(
 */

#ifndef ERWIN_POINTER_EQUAL
#define ERWIN_POINTER_EQUAL(X,Y)            ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined ERWIN_POINTER_EQUAL */

#ifdef ERWIN_INT_CMP
#ifndef ERWIN_INT_EQUAL
#define ERWIN_INT_EQUAL(X,Y)                (ERWIN_INT_CMP(X,Y) == 0)
#endif /* !defined ERWIN_INT_EQUAL */
#endif /* defined ERWIN_INT_CMP */
#ifndef ERWIN_INT_EQUAL
#define ERWIN_INT_EQUAL(X,Y)                ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined ERWIN_INT_EQUAL */

#ifdef BOOL_CMP
#ifndef BOOL_EQUAL
#define BOOL_EQUAL(X,Y)                     (BOOL_CMP(X,Y) == 0)
#endif /* !defined BOOL_EQUAL */
#endif /* defined BOOL_CMP */
#ifndef BOOL_EQUAL
#define BOOL_EQUAL(X,Y)                     ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined BOOL_EQUAL */

/* This type used to be called ERWIN_BOOL.  Now it is ERWIN_BOOL. */
#ifdef ERWIN_BOOL_CMP
#ifndef ERWIN_BOOL_EQUAL
#define ERWIN_BOOL_EQUAL(X,Y)        (ERWIN_BOOL_CMP(X,Y) == 0)
#endif /* !defined ERWIN_BOOL_EQUAL */
#endif /* defined ERWIN_BOOL_CMP */
#ifndef ERWIN_BOOL_EQUAL
#define ERWIN_BOOL_EQUAL             BOOL_EQUAL
#endif /* !defined ERWIN_BOOL_EQUAL */

#ifdef ERWIN_BOOL_CMP
#ifndef ERWIN_BOOL_EQUAL
#define ERWIN_BOOL_EQUAL(X,Y)               (ERWIN_BOOL_CMP(X,Y) == 0)
#endif /* !defined ERWIN_BOOL_EQUAL */
#endif /* defined ERWIN_BOOL_CMP */
#ifndef ERWIN_BOOL_EQUAL
#define ERWIN_BOOL_EQUAL                    BOOL_EQUAL
#endif /* !defined ERWIN_BOOL_EQUAL */

#ifdef CHAR_CMP
#ifndef CHAR_EQUAL
#define CHAR_EQUAL(X,Y)                     (CHAR_CMP(X,Y) == 0)
#endif /* !defined CHAR_EQUAL */
#endif /* defined CHAR_CMP */
#ifndef CHAR_EQUAL
#define CHAR_EQUAL(X,Y)                     ERWIN_INT_EQUAL(X,Y)
#endif /* !defined CHAR_EQUAL */

#ifdef UNSIGNED_CHAR_CMP
#ifndef UNSIGNED_CHAR_EQUAL
#define UNSIGNED_CHAR_EQUAL(X,Y)            (UNSIGNED_CHAR_CMP(X,Y) == 0)
#endif /* !defined UNSIGNED_CHAR_EQUAL */
#endif /* defined UNSIGNED_CHAR_CMP */
#ifndef UNSIGNED_CHAR_EQUAL
#define UNSIGNED_CHAR_EQUAL                 CHAR_EQUAL
#endif /* !defined UNSIGNED_CHAR_EQUAL */

#ifdef SIGNED_CHAR_CMP
#ifndef SIGNED_CHAR_EQUAL
#define SIGNED_CHAR_EQUAL(X,Y)              (SIGNED_CHAR_CMP(X,Y) == 0)
#endif /* !defined SIGNED_CHAR_EQUAL */
#endif /* defined SIGNED_CHAR_CMP */
#ifndef SIGNED_CHAR_EQUAL
#define SIGNED_CHAR_EQUAL                   CHAR_EQUAL
#endif /* !defined SIGNED_CHAR_EQUAL */

#ifdef CHAR_CASE_CMP
#ifndef CHAR_CASE_EQUAL
#define CHAR_CASE_EQUAL(X,Y)                (CHAR_CASE_CMP(X,Y) == 0)
#endif /* !defined CHAR_CASE_EQUAL */
#endif /* defined CHAR_CASE_CMP */
#ifndef CHAR_CASE_EQUAL
#define CHAR_CASE_EQUAL(X,Y)  \
                    CHAR_EQUAL(char_to_lower(X),char_to_lower(Y))
#endif /* !defined CHAR_CASE_EQUAL */

#ifdef UNSIGNED_CHAR_CASE_CMP
#ifndef UNSIGNED_CHAR_CASE_EQUAL
#define UNSIGNED_CHAR_CASE_EQUAL(X,Y)       (UNSIGNED_CHAR_CASE_CMP(X,Y) == 0)
#endif /* !defined UNSIGNED_CHAR_CASE_EQUAL */
#endif /* defined UNSIGNED_CHAR_CASE_CMP */
#ifndef UNSIGNED_CHAR_CASE_EQUAL
#define UNSIGNED_CHAR_CASE_EQUAL            CHAR_CASE_EQUAL
#endif /* !defined UNSIGNED_CHAR_CASE_EQUAL */

#ifdef SIGNED_CHAR_CASE_CMP
#ifndef SIGNED_CHAR_CASE_EQUAL
#define SIGNED_CHAR_CASE_EQUAL(X,Y)         (SIGNED_CHAR_CASE_CMP(X,Y) == 0)
#endif /* !defined SIGNED_CHAR_CASE_EQUAL */
#endif /* defined SIGNED_CHAR_CASE_CMP */
#ifndef SIGNED_CHAR_CASE_EQUAL
#define SIGNED_CHAR_CASE_EQUAL              CHAR_CASE_EQUAL
#endif /* !defined SIGNED_CHAR_CASE_EQUAL */

#ifdef SHORT_CMP
#ifndef SHORT_EQUAL
#define SHORT_EQUAL(X,Y)                    (SHORT_CMP(X,Y) == 0)
#endif /* !defined SHORT_EQUAL */
#endif /* defined SHORT_CMP */
#ifndef SHORT_EQUAL
#define SHORT_EQUAL(X,Y)                    ERWIN_INT_EQUAL(X,Y)
#endif /* !defined SHORT_EQUAL */

#ifdef SHORT_INT_CMP
#ifndef SHORT_INT_EQUAL
#define SHORT_INT_EQUAL(X,Y)                (SHORT_INT_CMP(X,Y) == 0)
#endif /* !defined SHORT_INT_EQUAL */
#endif /* defined SHORT_INT_CMP */
#ifndef SHORT_INT_EQUAL
#define SHORT_INT_EQUAL                     SHORT_EQUAL
#endif /* !defined SHORT_INT_EQUAL */

#ifdef UNSIGNED_SHORT_CMP
#ifndef UNSIGNED_SHORT_EQUAL
#define UNSIGNED_SHORT_EQUAL(X,Y)           (UNSIGNED_SHORT_CMP(X,Y) == 0)
#endif /* !defined UNSIGNED_SHORT_EQUAL */
#endif /* defined UNSIGNED_SHORT_CMP */
#ifndef UNSIGNED_SHORT_EQUAL
#define UNSIGNED_SHORT_EQUAL                SHORT_EQUAL
#endif /* !defined UNSIGNED_SHORT_EQUAL */

#ifdef UNSIGNED_SHORT_INT_CMP
#ifndef UNSIGNED_SHORT_INT_EQUAL
#define UNSIGNED_SHORT_INT_EQUAL(X,Y)       (UNSIGNED_SHORT_INT_CMP(X,Y) == 0)
#endif /* !defined UNSIGNED_SHORT_INT_EQUAL */
#endif /* defined UNSIGNED_SHORT_INT_CMP */
#ifndef UNSIGNED_SHORT_INT_EQUAL
#define UNSIGNED_SHORT_INT_EQUAL            SHORT_EQUAL
#endif /* !defined UNSIGNED_SHORT_INT_EQUAL */

#ifdef INT_CMP
#ifndef INT_EQUAL
#define INT_EQUAL(X,Y)                      (INT_CMP(X,Y) == 0)
#endif /* !defined INT_EQUAL */
#endif /* defined INT_CMP */
#ifndef INT_EQUAL
#define INT_EQUAL(X,Y)                      ERWIN_INT_EQUAL(X,Y)
#endif /* !defined INT_EQUAL */

#ifdef UNSIGNED_CMP
#ifndef UNSIGNED_EQUAL
#define UNSIGNED_EQUAL(X,Y)                 (UNSIGNED_CMP(X,Y) == 0)
#endif /* !defined UNSIGNED_EQUAL */
#endif /* defined UNSIGNED_CMP */
#ifndef UNSIGNED_EQUAL
#define UNSIGNED_EQUAL                      INT_EQUAL
#endif /* !defined UNSIGNED_EQUAL */

#ifdef UNSIGNED_INT_CMP
#ifndef UNSIGNED_INT_EQUAL
#define UNSIGNED_INT_EQUAL(X,Y)             (UNSIGNED_INT_CMP(X,Y) == 0)
#endif /* !defined UNSIGNED_INT_EQUAL */
#endif /* defined UNSIGNED_INT_CMP */
#ifndef UNSIGNED_INT_EQUAL
#define UNSIGNED_INT_EQUAL                  INT_EQUAL
#endif /* !defined UNSIGNED_INT_EQUAL */

#ifdef LONG_CMP
#ifndef LONG_EQUAL
#define LONG_EQUAL(X,Y)                     (LONG_CMP(X,Y) == 0)
#endif /* !defined LONG_EQUAL */
#endif /* defined LONG_CMP */
#ifndef LONG_EQUAL
#define LONG_EQUAL(X,Y)                     ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined LONG_EQUAL */

#ifdef LONG_INT_CMP
#ifndef LONG_INT_EQUAL
#define LONG_INT_EQUAL(X,Y)                 (LONG_INT_CMP(X,Y) == 0)
#endif /* !defined LONG_INT_EQUAL */
#endif /* defined LONG_INT_CMP */
#ifndef LONG_INT_EQUAL
#define LONG_INT_EQUAL                      LONG_EQUAL
#endif /* !defined LONG_INT_EQUAL */

#ifdef UNSIGNED_LONG_CMP
#ifndef UNSIGNED_LONG_EQUAL
#define UNSIGNED_LONG_EQUAL(X,Y)            (UNSIGNED_LONG_CMP(X,Y) == 0)
#endif /* !defined UNSIGNED_LONG_EQUAL */
#endif /* defined UNSIGNED_LONG_CMP */
#ifndef UNSIGNED_LONG_EQUAL
#define UNSIGNED_LONG_EQUAL                 LONG_EQUAL
#endif /* !defined UNSIGNED_LONG_EQUAL */

#ifdef UNSIGNED_LONG_INT_CMP
#ifndef UNSIGNED_LONG_INT_EQUAL
#define UNSIGNED_LONG_INT_EQUAL(X,Y)        (UNSIGNED_LONG_INT_CMP(X,Y) == 0)
#endif /* !defined UNSIGNED_LONG_INT_EQUAL */
#endif /* defined UNSIGNED_LONG_INT_CMP */
#ifndef UNSIGNED_LONG_INT_EQUAL
#define UNSIGNED_LONG_INT_EQUAL             LONG_EQUAL
#endif /* !defined UNSIGNED_LONG_INT_EQUAL */

#ifdef ERWIN_LONG_LONG_CMP
#ifndef ERWIN_LONG_LONG_EQUAL
#define ERWIN_LONG_LONG_EQUAL(X,Y)          (ERWIN_LONG_LONG_CMP(X,Y) == 0)
#endif /* !defined ERWIN_LONG_LONG_EQUAL */
#endif /* defined ERWIN_LONG_LONG_CMP */
#ifndef ERWIN_LONG_LONG_EQUAL
#define ERWIN_LONG_LONG_EQUAL(X,Y)          ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined ERWIN_LONG_LONG_EQUAL */

#ifdef ERWIN_UNSIGNED_LONG_LONG_CMP
#ifndef ERWIN_UNSIGNED_LONG_LONG_EQUAL
#define ERWIN_UNSIGNED_LONG_LONG_EQUAL(X,Y) (ERWIN_UNSIGNED_LONG_LONG_CMP(X,Y)==0)
#endif /* !defined ERWIN_UNSIGNED_LONG_LONG_EQUAL */
#endif /* defined ERWIN_UNSIGNED_LONG_LONG_CMP */
#ifndef ERWIN_UNSIGNED_LONG_LONG_EQUAL
#define ERWIN_UNSIGNED_LONG_LONG_EQUAL      ERWIN_LONG_LONG_EQUAL
#endif /* !defined ERWIN_UNSIGNED_LONG_LONG_EQUAL */

#ifdef ERWIN_U8_CMP
#ifndef ERWIN_U8_EQUAL
#define ERWIN_U8_EQUAL(X,Y)                 (ERWIN_U8_CMP(X,Y) == 0)
#endif /* !defined ERWIN_U8_EQUAL */
#endif /* defined ERWIN_U8_CMP */
#ifndef ERWIN_U8_EQUAL
#define ERWIN_U8_EQUAL                      ERWIN_DEFAULT_EQUAL
#endif /* !defined ERWIN_U8_EQUAL */

#ifdef ERWIN_U16_CMP
#ifndef ERWIN_U16_EQUAL
#define ERWIN_U16_EQUAL(X,Y)                (ERWIN_U16_CMP(X,Y) == 0)
#endif /* !defined ERWIN_U16_EQUAL */
#endif /* defined ERWIN_U16_CMP */
#ifndef ERWIN_U16_EQUAL
#define ERWIN_U16_EQUAL                     ERWIN_DEFAULT_EQUAL
#endif /* !defined ERWIN_U16_EQUAL */

#ifdef ERWIN_U32_CMP
#ifndef ERWIN_U32_EQUAL
#define ERWIN_U32_EQUAL(X,Y)                (ERWIN_U32_CMP(X,Y) == 0)
#endif /* !defined ERWIN_U32_EQUAL */
#endif /* defined ERWIN_U32_CMP */
#ifndef ERWIN_U32_EQUAL
#define ERWIN_U32_EQUAL                     ERWIN_DEFAULT_EQUAL
#endif /* !defined ERWIN_U32_EQUAL */

#ifdef ERWIN_U64_CMP
#ifndef ERWIN_U64_EQUAL
#define ERWIN_U64_EQUAL(X,Y)                (ERWIN_U64_CMP(X,Y) == 0)
#endif /* !defined ERWIN_U64_EQUAL */
#endif /* defined ERWIN_U64_CMP */
#ifndef ERWIN_U64_EQUAL
#define ERWIN_U64_EQUAL                     ERWIN_DEFAULT_EQUAL
#endif /* !defined ERWIN_U64_EQUAL */

#ifdef ERWIN_S8_CMP
#ifndef ERWIN_S8_EQUAL
#define ERWIN_S8_EQUAL(X,Y)                 (ERWIN_S8_CMP(X,Y) == 0)
#endif /* !defined ERWIN_S8_EQUAL */
#endif /* defined ERWIN_S8_CMP */
#ifndef ERWIN_S8_EQUAL
#define ERWIN_S8_EQUAL                      ERWIN_DEFAULT_EQUAL
#endif /* !defined ERWIN_S8_EQUAL */

#ifdef ERWIN_S16_CMP
#ifndef ERWIN_S16_EQUAL
#define ERWIN_S16_EQUAL(X,Y)                (ERWIN_S16_CMP(X,Y) == 0)
#endif /* !defined ERWIN_S16_EQUAL */
#endif /* defined ERWIN_S16_CMP */
#ifndef ERWIN_S16_EQUAL
#define ERWIN_S16_EQUAL                     ERWIN_DEFAULT_EQUAL
#endif /* !defined ERWIN_S16_EQUAL */

#ifdef ERWIN_S32_CMP
#ifndef ERWIN_S32_EQUAL
#define ERWIN_S32_EQUAL(X,Y)                (ERWIN_S32_CMP(X,Y) == 0)
#endif /* !defined ERWIN_S32_EQUAL */
#endif /* defined ERWIN_S32_CMP */
#ifndef ERWIN_S32_EQUAL
#define ERWIN_S32_EQUAL                     ERWIN_DEFAULT_EQUAL
#endif /* !defined ERWIN_S32_EQUAL */

#ifdef ERWIN_S64_CMP
#ifndef ERWIN_S64_EQUAL
#define ERWIN_S64_EQUAL(X,Y)                (ERWIN_S64_CMP(X,Y) == 0)
#endif /* !defined ERWIN_S64_EQUAL */
#endif /* defined ERWIN_S64_CMP */
#ifndef ERWIN_S64_EQUAL
#define ERWIN_S64_EQUAL                     ERWIN_DEFAULT_EQUAL
#endif /* !defined ERWIN_S64_EQUAL */

#ifdef FLOAT_CMP
#ifndef FLOAT_EQUAL
#define FLOAT_EQUAL(X,Y)                    (FLOAT_CMP(X,Y) == 0)
#endif /* !defined FLOAT_EQUAL */
#endif /* defined FLOAT_CMP */
#ifndef FLOAT_EQUAL
#define FLOAT_EQUAL(X,Y)                    ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined FLOAT_EQUAL */

#ifdef DOUBLE_CMP
#ifndef DOUBLE_EQUAL
#define DOUBLE_EQUAL(X,Y)                   (DOUBLE_CMP(X,Y) == 0)
#endif /* !defined DOUBLE_EQUAL */
#endif /* defined DOUBLE_CMP */
#ifndef DOUBLE_EQUAL
#define DOUBLE_EQUAL(X,Y)                   ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined DOUBLE_EQUAL */

#ifdef LONG_DOUBLE_CMP
#ifndef LONG_DOUBLE_EQUAL
#define LONG_DOUBLE_EQUAL(X,Y)              (LONG_DOUBLE_CMP(X,Y) == 0)
#endif /* !defined LONG_DOUBLE_EQUAL */
#endif /* defined LONG_DOUBLE_CMP */
#ifndef LONG_DOUBLE_EQUAL
#define LONG_DOUBLE_EQUAL(X,Y)              ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined LONG_DOUBLE_EQUAL */

/* equal for void*: */
#ifdef VOIDP_CMP
#ifndef VOIDP_EQUAL
#define VOIDP_EQUAL(X,Y)                    (VOIDP_CMP(X,Y) == 0)
#endif /* !defined VOIDP_EQUAL */
#endif /* defined VOIDP_CMP */
#ifndef VOIDP_EQUAL
#define VOIDP_EQUAL(X,Y)                    ERWIN_POINTER_EQUAL(X,Y)
#endif /* !defined VOIDP_EQUAL */

#ifdef VOID_P_CMP
#ifndef VOID_P_EQUAL
#define VOID_P_EQUAL(X,Y)                   (VOID_P_CMP(X,Y) == 0)
#endif /* !defined VOID_P_EQUAL */
#endif /* defined VOID_P_CMP */
#ifndef VOID_P_EQUAL
#define VOID_P_EQUAL                        VOIDP_EQUAL
#endif /* !defined VOID_P_EQUAL */

#ifdef CONST_VOIDP_CMP
#ifndef CONST_VOIDP_EQUAL
#define CONST_VOIDP_EQUAL(X,Y)              (CONST_VOIDP_CMP(X,Y) == 0)
#endif /* !defined CONST_VOIDP_EQUAL */
#endif /* defined CONST_VOIDP_CMP */
#ifndef CONST_VOIDP_EQUAL
#define CONST_VOIDP_EQUAL                   VOIDP_EQUAL
#endif /* !defined CONST_VOIDP_EQUAL */

#ifdef CONST_VOID_P_CMP
#ifndef CONST_VOID_P_EQUAL
#define CONST_VOID_P_EQUAL(X,Y)             (CONST_VOID_P_CMP(X,Y) == 0)
#endif /* !defined CONST_VOID_P_EQUAL */
#endif /* defined CONST_VOID_P_CMP */
#ifndef CONST_VOID_P_EQUAL
#define CONST_VOID_P_EQUAL                  VOIDP_EQUAL
#endif /* !defined CONST_VOID_P_EQUAL */

#ifdef VOIDP_CONST_CMP
#ifndef VOIDP_CONST_EQUAL
#define VOIDP_CONST_EQUAL(X,Y)              (VOIDP_CONST_CMP(X,Y) == 0)
#endif /* !defined VOIDP_CONST_EQUAL */
#endif /* defined VOIDP_CONST_CMP */
#ifndef VOIDP_CONST_EQUAL
#define VOIDP_CONST_EQUAL                   VOIDP_EQUAL
#endif /* !defined VOIDP_CONST_EQUAL */

#ifdef VOID_CONST_P_CMP
#ifndef VOID_CONST_P_EQUAL
#define VOID_CONST_P_EQUAL(X,Y)             (VOID_CONST_P_CMP(X,Y) == 0)
#endif /* !defined VOID_CONST_P_EQUAL */
#endif /* defined VOID_CONST_P_CMP */
#ifndef VOID_CONST_P_EQUAL
#define VOID_CONST_P_EQUAL                  VOIDP_EQUAL
#endif /* !defined VOID_CONST_P_EQUAL */

/* ********************************************************************** */
/* CMP */
#ifndef ERWIN_POINTER_CMP
#define ERWIN_POINTER_CMP(X,Y)              PTRINT_CMP( \
                                                        (ERWIN_PTRINT)(X),(ERWIN_PTRINT)(Y))
#endif /* !defined ERWIN_POINTER_CMP */

/* For special types: */
#ifndef ERWIN_INT_CMP
#define ERWIN_INT_CMP                       ERWIN_DEFAULT_CMP
#endif /* !defined ERWIN_INT_CMP */
#ifndef ERWIN_UNSIGNED_CMP
#define ERWIN_UNSIGNED_CMP                  ERWIN_DEFAULT_CMP
#endif /* !defined ERWIN_UNSIGNED_CMP */

#ifndef BOOL_CMP
#define BOOL_CMP                            ERWIN_INT_SUBCMP
#endif /* !defined BOOL_CMP */
/* This type used to be called ERWIN_BOOL.  Now it is ERWIN_BOOL. */
#ifndef ERWIN_BOOL_CMP
#define ERWIN_BOOL_CMP               BOOL_CMP
#endif /* !defined ERWIN_BOOL_CMP */
#ifndef ERWIN_BOOL_CMP
#define ERWIN_BOOL_CMP                      BOOL_CMP
#endif /* !defined ERWIN_BOOL_CMP */

#ifndef CHAR_CMP
#define CHAR_CMP                            ERWIN_INT_SUBCMP
#endif /* !defined CHAR_CMP */
#ifndef UNSIGNED_CHAR_CMP
#define UNSIGNED_CHAR_CMP                   ERWIN_INT_SUBCMP
#endif /* !defined UNSIGNED_CHAR_CMP */
#ifndef SIGNED_CHAR_CMP
#define SIGNED_CHAR_CMP                     ERWIN_INT_SUBCMP
#endif /* !defined SIGNED_CHAR_CMP */

#ifndef CHAR_CASE_CMP
#define CHAR_CASE_CMP(X,Y)  \
                    CHAR_CMP(char_to_lower(X),char_to_lower(Y))
#endif /* !defined CHAR_CASE_CMP */
#ifndef UNSIGNED_CHAR_CASE_CMP
#define UNSIGNED_CHAR_CASE_CMP              CHAR_CASE_CMP
#endif /* !defined UNSIGNED_CHAR_CASE_CMP */
#ifndef SIGNED_CHAR_CASE_CMP
#define SIGNED_CHAR_CASE_CMP                CHAR_CASE_CMP
#endif /* !defined SIGNED_CHAR_CASE_CMP */

#ifndef SHORT_CMP
#define SHORT_CMP                           ERWIN_INT_SUBCMP
#endif /* !defined SHORT_CMP */
#ifndef UNSIGNED_SHORT_CMP
#define UNSIGNED_SHORT_CMP                  ERWIN_INT_SUBCMP
#endif /* !defined UNSIGNED_SHORT_CMP */
#ifndef SHORT_INT_CMP
#define SHORT_INT_CMP                       ERWIN_SHORT_CMP
#endif /* !defined SHORT_INT_CMP */
#ifndef UNSIGNED_SHORT_INT_CMP
#define UNSIGNED_SHORT_INT_CMP              ERWIN_UNSIGNED_SHORT_CMP
#endif /* !defined UNSIGNED_SHORT_INT_CMP */

#ifndef INT_CMP
#define INT_CMP                             ERWIN_INT_CMP
#endif /* !defined INT_CMP */
#ifndef UNSIGNED_CMP
#define UNSIGNED_CMP                        ERWIN_UNSIGNED_CMP
#endif /* !defined UNSIGNED_CMP */
#ifndef UNSIGNED_INT_CMP
#define UNSIGNED_INT_CMP                    UNSIGNED_CMP
#endif /* !defined UNSIGNED_INT_CMP */

#ifndef LONG_CMP
#define LONG_CMP                            ERWIN_DEFAULT_CMP
#endif /* !defined LONG_CMP */
#ifndef UNSIGNED_LONG_CMP
#define UNSIGNED_LONG_CMP                   ERWIN_DEFAULT_CMP
#endif /* !defined UNSIGNED_LONG_CMP */
#ifndef LONG_INT_CMP
#define LONG_INT_CMP                        LONG_CMP
#endif /* !defined LONG_INT_CMP */
#ifndef UNSIGNED_LONG_INT_CMP
#define UNSIGNED_LONG_INT_CMP               UNSIGNED_LONG_CMP
#endif /* !defined UNSIGNED_LONG_INT_CMP */

#ifndef ERWIN_LONG_LONG_CMP
#define ERWIN_LONG_LONG_CMP                 ERWIN_DEFAULT_CMP
#endif /* !defined ERWIN_LONG_LONG_CMP */
#ifndef ERWIN_UNSIGNED_LONG_LONG_CMP
#define ERWIN_UNSIGNED_LONG_LONG_CMP        ERWIN_DEFAULT_CMP
#endif /* !defined ERWIN_UNSIGNED_LONG_LONG_CMP */

#ifndef ERWIN_S8_CMP
#define ERWIN_S8_CMP                        ERWIN_SIGNED_CHAR_CMP
#endif /* !defined ERWIN_S8_CMP */
#ifndef ERWIN_U8_CMP
#define ERWIN_U8_CMP                        ERWIN_UNSIGNED_CHAR_CMP
#endif /* !defined ERWIN_U8_CMP */

#ifndef ERWIN_S16_CMP
#define ERWIN_S16_CMP                       ERWIN_SHORT_CMP
#endif /* !defined ERWIN_S16_CMP */
#ifndef ERWIN_U16_CMP
#define ERWIN_U16_CMP                       ERWIN_UNSIGNED_SHORT_CMP
#endif /* !defined ERWIN_U16_CMP */

#ifndef ERWIN_S32_CMP
#define ERWIN_S32_CMP                       ERWIN_DEFAULT_CMP
#endif /* !defined ERWIN_S32_CMP */
#ifndef ERWIN_U32_CMP
#define ERWIN_U32_CMP                       ERWIN_DEFAULT_CMP
#endif /* !defined ERWIN_U32_CMP */

#ifndef ERWIN_S64_CMP
#define ERWIN_S64_CMP                       ERWIN_DEFAULT_CMP
#endif /* !defined ERWIN_S64_CMP */
#ifndef ERWIN_U64_CMP
#define ERWIN_U64_CMP                       ERWIN_DEFAULT_CMP
#endif /* !defined ERWIN_U64_CMP */

#ifndef FLOAT_CMP
#define FLOAT_CMP                           ERWIN_DEFAULT_CMP
#endif /* !defined FLOAT_CMP */

#ifndef DOUBLE_CMP
#define DOUBLE_CMP                          ERWIN_DEFAULT_CMP
#endif /* !defined DOUBLE_CMP */

#ifndef LONG_DOUBLE_CMP
#define LONG_DOUBLE_CMP                     ERWIN_DEFAULT_CMP
#endif /* !defined LONG_DOUBLE_CMP */

#ifndef STRING_CMP
#define STRING_CMP                          string_cmp
#endif /* !defined STRING_CMP */

#ifndef STRING_CASE_CMP
#define STRING_CASE_CMP                     string_case_cmp
#endif /* !defined STRING_CASE_CMP */

/* cmp for void*: */
#ifndef VOIDP_CMP
#define VOIDP_CMP                           ERWIN_POINTER_CMP
#endif /* !defined VOIDP_CMP */
#ifndef VOID_P_CMP
#define VOID_P_CMP                          VOIDP_CMP
#endif /* !defined VOID_P_CMP */
#ifndef CONST_VOIDP_CMP
#define CONST_VOIDP_CMP                     VOIDP_CMP
#endif /* !defined CONST_VOIDP_CMP */
#ifndef CONST_VOID_P_CMP
#define CONST_VOID_P_CMP                    VOIDP_CMP
#endif /* !defined CONST_VOID_P_CMP */
#ifndef VOIDP_CONST_CMP
#define VOIDP_CONST_CMP                     VOIDP_CMP
#endif /* !defined VOIDP_CONST_CMP */
#ifndef VOID_CONST_P_CMP
#define VOID_CONST_P_CMP                    VOIDP_CMP
#endif /* !defined VOID_CONST_P_CMP */

/* constant zero for void*: */
#ifndef VOIDP_CONSTANT_ZERO
#define VOIDP_CONSTANT_ZERO 1
#endif /* !defined VOIDP_CONSTANT_ZERO */
#ifndef CONST_VOIDP_CONSTANT_ZERO
#define CONST_VOIDP_CONSTANT_ZERO 1
#endif /* !defined CONST_VOIDP_CONSTANT_ZERO */
#ifndef VOIDP_CONST_CONSTANT_ZERO
#define VOIDP_CONST_CONSTANT_ZERO 1
#endif /* !defined VOIDP_CONST_CONSTANT_ZERO */
#ifndef VOID_P_CONSTANT_ZERO
#define VOID_P_CONSTANT_ZERO 1
#endif /* !defined VOID_P_CONSTANT_ZERO */
#ifndef CONST_VOID_P_CONSTANT_ZERO
#define CONST_VOID_P_CONSTANT_ZERO 1
#endif /* !defined CONST_VOID_P_CONSTANT_ZERO */
#ifndef VOID_P_CONST_CONSTANT_ZERO
#define VOID_P_CONST_CONSTANT_ZERO 1
#endif /* !defined VOID_P_CONST_CONSTANT_ZERO */

/* ********************************************************************** */
/* HASH */
/* Hashing (most functions are in map.(c,h)) */
#ifndef ERWIN_POINTER_HASH
#define ERWIN_POINTER_HASH(X)               voidp_hash((void*)(X))
#endif /* !defined ERWIN_POINTER_HASH */

#ifndef CHAR_HASH
#define CHAR_HASH(X)                        char_hash(X)
#endif /* !defined CHAR_HASH */
#ifndef UNSIGNED_CHAR_HASH
#define UNSIGNED_CHAR_HASH                  CHAR_HASH
#endif /* !defined UNSIGNED_CHAR_HASH */
#ifndef SIGNED_CHAR_HASH
#define SIGNED_CHAR_HASH                    CHAR_HASH
#endif /* !defined SIGNED_CHAR_HASH */

#ifndef CHAR_CASE_HASH
#define CHAR_CASE_HASH(X)                   char_case_hash(X)
#endif /* !defined CHAR_CASE_HASH */
#ifndef UNSIGNED_CHAR_CASE_HASH
#define UNSIGNED_CHAR_CASE_HASH             CHAR_CASE_HASH
#endif /* !defined UNSIGNED_CHAR_CASE_HASH */
#ifndef SIGNED_CHAR_CASE_HASH
#define SIGNED_CHAR_CASE_HASH               CHAR_CASE_HASH
#endif /* !defined SIGNED_CHAR_CASE_HASH */

#ifndef BOOL_HASH
#define BOOL_HASH                           CHAR_HASH
#endif /* !defined BOOL_HASH */
#ifndef ERWIN_BOOL_HASH
#define ERWIN_BOOL_HASH              CHAR_HASH
#endif /* !defined ERWIN_BOOL_HASH */
#ifndef ERWIN_BOOL_HASH
#define ERWIN_BOOL_HASH                     CHAR_HASH
#endif /* !defined ERWIN_BOOL_HASH */

#ifndef SHORT_HASH
#define SHORT_HASH(X)                       short_hash(X)
#endif /* !defined SHORT_HASH */
#ifndef UNSIGNED_SHORT_HASH
#define UNSIGNED_SHORT_HASH                 SHORT_HASH
#endif /* !defined UNSIGNED_SHORT_HASH */
#ifndef UNSIGNED_SHORT_INT_HASH
#define UNSIGNED_SHORT_INT_HASH             SHORT_HASH
#endif /* !defined UNSIGNED_SHORT_INT_HASH */

#ifndef INT_HASH
#define INT_HASH(X)                         int_hash(X)
#endif /* !defined INT_HASH */
#ifndef UNSIGNED_HASH
#define UNSIGNED_HASH                       INT_HASH
#endif /* !defined UNSIGNED_HASH */
#ifndef UNSIGNED_INT_HASH
#define UNSIGNED_INT_HASH                   INT_HASH
#endif /* !defined UNSIGNED_INT_HASH */

#ifndef LONG_HASH
#define LONG_HASH(X)                        long_hash(X)
#endif /* !defined LONG_HASH */
#ifndef UNSIGNED_LONG_HASH
#define UNSIGNED_LONG_HASH                  LONG_HASH
#endif /* !defined UNSIGNED_LONG_HASH */
#ifndef UNSIGNED_LONG_INT_HASH
#define UNSIGNED_LONG_INT_HASH              LONG_HASH
#endif /* !defined UNSIGNED_LONG_INT_HASH */

#ifndef ERWIN_LONG_LONG_HASH
#define ERWIN_LONG_LONG_HASH(X)             (((hashval_t)(X)) + long_hash(X))
#endif /* !defined ERWIN_LONG_LONG_HASH */
#ifndef ERWIN_UNSIGNED_LONG_LONG_HASH
#define ERWIN_UNSIGNED_LONG_LONG_HASH       ERWIN_LONG_LONG_HASH
#endif /* !defined ERWIN_UNSIGNED_LONG_LONG_HASH */

#ifndef STRING_HASH
#define STRING_HASH(X)                      string_hash(X)
#endif /* !defined STRING_HASH */

#ifndef STRING_CASE_HASH
#define STRING_CASE_HASH(X)                 string_case_hash(X)
#endif /* !defined STRING_CASE_HASH */

#ifndef VOIDP_HASH
#define VOIDP_HASH(X)                       ERWIN_POINTER_HASH(X)
#endif /* !defined VOIDP_HASH */
#ifndef VOID_P_HASH
#define VOID_P_HASH                         VOIDP_HASH
#endif /* !defined VOID_P_HASH */
#ifndef CONST_VOIDP_HASH
#define CONST_VOIDP_HASH                    VOIDP_HASH
#endif /* !defined CONST_VOIDP_HASH */
#ifndef CONST_VOID_P_HASH
#define CONST_VOID_P_HASH                   VOIDP_HASH
#endif /* !defined CONST_VOID_P_HASH */
#ifndef VOIDP_CONST_HASH
#define VOIDP_CONST_HASH                    VOIDP_HASH
#endif /* !defined VOIDP_CONST_HASH */
#ifndef VOID_CONST_P_HASH
#define VOID_CONST_P_HASH                   VOIDP_HASH
#endif /* !defined VOID_CONST_P_HASH */

/* ********************************************************************** */
/* Printing of basic types.  This is handy for debugging (it is only
 * needed in map::dump(). */

#ifndef BOOL_PRINT
#define BOOL_PRINT(F,X)                     fputs((X) ? "true" : "false", (F))
#endif /* !defined BOOL_PRINT */
#ifndef ERWIN_BOOL_PRINT
#define ERWIN_BOOL_PRINT             BOOL_PRINT
#endif /* !defined ERWIN_BOOL_PRINT */
#ifndef ERWIN_BOOL_PRINT
#define ERWIN_BOOL_PRINT                    BOOL_PRINT
#endif /* !defined ERWIN_BOOL_PRINT */

#ifndef INT_PRINT
#define INT_PRINT(F,X)                      fprintf((F), "%d", (X))
#endif /* !defined INT_PRINT */

#ifndef SHORT_PRINT
#define SHORT_PRINT                         INT_PRINT
#endif /* !defined SHORT_PRINT */

#ifndef UNSIGNED_PRINT
#define UNSIGNED_PRINT(F,X)                 fprintf((F), "%u", (X))
#endif /* !defined UNSIGNED_PRINT */
#ifndef UNSIGNED_INT_PRINT
#define UNSIGNED_INT_PRINT                  UNSIGNED_PRINT
#endif /* !defined UNSIGNED_INT_PRINT */
                                                    
#ifndef UNSIGNED_SHORT_PRINT
#define UNSIGNED_SHORT_PRINT                UNSIGNED_PRINT
#endif /* !defined UNSIGNED_SHORT_PRINT */
                                                    
#ifndef LONG_PRINT
#define LONG_PRINT(F,X)                     fprintf((F), "%ld", (X))
#endif /* !defined LONG_PRINT */
                                                    
#ifndef UNSIGNED_LONG_PRINT
#define UNSIGNED_LONG_PRINT(F,X)            fprintf((F), "%lu", (X))
#endif /* !defined UNSIGNED_LONG_PRINT */
                                                    
#ifndef DOUBLE_PRINT
#define DOUBLE_PRINT(F,X)                   fprintf((F), "%g", (X))
#endif /* !defined DOUBLE_PRINT */
                                                    
#ifndef FLOAT_PRINT
#define FLOAT_PRINT                         DOUBLE_PRINT
#endif /* !defined FLOAT_PRINT */

/* No `long long' printing (yet).  It is not portable. */
/* No `long double' printing.  It is not portable. */
#ifndef VOID_P_PRINT
#define VOID_P_PRINT(F,X)                   fprintf((F), "%p", (X))
#endif /* !defined VOID_P_PRINT */
#ifndef CONST_VOID_P_PRINT
#define CONST_VOID_P_PRINT                  VOID_P_PRINT
#endif /* !defined CONST_VOID_P_PRINT */
#ifndef VOID_CONST_P_PRINT
#define VOID_CONST_P_PRINT                  VOID_P_PRINT
#endif /* !defined VOID_CONST_P_PRINT */

#ifndef CHAR_P_PRINT
#define CHAR_P_PRINT(F,X) \
        if (X == NULL) fprintf((F), "NULL"); else fprintf ((F), "%p:`%s'", (X), (X))
#endif /* !defined CHAR_P_PRINT */

#ifndef CONST_CHAR_P_PRINT
#define CONST_CHAR_P_PRINT                  CHAR_P_PRINT
#endif /* !defined CONST_CHAR_P_PRINT */
#ifndef CHAR_CONST_P_PRINT
#define CHAR_CONST_P_PRINT                  CHAR_P_PRINT
#endif /* !defined CHAR_CONST_P_PRINT */

#ifndef CHAR_PRINT
#define CHAR_PRINT(F,X)                     fprintf ((F), "%d:`%c'", (X), (X))
#endif /* !defined CHAR_PRINT */

#ifndef SIGNED_CHAR_PRINT
#define SIGNED_CHAR_PRINT                   CHAR_PRINT
#endif /* !defined SIGNED_CHAR_PRINT */
#ifndef UNSIGNED_CHAR_PRINT
#define UNSIGNED_CHAR_PRINT                 CHAR_PRINT
#endif /* !defined UNSIGNED_CHAR_PRINT */

/* ********************************************************************** */

#ifndef VOIDP_CONSTANT_ZERO
#define VOIDP_CONSTANT_ZERO        1
#endif /* !defined VOIDP_CONSTANT_ZERO */
#ifndef CONST_VOIDP_CONSTANT_ZERO
#define CONST_VOIDP_CONSTANT_ZERO  1
#endif /* !defined CONST_VOIDP_CONSTANT_ZERO */
#ifndef VOIDP_CONST_CONSTANT_ZERO
#define VOIDP_CONST_CONSTANT_ZERO  1
#endif /* !defined VOIDP_CONST_CONSTANT_ZERO */
#ifndef VOID_P_CONSTANT_ZERO
#define VOID_P_CONSTANT_ZERO       1
#endif /* !defined VOID_P_CONSTANT_ZERO */
#ifndef CONST_VOID_P_CONSTANT_ZERO
#define CONST_VOID_P_CONSTANT_ZERO 1
#endif /* !defined CONST_VOID_P_CONSTANT_ZERO */
#ifndef VOID_P_CONST_CONSTANT_ZERO
#define VOID_P_CONST_CONSTANT_ZERO 1
#endif /* !defined VOID_P_CONST_CONSTANT_ZERO */

#ifndef CHARP_CONSTANT_ZERO
#define CHARP_CONSTANT_ZERO        1
#endif /* !defined CHARP_CONSTANT_ZERO */
#ifndef CONST_CHARP_CONSTANT_ZERO
#define CONST_CHARP_CONSTANT_ZERO  1
#endif /* !defined CONST_CHARP_CONSTANT_ZERO */
#ifndef CHAR_CONSTP_CONSTANT_ZERO
#define CHAR_CONSTP_CONSTANT_ZERO  1
#endif /* !defined CHAR_CONSTP_CONSTANT_ZERO */
#ifndef CHAR_P_CONSTANT_ZERO
#define CHAR_P_CONSTANT_ZERO       1
#endif /* !defined CHAR_P_CONSTANT_ZERO */
#ifndef CONST_CHAR_P_CONSTANT_ZERO
#define CONST_CHAR_P_CONSTANT_ZERO 1
#endif /* !defined CONST_CHAR_P_CONSTANT_ZERO */
#ifndef CHAR_CONST_P_CONSTANT_ZERO
#define CHAR_CONST_P_CONSTANT_ZERO 1
#endif /* !defined CHAR_CONST_P_CONSTANT_ZERO */


#endif /* defined(ERWIN_DEFAULTS_H) */

