# -*- Mode: Makefile -*-
#
# Author: Henrik Theiling
#
# @@Begin: Licencing and Copying@@
# 
# Copyright (c) Henrik Theiling
# Licence Version 2, Special Version for Erwin.
# 
# The term 'this software' used in the following, additional to its
# usual usage, also includes the instantiated source files generated by
# tools of this package.
# 
# This software is provided 'as-is', without warranty of any kind,
# express or implied.  In no event will the authors or copyright holders
# be held liable for any damages arising from the use of this software.
# 
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
# 
# 1. The origin of this software must not be misrepresented; you must
# not claim that you wrote the original software. If you use this
# software in a product, an acknowledgment in the product documentation
# would be appreciated.
# 
# 2. Altered source versions must be plainly marked as such, and must
# not be misrepresented as being the original software.
# 
# 3. You must not use any of the names of the authors or copyright
# holders of the original software for advertising or publicity
# pertaining to distribution without specific, written prior permission.
# 
# 4. If you change this software and redistribute parts or all of it in
# any form, you must make the source code of the altered version of this
# software available.  As an exception, files that were generated by
# tools of this package may be used freely, including modification.
# 
# 5. This notice must not be removed or altered from any source
# distribution.
# 
# This licence is governed by the Laws of Germany.  Disputes shall be
# settled by Saarbruecken City Court.
# 
# @@End: Licencing and Copying@@
#

VERSION=2.1.85983

SHELL=/bin/sh
CROSS_DIR=/home/mlangen/CC.2.8
CROSS_PREFIX=i586-pc-msdosdjgpp-

#PREFIX=lib/cross/
TARGETS= \
 lib/cross/map_int_rgbcolour_p.o lib/cross/map_board_p_node_p.o \
 lib/cross/map_int_char_p.o lib/cross/vector_board_p.o \
 lib/cross/vector_char_p.o lib/cross/vector_edge_p.o lib/cross/vector_node_p.o \
 lib/cross/vector_car_p.o lib/cross/map_int_int.o lib/cross/symtab.o \
 lib/cross/v_char.o
SUBDIR=src
SUBDIR2=include
SUBDIR3=include

INIT_TARGETS=lib/cross/init.o
BASE_TARGETS=lib/cross/map.o lib/cross/vector.o lib/cross/list.o lib/cross/base.o
OBJECTS=$(INIT_TARGETS) $(TARGETS) $(BASE_TARGETS)

CPPFLAGS=@CPPFLAGS@ @MORE_CPPFLAGS@ $(MORE_CPPFLAGS)  \
	     -I$(CROSS_DIR)/include -DERWIN_DOS=1 -DERWIN_CROSS=1
CXXFLAGS=@CXXFLAGS@ @MORE_CXXFLAGS@ $(MORE_CXXFLAGS) 
CFLAGS=@CFLAGS@ @MORE_CFLAGS@ $(MORE_CFLAGS) 
LDFLAGS=@LDFLAGS@ @MORE_LDFLAGS@ $(MORE_LDFLAGS) 

CC=$(CROSS_DIR)/bin/$(CROSS_PREFIX)gcc
CXX=$(CROSS_DIR)/bin/$(CROSS_PREFIX)g++
AR=$(CROSS_DIR)/bin/$(CROSS_PREFIX)ar
RANLIB=$(CROSS_DIR)/bin/$(CROSS_PREFIX)ranlib
NM=$(CROSS_DIR)/bin/$(CROSS_PREFIX)nm
LORDER=@LORDER@
TSORT=@TSORT@

.SUFFIXES:

.PHONY: all directories

all: directories lib/cross/liberwin.a

directories: dummy
	mkdir -p lib/cross

lib/cross/map.o: lib/map.cpp
	$(CXX) $(CPPFLAGS) -I include $(CXXFLAGS) -c lib/map.cpp -o lib/cross/map.o

lib/cross/init.o: lib/init.cpp
	$(CXX) $(CPPFLAGS) -I include $(CXXFLAGS) -c lib/init.cpp -o lib/cross/init.o

lib/cross/vector.o: lib/vector.cpp
	$(CXX) $(CPPFLAGS) -I include $(CXXFLAGS) -c lib/vector.cpp -o lib/cross/vector.o

lib/cross/list.o: lib/list.cpp
	$(CXX) $(CPPFLAGS) -I include $(CXXFLAGS) -c lib/list.cpp -o lib/cross/list.o

lib/cross/base.o: lib/base.cpp
	$(CXX) $(CPPFLAGS) -I include $(CXXFLAGS) -c lib/base.cpp -o lib/cross/base.o

#RULE lib/cross/%.o: $(SUBDIR)/%.--SOURCE-ENDING--
#	--COMPILER-- $(CPPFLAGS) -I $(SUBDIR) -I $(SUBDIR2) -I $(SUBDIR3) --COMPILER-FLAGS-- -c $< -o $@
#
lib/cross/vector_char_p.o: $(SUBDIR)/vector_char_p.cpp
	$(CXX) $(CPPFLAGS) -I $(SUBDIR) -I $(SUBDIR2) -I $(SUBDIR3) $(CXXFLAGS) -c $(SUBDIR)/vector_char_p.cpp -o lib/cross/vector_char_p.o

lib/cross/vector_edge_p.o: $(SUBDIR)/vector_edge_p.cpp
	$(CXX) $(CPPFLAGS) -I $(SUBDIR) -I $(SUBDIR2) -I $(SUBDIR3) $(CXXFLAGS) -c $(SUBDIR)/vector_edge_p.cpp -o lib/cross/vector_edge_p.o

lib/cross/vector_car_p.o: $(SUBDIR)/vector_car_p.cpp
	$(CXX) $(CPPFLAGS) -I $(SUBDIR) -I $(SUBDIR2) -I $(SUBDIR3) $(CXXFLAGS) -c $(SUBDIR)/vector_car_p.cpp -o lib/cross/vector_car_p.o

lib/cross/map_int_char_p.o: $(SUBDIR)/map_int_char_p.cpp
	$(CXX) $(CPPFLAGS) -I $(SUBDIR) -I $(SUBDIR2) -I $(SUBDIR3) $(CXXFLAGS) -c $(SUBDIR)/map_int_char_p.cpp -o lib/cross/map_int_char_p.o

lib/cross/symtab.o: $(SUBDIR)/symtab.cpp
	$(CXX) $(CPPFLAGS) -I $(SUBDIR) -I $(SUBDIR2) -I $(SUBDIR3) $(CXXFLAGS) -c $(SUBDIR)/symtab.cpp -o lib/cross/symtab.o

lib/cross/map_board_p_node_p.o: $(SUBDIR)/map_board_p_node_p.cpp
	$(CXX) $(CPPFLAGS) -I $(SUBDIR) -I $(SUBDIR2) -I $(SUBDIR3) $(CXXFLAGS) -c $(SUBDIR)/map_board_p_node_p.cpp -o lib/cross/map_board_p_node_p.o

lib/cross/vector_board_p.o: $(SUBDIR)/vector_board_p.cpp
	$(CXX) $(CPPFLAGS) -I $(SUBDIR) -I $(SUBDIR2) -I $(SUBDIR3) $(CXXFLAGS) -c $(SUBDIR)/vector_board_p.cpp -o lib/cross/vector_board_p.o

lib/cross/vector_node_p.o: $(SUBDIR)/vector_node_p.cpp
	$(CXX) $(CPPFLAGS) -I $(SUBDIR) -I $(SUBDIR2) -I $(SUBDIR3) $(CXXFLAGS) -c $(SUBDIR)/vector_node_p.cpp -o lib/cross/vector_node_p.o

lib/cross/v_char.o: $(SUBDIR)/v_char.cpp
	$(CXX) $(CPPFLAGS) -I $(SUBDIR) -I $(SUBDIR2) -I $(SUBDIR3) $(CXXFLAGS) -c $(SUBDIR)/v_char.cpp -o lib/cross/v_char.o

lib/cross/map_int_int.o: $(SUBDIR)/map_int_int.cpp
	$(CXX) $(CPPFLAGS) -I $(SUBDIR) -I $(SUBDIR2) -I $(SUBDIR3) $(CXXFLAGS) -c $(SUBDIR)/map_int_int.cpp -o lib/cross/map_int_int.o

lib/cross/map_int_rgbcolour_p.o: $(SUBDIR)/map_int_rgbcolour_p.cpp
	$(CXX) $(CPPFLAGS) -I $(SUBDIR) -I $(SUBDIR2) -I $(SUBDIR3) $(CXXFLAGS) -c $(SUBDIR)/map_int_rgbcolour_p.cpp -o lib/cross/map_int_rgbcolour_p.o

#END RULE

lib/cross/liberwin.a: $(OBJECTS)
	-rm -f lib/cross/liberwin.a
	$(AR) rc lib/cross/liberwin.a `NM=$(NM) $(LORDER) $(OBJECTS) | $(TSORT)`
	$(RANLIB) lib/cross/liberwin.a

#	if test -z "$(TARGETS)" ; then                                          \
#	    $(AR) rc lib/cross/liberwin.a $(INIT_TARGETS) $(BASE_TARGETS) ; \
#	else                                                                    \
#	    $(AR) rc lib/cross/liberwin.a                                   \
#               $(INIT_TARGETS) `NM=$(NM) $(LORDER) $(TARGETS) | $(TSORT)` $(BASE_TARGETS) ; \
#	fi

dummy:
