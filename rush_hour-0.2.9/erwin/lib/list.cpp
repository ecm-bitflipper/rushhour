/*-*- Mode: C -*-*/
/*
 * Time-stamp: <Fri, 24 Aug 2007 18:00:21 +0200 theiling>
 * Author: Henrik Theiling
 * Description:
 *     Implementation of library wide parts of the vectors.
 *
 * @@Begin: Licencing and Copying@@
 * 
 * Copyright (c) Henrik Theiling
 * Licence Version 2, Special Version for Erwin.
 * 
 * The term 'this software' used in the following, additional to its
 * usual usage, also includes the instantiated source files generated by
 * tools of this package.
 * 
 * This software is provided 'as-is', without warranty of any kind,
 * express or implied.  In no event will the authors or copyright holders
 * be held liable for any damages arising from the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 * 1. The origin of this software must not be misrepresented; you must
 * not claim that you wrote the original software. If you use this
 * software in a product, an acknowledgment in the product documentation
 * would be appreciated.
 * 
 * 2. Altered source versions must be plainly marked as such, and must
 * not be misrepresented as being the original software.
 * 
 * 3. You must not use any of the names of the authors or copyright
 * holders of the original software for advertising or publicity
 * pertaining to distribution without specific, written prior permission.
 * 
 * 4. If you change this software and redistribute parts or all of it in
 * any form, you must make the source code of the altered version of this
 * software available.  As an exception, files that were generated by
 * tools of this package may be used freely, including modification.
 * 
 * 5. This notice must not be removed or altered from any source
 * distribution.
 * 
 * This licence is governed by the Laws of Germany.  Disputes shall be
 * settled by Saarbruecken City Court.
 * 
 * @@End: Licencing and Copying@@
 *
 * ---------------------------------------------------------------------- */

#define ERWIN_COMPILING 1

#include "erwin/list.h"

#if !defined(ERWIN_THREAD_SAFE) || ERWIN_USE_THREAD_KEYWORD

ERWIN_THREAD_LOCAL
int erwininternallisterrno= ERWININTERNALLISTOK;

#elif ERWIN_USE_PTHREAD

static pthread_key_t  key;
static pthread_once_t key_once= PTHREAD_ONCE_INIT;

static void make_key()
{
    pthread_key_create(&key, NULL);
}

int *erwininternallisterrnoptr(void)
{
    int *errno_ptr;

    pthread_once (&key_once, make_key);
    errno_ptr= (int*)pthread_getspecific(key);
    if (ERWIN_UNLIKELY(!errno_ptr)) {
        errno_ptr=  (int*)malloc(sizeof(int));
        *errno_ptr= ERWININTERNALLISTOK;
        pthread_setspecific(key, (void*)errno_ptr);
    }

    return errno_ptr;
}

#endif

char const *erwininternalliststrerror (int i)
{
    switch (i) {
        case ERWININTERNALLISTOK:
            return "No error";

        case ERWININTERNALLISTERRNOMEM:
            return "Error: Memory exhausted";

        case ERWININTERNALLISTERROUTOFRANGE:
            return "Error: Index out of range";

        case ERWININTERNALLISTERRASSERTIONFAILED:
            return "Error: Assertion failed";

        case ERWININTERNALLISTERRNOTCOMPILED:
            return "Error: Feature disabled at compile time";

        case ERWININTERNALLISTWARNOUTOFRANGE:
            return "Warning: Index out of range";

        case ERWININTERNALLISTWARNEMPTY:
            return "Warning: List is empty";
    }
    return "Error: unknown error code";
}

