/*-*- Mode: C -*-*/
/*
 * Author: Henrik Theiling
 * Description:
 *     Implementation of the map support functions (standard hash
 *     functions, etc)
 *
 * @@Begin: Licencing and Copying@@
 *
 * Copyright (c) Henrik Theiling
 * Licence Version 2, Special Version for Erwin.
 *
 * The term 'this software' used in the following, additional to its
 * usual usage, also includes the instantiated source files generated by
 * tools of this package.
 *
 * This software is provided 'as-is', without warranty of any kind,
 * express or implied.  In no event will the authors or copyright holders
 * be held liable for any damages arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must
 * not claim that you wrote the original software. If you use this
 * software in a product, an acknowledgment in the product documentation
 * would be appreciated.
 *
 * 2. Altered source versions must be plainly marked as such, and must
 * not be misrepresented as being the original software.
 *
 * 3. You must not use any of the names of the authors or copyright
 * holders of the original software for advertising or publicity
 * pertaining to distribution without specific, written prior permission.
 *
 * 4. If you change this software and redistribute parts or all of it in
 * any form, you must make the source code of the altered version of this
 * software available.  As an exception, files that were generated by
 * tools of this package may be used freely, including modification.
 *
 * 5. This notice must not be removed or altered from any source
 * distribution.
 *
 * This licence is governed by the Laws of Germany.  Disputes shall be
 * settled by Saarbruecken City Court.
 *
 * @@End: Licencing and Copying@@
 *
 * ---------------------------------------------------------------------- */

#define ERWIN_COMPILING 1

#include "erwin/map.h"
#include "erwin/base_i.h"

/* Hash functions
 * ---------------
 * For an easy way to add some bit difference, we have one to four tables
 * of random data.  The random data in the tables was filtered so that
 * it has the following features:
 *
 *    - for x,y :: uint8, x != y:
 *          a) table[x] != table[y],
 *          b) (table[x]+x) & 0xff != (table[y]+y) & 0xff
 *          c) 1/4 to 3/4 of all   64 bits of table[x] and table[y] are different
 *          d) 1/4 to 3/4 of lower 32 bits of table[x] and table[y] are different
 *
 *    - for x,y :: uint8: x != y and (|x - y| <= 6 or hamming(x,y) <= 2):
 *          e) 1/3 to 2/3 of all   64 bits of table[x] and table[y] are different
 *          f) 1/3 to 2/3 of lower 32 bits of table[x] and table[y] are different
 *
 *    - for x,y :: uint8: x != y and (|x - y| <= 1 or hamming(x,y) <= 1):
 *          g) 3/8 to 5/8 of all   64 bits of table[x] and table[y] are different
 *          h) 3/8 to 5/8 of lower 32 bits of table[x] and table[y] are different
 *
 * If you wonder about feature b), it ensures that for any data type with a
 * bit width of 8..64, table[x & 0xff] + x != table[y & 0xff] + y.
 *
 * The tables were generated with 'test/maptest3 -gray'.
 */

#if SIZEOF_HASHVAL_T == 8
#  define HV(X,Y) HASHVAL_C(ERWIN_CONCAT(0x,ERWIN_CONCAT(X,Y)))
#else
#  define HV(X,Y) HASHVAL_C(ERWIN_CONCAT(0x,Y))
#endif

/* Unfortunately, hash(...(hash(x))) is not a permutation of hashval_t.  We will have
 * to find values here that enforce that. */

#if ERWIN_HASH_STRENGTH >= 1
/* good for x + table[(x >> 0) & 0xff] */
erwin_random_table_t erwin_random_table= {
    HV(52865d11,4c4e35ab),HV(716d711d,87e4990b),HV(c164fb84,2136a84d),HV(aa08b444,4878001e),
    HV(c0d8ed3b,571ee1fd),HV(3261f4d5,e10f93bd),HV(665187aa,8d6f56e8),HV(533817de,be9ba345),
    HV(a37a18df,6d100e45),HV(853f8991,819f3407),HV(4c14b1ed,eef6ed3a),HV(4b8008a2,4b97c85e),
    HV(ea51d3fd,0e1ad8b3),HV(3defd477,50c85a2f),HV(fd61024b,e28a22db),HV(652d9167,7b31fed6),
    HV(54b2609c,d247041f),HV(ed32de32,cd58d246),HV(e0358e93,626481e8),HV(29bb7508,a0d3d934),
    HV(6ac5401a,bf966556),HV(d88ae1c8,746e30de),HV(2b3f1ab8,fedc688e),HV(9aa75294,26431686),
    HV(0c301454,860762ed),HV(04d07342,ef993f82),HV(0b8eaacd,8b07bddf),HV(260d3851,4c0b4142),
    HV(57975d6b,a7088b7c),HV(2f5ed1d8,c1931270),HV(caa5c12c,cc53db0e),HV(224aa056,46206a37),
    HV(ebcbf351,12fd5fdc),HV(69a51578,7f7f04b9),HV(146db52d,23f05d28),HV(c3ca746e,7563c1ca),
    HV(8f12a765,0283bd1c),HV(92546bd2,27c9579f),HV(d1c7fd96,fea1983d),HV(2ea2d3bf,57d6762a),
    HV(27282178,3d38f5ee),HV(0072844d,178b4e4a),HV(2e9c8455,bed884cd),HV(726c1fad,71608427),
    HV(97c511d6,33e9f943),HV(5dccc21c,4ae8665d),HV(02794c2a,60dd39dd),HV(fbee819a,2f0978f3),
    HV(66d5d660,05b65472),HV(9306cfe7,49d9bce4),HV(fbbcf489,c2156eab),HV(75a17b29,2108627c),
    HV(5b486a19,6b3cd5a2),HV(5abe86c1,b18e1d5a),HV(9298b004,6030ee72),HV(d7f2ddac,88f87da2),
    HV(a289b9c2,c3423b6e),HV(016aba1b,e7ac0668),HV(b572347d,ee0f5cc4),HV(0d19fb01,da0ad71f),
    HV(af6e4160,80a5b00f),HV(e4326117,306c5744),HV(7fa9b2a7,8638f455),HV(31bcea11,7c73f07c),
    HV(46a92d7a,00325abf),HV(f3008876,c2b9055b),HV(79e0b06b,148c3b9a),HV(193410da,b2021028),
    HV(7a57b932,7a238dca),HV(4e37487f,d4f808fd),HV(b0776a49,8a57028c),HV(8525a390,11c9f6bc),
    HV(8d6e3865,b97c6f9e),HV(f40cab7c,aed2a0e4),HV(e542677a,d806891d),HV(36d830ff,4b5eb5db),
    HV(d47cdd79,6173d695),HV(157d078c,64be8f5f),HV(e1542c94,ec090eba),HV(ccf6090e,c5f3bc48),
    HV(c01a16b1,a192b36e),HV(c3637fe5,40e86004),HV(22b2634f,2abde578),HV(9ce7a6fc,37b160d0),
    HV(e1802077,3b2a5d45),HV(415e848f,8af5d482),HV(681c82f1,40564f31),HV(99ebc4e6,ead276a9),
    HV(981da90f,971846bb),HV(5483b4fc,d1aacdb6),HV(752cfaa5,1682c754),HV(43d39216,1c01a829),
    HV(a309c22c,558dbded),HV(53dc2d3b,d39dc34a),HV(740b9eaa,6b1b610f),HV(02cd9675,c10584bf),
    HV(e7ab2eb7,a6cfee3a),HV(3217a75d,f9ba71bb),HV(05d6e4e4,ea18db51),HV(e5740835,1f33f795),
    HV(26ac00a9,7cc996d1),HV(d01f7c6e,b5a34e83),HV(c7648f08,f94248ae),HV(17477ac8,dc74d2b2),
    HV(d6bcbfe0,8b2c3421),HV(5530b7f5,56f529f7),HV(2126d546,b055e74b),HV(51aee8a1,f88b3ef9),
    HV(9a5de42d,28632b60),HV(d958992f,3c4e3a47),HV(ce36f627,451500cf),HV(a66ce972,f0965573),
    HV(cd47359a,cd86e65e),HV(a041d8fb,d524bbb3),HV(b1115a4c,15b6ee09),HV(25ee9e26,10c68315),
    HV(5a64d258,8c28d85b),HV(9302af29,c263eb51),HV(996a5e53,3ef2e0fb),HV(164be0af,b11be21b),
    HV(cb980cfd,73a7534b),HV(00610ebc,62987e47),HV(872de47a,0aeba236),HV(27e959a4,579a80ea),
    HV(00d98480,a4aad4ec),HV(fcd1ac51,f1d0ac4c),HV(ee8b0d4b,6dcef72f),HV(7a4c6776,b44ca2a8),
    HV(732b9c4f,3946d4c5),HV(98e23022,6417dd83),HV(842939c7,f81dd498),HV(4b5289dd,10b7653a),
    HV(e67854d8,58ca2510),HV(1d9813bb,801b04ae),HV(94fe898a,4bad4966),HV(cc4a77f1,4cbd8e69),
    HV(b93ef055,a9be987a),HV(1cc251cd,d5d9e8c5),HV(711f74b2,81b09447),HV(b09f1314,e2d443f4),
    HV(ffff2355,4728b6ec),HV(5142cf66,c85bf748),HV(407ba220,9b7d34e7),HV(d2f43602,56441536),
    HV(3b50a515,ed553188),HV(765a1e18,0019fa9a),HV(f20c1f41,12c5e7c6),HV(43fc17db,fe306b8d),
    HV(d445c1a9,554843aa),HV(486ccb47,c6f29bf7),HV(f2eef39a,0bda6ce3),HV(7e85938b,f8251ee5),
    HV(850188b8,1d0cb607),HV(990d546a,0ebb05e9),HV(24b7ec44,6f8a93e3),HV(05cf4661,e761e472),
    HV(68c12a48,e9e8d1e4),HV(f8bf037c,c084d019),HV(b6f889f0,bb63cb00),HV(36204121,b378c7cd),
    HV(17291300,681248da),HV(0d4e9d31,6b4c1108),HV(619849e3,a9e02990),HV(19615f57,8bb60ee2),
    HV(83c0a4a9,eae6504d),HV(baf0de4f,6ea9c476),HV(28d49d86,18fad2d1),HV(c5a9f54d,3375174f),
    HV(c38671dc,a523864c),HV(3d0199de,eae9aeb8),HV(00e3d4f1,38a6638e),HV(2108fd98,1059cd66),
    HV(f0a8470f,ab8151d2),HV(78eff8a7,43c38745),HV(ea059021,2edee925),HV(9457cbc9,1a84db57),
    HV(6040ea3c,63259abe),HV(ee783160,398356e4),HV(0f90ba69,d3cb4b94),HV(c74cd08f,92d051d8),
    HV(002d0afb,801d1020),HV(22aba5eb,06800f2a),HV(a0843659,91f598ef),HV(03f89b74,f1000133),
    HV(6fc4ad0c,289d2b4f),HV(81f66974,8448f72b),HV(c278d69f,dfbebf0e),HV(7456d076,623f772c),
    HV(5e6cd872,b720399f),HV(a6af7db9,c22a5c86),HV(bb7da6fa,f444cd76),HV(a9ed6580,0a1da6fa),
    HV(b410813a,bcfc8b0d),HV(43d90056,43f6c992),HV(9c840e27,d9b62e9c),HV(b39513af,983f08ef),
    HV(793b2412,0bc9de77),HV(7ca22cc8,9670d6db),HV(454b8407,37531770),HV(f2618fd0,f15b4b09),
    HV(9c5d2424,c37fbb35),HV(9ec2a83d,20948267),HV(b4d99709,a423355b),HV(c1dd8242,402ae6a9),
    HV(ea3cc596,f32dee12),HV(b9ca9a3a,eb46fcc9),HV(2f5a941b,8036f23c),HV(a5a4b71a,c2d5af81),
    HV(cc6b997c,aac0c5a0),HV(28e523b5,9cfbf1d2),HV(bf28c804,81ac435c),HV(18fced7e,1f0fc40d),
    HV(559fa373,6ce55807),HV(514d0dc5,c5de7c16),HV(edce1de4,272e00b0),HV(4ea0b817,e56b73e5),
    HV(89a3a3cf,8d76c731),HV(ad6fa6da,3591691c),HV(a2b57db7,8c42698c),HV(449fd31d,faaf7ab5),
    HV(e9f1f37d,891bcb96),HV(4da1e1f3,493641ea),HV(eb89ea6e,b0b95d41),HV(f0d8efe0,b617e475),
    HV(78e823af,58e6b332),HV(8b1fd1d8,f32a9e56),HV(0857633f,905a2577),HV(7c5b61ad,7ca43fce),
    HV(5821b530,db97e7d3),HV(b66ae0c3,9bfb83ac),HV(8f7d697a,e2f73462),HV(e60e4734,d20ffdfc),
    HV(826631ae,e79aa0d0),HV(12cc30fd,09fd6e41),HV(28642ce0,d5e7da47),HV(8908352f,f6694cbf),
    HV(f343e411,b7fa1c53),HV(28600fd6,1a321ecd),HV(3b3d6eaa,c5b0f501),HV(33cf0d5d,de186587),
    HV(a1f7906d,59198e0b),HV(bec38f34,073d1dd0),HV(0ff3ce90,fa3d8525),HV(20d0ef3b,ada984d8),
    HV(ca17c561,9601e06e),HV(f5b9ca5d,9c5e204c),HV(3474c6fe,472fda66),HV(ece93c1c,d03bb026),
    HV(fd7a0181,666d808b),HV(4a773a2c,f0cc06df),HV(4c446c8d,230cfd65),HV(d3e4b93b,249ed93e),
    HV(6177a2ea,fa7a712d),HV(6771ad06,9da46091),HV(566b386c,8e559c3c),HV(309b6431,4c926e29)
};
erwin_random_table_t erwin_random_table2= {
    HV(e23ece6d,8d7accdf),HV(5648da8f,27ba30c2),HV(b96571a3,93d92746),HV(30dd5b25,089a37b1),
    HV(bfc021d3,2453ea7d),HV(c7abaaca,71c2bea3),HV(c3ca6002,c0ea5e54),HV(58aa65e2,b86bf3af),
    HV(2136c6f3,d1fe1c07),HV(1b36aa02,95dd44c3),HV(7291ce98,d435ae16),HV(63ee96ee,4e372500),
    HV(c2577076,77e0b8eb),HV(b632df45,93e60b19),HV(62cb727f,592370e4),HV(5526e89b,ab5119be),
    HV(b4602dba,19c26d3a),HV(2b54a694,cb8f9fa2),HV(9c5c9d30,4fb4ea94),HV(e3e72c12,86064efe),
    HV(f357d0ec,65845743),HV(ba8c7c0a,0cafd34e),HV(77759994,ee6f75f3),HV(21c85ad1,06dfc3a8),
    HV(716840b6,121b6a44),HV(10b731ea,d783070d),HV(83164a7c,8b155253),HV(4a2a846d,a62e23a7),
    HV(ff9cb235,abf9d33a),HV(2eb615b7,e5d7e634),HV(1846c522,455b8e18),HV(8e2b413c,0421be03),
    HV(dab13686,bc0786cc),HV(f3d27b64,6a9db495),HV(4a6638f0,be4a8862),HV(c6f419a2,35211114),
    HV(2ed4e532,339ee7fe),HV(3f684306,0919ce4b),HV(0f9681ad,8e0ccec9),HV(6dce2836,c0330aeb),
    HV(8acd10e7,c6434351),HV(aa911d0d,0310d935),HV(05ec1efb,6472d7d6),HV(3eee6b0f,ed2a3a85),
    HV(b27a72a0,d7d20078),HV(97a4f7ec,764de059),HV(4912b9ca,201a222a),HV(10c1f6c5,28d0977e),
    HV(a90a1c84,44d7f466),HV(3f30f5a8,1a26cfdf),HV(98de983e,9699c1aa),HV(d1513a9b,471c2349),
    HV(9baea682,0c950dc1),HV(392cbd09,865c5a30),HV(21acdd5a,2e8936f2),HV(6c9a13d7,1d524776),
    HV(aad1e676,91649a5e),HV(de30407c,c0e04572),HV(2c2d21ab,88f46133),HV(0b25f989,fdcd8219),
    HV(b9bbdf67,a4e6add4),HV(f6956371,490a82d2),HV(6b3abcd4,52c8ecac),HV(849969b0,d1cb5bcc),
    HV(eb2c8eb9,20b37f11),HV(0d3d7211,0df49a79),HV(0c3ca7bd,22cccadd),HV(7bf7e029,e607fd9b),
    HV(23bf2fa2,cad6f66c),HV(70e60bc1,838390c3),HV(7b2fa4c9,736062c0),HV(5104d1aa,5eb0d00a),
    HV(fbec63ec,8161670c),HV(fbb445b9,fd1351be),HV(391e4d35,f4668fe7),HV(9a2d31e6,495ffead),
    HV(d8e5e367,468950b1),HV(83d5814f,a2b344e7),HV(d71dc724,195675d7),HV(2a66f537,679a3909),
    HV(23e602e3,dd89f392),HV(e4563bfc,c4181d25),HV(02f2720d,5a882525),HV(da16d020,169d696a),
    HV(db7e15b6,72fb8d21),HV(b95a8586,9dc30331),HV(18e5c299,9ed5dc4f),HV(2c3e6a27,b208d052),
    HV(81d274cd,4213b944),HV(6ff68097,81bb31f8),HV(1b17864a,c3cead99),HV(6021ed8c,e52ad9c0),
    HV(862027a3,11e6592d),HV(7e3aa941,54ad0ee2),HV(ca62c2b0,c7316dc1),HV(a5dc4b39,cf1e1e91),
    HV(bc58041f,a17fdde1),HV(38340ddf,f9870059),HV(4cd8909a,412ec223),HV(98fa77b4,b8aef1ad),
    HV(744d8941,daef44e0),HV(e5649baa,75fb8209),HV(cf902b04,66551719),HV(009de860,8a16c0ca),
    HV(530a33ce,b7a49948),HV(095a712b,da75ec3a),HV(a18f92a7,2f4d0dd6),HV(8537f469,a0142f19),
    HV(14507046,d0da99d4),HV(e1176280,3f51329b),HV(30865e52,172107bd),HV(750eb5be,86c37296),
    HV(8147386e,5af15afe),HV(5b81e82e,456c0b40),HV(4b24cd58,12e5a4d4),HV(6dc8e275,9f0efab7),
    HV(9d0610e5,90b8f517),HV(0b519594,b87c0a86),HV(85226b08,d51abeab),HV(5f4a97b2,06283c0a),
    HV(54a4843b,2106d3b8),HV(59c2e0db,5d76cabd),HV(d6bba4d7,b6ddd29d),HV(97431461,0dbdd7a2),
    HV(28ac76b8,c2f53377),HV(91f06801,8aa0f2d0),HV(58113e35,a23aa910),HV(aeabe614,4974e782),
    HV(39648b6d,1b8784bc),HV(4b839180,af36c3ba),HV(7529942d,5e3c1f23),HV(c9c7eb31,26c06fa2),
    HV(1fde4d32,553d32a6),HV(cb2bedaf,66675f55),HV(ac9b649a,04b6f594),HV(1189ecaf,79c3e13b),
    HV(787f9eb6,cfb739ba),HV(843b3cac,c249a862),HV(5312d9fa,e30025c7),HV(b1ae13b7,f12a57ac),
    HV(5129f077,b6594d63),HV(3ecdbde4,b8259280),HV(06231a37,93941752),HV(110e2e03,ea3ab2e4),
    HV(359aadea,8fd8417d),HV(3d1fb02e,231e0511),HV(3851e4eb,5666c55a),HV(40f0274e,5a9e6c76),
    HV(ea6f433e,37c819b8),HV(78599dc7,555ff94e),HV(22bb4339,f2fd6410),HV(5d060948,37739a76),
    HV(01cd2a20,7ebabb36),HV(eeb09c81,f510d071),HV(b0831dfe,045e9243),HV(0f0e338e,3251007f),
    HV(8dfb81b9,d96d31e3),HV(08e895d2,5f706177),HV(aa561456,e5857d74),HV(10fb22e9,bfe26616),
    HV(85474dd3,984b3fcb),HV(34786b42,717608f0),HV(382e4ee6,028969df),HV(9a3821d0,0d58b61a),
    HV(dc00b90a,262a4b4c),HV(222a5b18,e0577bad),HV(446aea1f,254b25db),HV(82e50c04,b44b9970),
    HV(f8d7f7b6,925e8fc3),HV(5d8de137,04f7b06c),HV(cd98b227,49a24ce5),HV(e405b352,c90d5134),
    HV(0973e3f4,6d1ea3a0),HV(2bfc0c87,cfc131d0),HV(cbfdf00c,6fbfd707),HV(96900c2d,318042aa),
    HV(dce036e7,05d68767),HV(fe830b2b,38daeb47),HV(dc9b5ae5,f42be22d),HV(71dd42c8,8de320cf),
    HV(5dbb37ac,5e427e83),HV(bb86cc75,8660bb69),HV(c4a4f3a9,01ccf626),HV(4abd0b01,47096895),
    HV(4308c3a4,f851dde1),HV(53d02f81,62f50e09),HV(403d5b5c,2420cff9),HV(d3c5604a,d334b085),
    HV(481c69bb,f3809e54),HV(6a6c7feb,c0738850),HV(0ec2ad03,14489731),HV(85b39c22,a358eb1e),
    HV(d346aa5d,9c51dad7),HV(02665e9b,eeff06b4),HV(468ba849,cb1a22f7),HV(e654a68b,15d645a0),
    HV(008ad20d,31345e8c),HV(b39fe75b,e060a5e7),HV(1fd20f22,2886c1e9),HV(d66977e2,1117aa4a),
    HV(710d13fb,aba682b0),HV(4bfb09ab,44ac731c),HV(ad12f4bf,49799beb),HV(93f7b728,68f30b3b),
    HV(9e2b5b74,72e64726),HV(75a3b7bc,b66feb5c),HV(5a6550d1,4022dda8),HV(590f1c65,df031762),
    HV(5456b3c9,9b6c1e93),HV(cfca9b49,4dcee1f4),HV(faa5bc24,13d2d397),HV(ba862af2,4f499def),
    HV(164b5d82,ae6658aa),HV(a4ae4e66,2eedb782),HV(a471f740,f420ad32),HV(402757cc,18323527),
    HV(eb60c914,990e0bd6),HV(d6f2f4aa,25c73da5),HV(302a92dc,fa753f8d),HV(1f562d18,44bc0658),
    HV(ea3818e2,e41c429f),HV(b962e2c8,331d613d),HV(23702d8c,8b21d431),HV(c54c9f31,7808b543),
    HV(d0b6d214,b3ea1637),HV(451a51fc,7ee8dd59),HV(d7c1c4fd,619b0827),HV(1871fe3b,b439cbb8),
    HV(b7585779,87ec3465),HV(8b0e8ea6,50b555c9),HV(e3e8300a,a381f422),HV(9e3df168,94402eb1),
    HV(47b1ce91,4567bd15),HV(5d8d2489,73abb7d7),HV(3223996f,e561fd7b),HV(32ce3335,4c99e8ba),
    HV(49e81ec7,958fabf3),HV(60c0d6ce,0f3a6947),HV(657ee8c1,8eadc52b),HV(7b371b6b,dca081eb),
    HV(359d68fa,1437b606),HV(692adab3,216da89a),HV(16bb3309,3b038acc),HV(c5b950ef,c99da19b),
    HV(862c3528,91f6a8d5),HV(a3f37b55,f536f721),HV(6b8a74b2,ea54ed79),HV(07328cf8,feb1b283),
    HV(f670d03f,2e036e3b),HV(505bcd90,78b28d2d),HV(65ba4818,694d38d7),HV(393232e9,111acd61),
    HV(c8f71398,0802596c),HV(06d78b03,f09c7d41),HV(a0f02da0,20d3173f),HV(27a13b9b,edd8512f)
};
#if ERWIN_HASH_STRENGTH >= 3
/* good for x + table[(x >> 0) & 0xff] */
erwin_random_table_t erwin_random_table3= {
    HV(60593584,d251f68c),HV(9cfa2c24,d71649f8),HV(1615853e,7b00e190),HV(352cada2,50dff4fe),
    HV(69133aa3,d1e34bdb),HV(b11c88a9,33df4986),HV(a4abd007,5e2a7ac8),HV(9c75d3f2,95c0f242),
    HV(674fbd65,33021924),HV(c4b008ea,4a109550),HV(00d7dfcd,397e8ab0),HV(b517425c,716017b3),
    HV(c1695acb,95598b74),HV(61bb3deb,e41913c9),HV(ecbb1350,92b4f3e6),HV(0f530602,f0d64a01),
    HV(5e366798,e4750413),HV(3f6e500e,62fd5aac),HV(f748ece1,d92dfda5),HV(f659240f,33efdfcf),
    HV(8bac354e,f27c2f46),HV(2b21fb74,4b136e1f),HV(84c6e74a,8ec901a5),HV(2f7568a1,eda75778),
    HV(4283ac96,cb2de850),HV(7de14ede,9e570bb6),HV(4cf5252e,b9bbe131),HV(b2d3b2b3,4dd94289),
    HV(4b79da4a,77b120e2),HV(a6696086,26fdc573),HV(c1760caa,5e2c9627),HV(bea01959,e9e7a005),
    HV(530b8b26,75348f62),HV(f74fb077,24d9aa90),HV(ec44aed3,617f47da),HV(1bd24417,e318b713),
    HV(0e010a88,0fb0dd1a),HV(73315e91,2d649af4),HV(35e11de6,41deb4ad),HV(83c1f894,8435c7ad),
    HV(568d8733,3d1320b3),HV(bba262ba,37baa9bc),HV(849fa3f0,ffbe566c),HV(cefa7385,035b1d56),
    HV(08c2c167,f8f31cf5),HV(fa84f850,fc17eb1a),HV(03ec11df,b81f4cc0),HV(6d223915,5da71400),
    HV(62c075e4,5adc2a7b),HV(9094ba2f,2cf43dc5),HV(8c388211,b0ca3068),HV(aa0402fd,f77ba249),
    HV(d922562e,af01be63),HV(8ba11dbe,36904e6e),HV(aa16953b,7444d0f8),HV(10c51635,68580746),
    HV(1f65b701,feae64b3),HV(e8e56a06,71b80026),HV(11b3f197,93959510),HV(b94eb00c,8d9f1863),
    HV(ec5584cd,e7b24f3d),HV(a91da596,ba769e2a),HV(637f1058,ae16f075),HV(02247679,d39c5ac6),
    HV(0f793f77,11b4c6e9),HV(d0d59fb9,ca622ae6),HV(67a4228a,40478af8),HV(7b116bb5,ad0e9cee),
    HV(44323e10,7a698ff4),HV(8f15b4c1,9ce0058b),HV(25783a43,b8c3b938),HV(76b68886,aa717461),
    HV(5bcbe322,3f667396),HV(327cd61e,d93ea748),HV(260155b1,df4f9921),HV(a2619a2f,92e713f2),
    HV(8f14eb1b,c6778807),HV(d4706bc7,aede20c7),HV(72036264,e9f0510a),HV(e7d53026,3d46c267),
    HV(d3b58ee5,f293fb1f),HV(e5ac7341,b374b79b),HV(77b9c892,4bce274d),HV(eb364f06,dbc03c37),
    HV(6432e9fb,9730e46e),HV(d66fe833,10070625),HV(309b647c,842201d7),HV(a14748d8,faba94ab),
    HV(68268f62,2f1b6d2b),HV(38032a4d,4645e40a),HV(065a5cad,e1166671),HV(10546401,eb510e82),
    HV(ff983a4f,3560c229),HV(3e698c9d,ad69ade3),HV(82af5903,22662d0f),HV(3c833c12,379c3e51),
    HV(fd05d6da,e68771e8),HV(0eff6eed,fc41fcbe),HV(e3c24678,8195195f),HV(fea9846b,eaf55ecf),
    HV(78cd2381,c23c9839),HV(6478923c,fdb6edd4),HV(683d6e3e,88faf381),HV(f4051501,dd10c17f),
    HV(81a31420,8e20214d),HV(9ca644f7,0572c8a5),HV(6e4e166b,b62e851a),HV(013a88f2,4c4c0f22),
    HV(47d21357,a11a9d9b),HV(6bf40025,946ff6ee),HV(a6311907,4c3b329a),HV(14ed2832,9f0328c8),
    HV(a69d22fb,88d033d3),HV(dfa3353b,feaaa14e),HV(c6e8bc38,979b16ab),HV(ad6aa19e,e942c3a3),
    HV(0cfd7ca6,ed28136d),HV(05a7b23d,89f7a77c),HV(d8329c01,21bcb794),HV(7115517e,78cfe645),
    HV(30cc3f5f,7c371d50),HV(a1999a4b,9966d134),HV(2e022553,a8821d85),HV(c92f3f90,6f8345b0),
    HV(4594f683,074f7868),HV(137c40c1,29346a8e),HV(b7e64af1,50be1065),HV(aa61ce2b,a01bc614),
    HV(e3a451d5,bfa806d4),HV(8555ab33,7e548d85),HV(5fdd6ace,981e618a),HV(e16b2e57,e583a280),
    HV(19905262,a30fd4a2),HV(b507f0ac,b4092c92),HV(4c6ed8b1,6ac4470e),HV(30b0bbc3,a202cf6b),
    HV(3b70b8f7,08e81a92),HV(1723293d,936a51c5),HV(27828dcc,ab652816),HV(978b4b22,3e6b8bc2),
    HV(92141c4b,c3ae2a71),HV(a070986a,b5ce9cdd),HV(74e0f93f,aa7c5b61),HV(a385ba64,5b13daff),
    HV(70faf91f,551079b2),HV(5ac536a9,78073591),HV(1f250f5d,015451ed),HV(39a2a68d,b390b645),
    HV(514d01ab,1ba53e7e),HV(52973a96,e9cdc07e),HV(35780274,bf35a314),HV(3a3bbde6,c19e24d7),
    HV(2c64780a,ea1188ce),HV(85ad7ed9,674c7b43),HV(49f5a40d,07c6cc53),HV(96e6a262,0d05925d),
    HV(a07371d2,312fa199),HV(61405420,285262c3),HV(5b9b649f,10833304),HV(ab2761e6,23652f58),
    HV(f43b0420,84046a85),HV(29df430f,ee82f9d3),HV(1190ed18,b1a1537c),HV(45cf8fbb,a9fc92bf),
    HV(9c087a94,982b7f1f),HV(895bde61,68a92025),HV(69bbd58c,79c9c4c3),HV(169fb050,e67bdef4),
    HV(9f9c5ce4,f65015d0),HV(a6d87d19,4fe3b696),HV(1e408bcc,7f4bdf1c),HV(7d51a2b8,312d7caa),
    HV(0229c6c0,3232b549),HV(00454275,d265b8eb),HV(acb71636,44564e7a),HV(c481285f,7e8cbded),
    HV(9c24fc85,9c3182c0),HV(1c31f7cc,f56f1b16),HV(ae90d5a9,2af355d5),HV(2d8c846c,121e83a3),
    HV(89259550,49b91b50),HV(2ef76649,079d8675),HV(051ce493,15d1880f),HV(0c835b08,90f8aef8),
    HV(47887e0c,236a0c68),HV(20ac2c63,4c4c64bc),HV(7cfa56eb,7dd2fc62),HV(1d8bcc43,fd77d6f7),
    HV(f2f78d84,9183dcb0),HV(88aad6cd,3b85c2a1),HV(842770a9,b15c6fb3),HV(286620df,1f2ee2e6),
    HV(0f9eb121,8931a209),HV(482129ac,642612c7),HV(59c7908d,c6be7053),HV(cb99fc51,bf724770),
    HV(933833cd,4ef2c4b7),HV(20086e24,4bc5353b),HV(a1e8038b,c1261dad),HV(92603483,e150ed0e),
    HV(3d210695,bcd481fc),HV(ba8542b2,afece6c0),HV(5c8d0dee,9df33077),HV(d908611a,014a9286),
    HV(e9f5c53f,fb44a83d),HV(e6045497,99a85ea5),HV(d1121852,097e241c),HV(757c529c,88938819),
    HV(c765b756,c02d7bfd),HV(934e6dac,c586eb09),HV(4c9c4550,84858fd4),HV(9d5e0aaf,8209443c),
    HV(aab5667a,8b5b5805),HV(ac5c31b8,022cb066),HV(c04c67a6,1a72f1d8),HV(e4448742,8f5f25a0),
    HV(0a0ebbe0,f58ab6c9),HV(50e932d0,ce229c21),HV(650cde3c,d3b8cc19),HV(11c4be92,a0c0e477),
    HV(589c1175,63a554b9),HV(40ade0e7,652a4013),HV(cfb0da6e,6b01a287),HV(ee56ded6,4482aeca),
    HV(62bd0beb,a28b8a50),HV(6224e311,64fbfa65),HV(8b8c1806,380ff9f5),HV(cc48a2f5,7bdf2cd5),
    HV(669508c6,d5132e37),HV(62ac8a95,f4480178),HV(2e4b9850,4b409a27),HV(5ff5a249,09a84dcd),
    HV(344473c2,32a1e767),HV(987f5b28,18f38ee9),HV(4667b819,b25552af),HV(251c3b07,7cb53726),
    HV(1f4018f3,c213f164),HV(4a489e32,96e6425f),HV(b5fe6c41,f8a6ead2),HV(d92c18b6,e1e3d997),
    HV(fbbe3640,98dd9828),HV(1110c16f,e91e8ef8),HV(60914908,54dd6a84),HV(dac1685c,f0d627b4),
    HV(a5d22770,312a4a63),HV(cade29b8,2d50af67),HV(845322cc,aa9e194e),HV(70ecd90d,07ca136a),
    HV(dc575b85,0396b4d4),HV(c7424c7d,24e7f0d8),HV(11202788,64fd06bf),HV(881e0b05,be8f61e5),
    HV(353d0c54,27b9f8ff),HV(07b6e0a9,58baf967),HV(f40dfd41,2186c13e),HV(b2dcae25,ad3100ad)
};
erwin_random_table_t erwin_random_table4= {
    HV(d92ad15e,cb7232a3),HV(d855c965,fbac4efc),HV(385f3dae,f181ad6c),HV(602fab70,c4e8edac),
    HV(7db9ca0c,b7f62a5e),HV(7621bef2,66771855),HV(f53c53ce,4fc321c6),HV(b8c6ba4b,d6015e21),
    HV(07b73c4a,83ec6335),HV(f07c80f9,06f43723),HV(769020be,eee2b401),HV(155031e7,847e8546),
    HV(80d8aa1d,eda5144a),HV(81082534,da46813b),HV(850bf891,33e0f19c),HV(f71327ee,1b22c700),
    HV(f05c9472,6ae920d9),HV(d63e7d8e,b12175c8),HV(b3e99360,85377a5c),HV(c7cd10db,48b05da7),
    HV(caf8f91e,6e177962),HV(9a54c7b9,dab38d2e),HV(95293d88,ee1da65e),HV(6bf165ec,b15849ef),
    HV(1cd95717,20bfe0fd),HV(164ed95d,aa18c11f),HV(42935360,70b645d6),HV(d1180914,737e69fe),
    HV(39328ddf,f3025acf),HV(0ebcc5e7,4b4be02d),HV(53affefc,f429a854),HV(f3d5699e,0cdec2b1),
    HV(12f262f4,2105d2a0),HV(2f632142,1d313bb2),HV(c2b9752e,227169ee),HV(e13afba0,063a5f59),
    HV(4534f656,93ebf1f3),HV(1c0c450b,6afd990e),HV(4e0990e2,3bb85143),HV(ca59a4cb,6748a85d),
    HV(e857ca7a,8923bc1c),HV(a42ccc44,cb9e9094),HV(b5d6d461,08682d80),HV(d4f25e68,b7c3e0b2),
    HV(11885b18,db706bac),HV(14854929,1eaf1af0),HV(8cdd8de0,5491787b),HV(acf17587,4bd18486),
    HV(7e1971cc,3e01bd00),HV(6ed1c86e,2b8623e9),HV(62db330c,40fea101),HV(a23e2de7,12ade861),
    HV(0bb2e918,a7b9f23e),HV(a32b63c0,19defc98),HV(b7068170,2f2ed49f),HV(813197b4,6ec51d3d),
    HV(ce32bd49,25c56994),HV(87013bd8,09d9430f),HV(d77fb181,8eb2e475),HV(f1f20b95,1c403653),
    HV(0d5696ec,8865f6d5),HV(f6de38aa,f3e944f3),HV(0fb9242f,3836d284),HV(6d1a51bc,cda46af9),
    HV(47d3d5f9,a05ca365),HV(d07ce904,aefbfac2),HV(7efdfb54,b3dd86bc),HV(56fd897e,853afe5e),
    HV(858d1efd,77b84fdc),HV(acad0cd6,cf6eb32c),HV(367854a4,11cf5612),HV(281d9be0,1c701c7d),
    HV(51288e90,bde79a47),HV(22657b69,3b26b294),HV(10d7f02a,07529548),HV(0a4f1536,1685c9f7),
    HV(eba61cc1,ded7e9c1),HV(78becfc4,07575ee1),HV(5d048cda,361cb4ac),HV(8e4c6cf5,1628aae8),
    HV(328f874b,be6eefb9),HV(c2940761,af3902ba),HV(c65e0039,82c79d51),HV(3a585cf2,27b45659),
    HV(35169c23,408ed228),HV(2bd621ff,5ac15a0b),HV(74e0b308,4229480f),HV(8e403ec2,10aa7f1e),
    HV(8a6961e6,467ab8e2),HV(fdd05f79,4530a8e2),HV(89793f82,823c4339),HV(6cfa93fa,97ed014e),
    HV(34d374ae,ad5bef53),HV(268d828c,5dfc386a),HV(589ef8a9,776b7794),HV(dbd35074,6266b647),
    HV(35ac6678,fe965cf8),HV(3e28b651,e0b8c9b5),HV(2533fd19,31ab62fb),HV(bb3b0e4a,40d3e748),
    HV(9ca7b927,0ee4ed79),HV(1b91de18,05d02984),HV(efc8dd4d,18a608d8),HV(1561d176,18895847),
    HV(a6739143,ddf91082),HV(c8833c1e,827f0362),HV(10e2043e,59ec7694),HV(d7ba29b5,7ff1652e),
    HV(acef95fb,73c3c080),HV(3cd98b9c,d89abdab),HV(0510df93,d5c615f2),HV(72813bf0,af9dc1e5),
    HV(213be857,641db210),HV(6f69bc33,0ab50ed6),HV(40731640,f0851511),HV(269a3e42,8dff71c4),
    HV(d1f4df9d,a9ce245a),HV(6670ec81,172130e3),HV(aeabb3e7,a384434e),HV(7329b59d,9ce1c670),
    HV(5e427afb,4ae6f368),HV(e3a603c4,43e36f30),HV(4c22aed3,4d6fcf56),HV(d193f8d1,568f2c4b),
    HV(62e0c2c7,aa581073),HV(7a844aa2,c60f9aba),HV(fe7d9ed5,2c893790),HV(5cc0969e,a62d6068),
    HV(a2011720,839bf1db),HV(738993ea,11c1aa3a),HV(2342f61b,dd1b0afd),HV(9b20adf0,cb2d80ed),
    HV(6b870b3d,556473f2),HV(39ad759d,b2f831df),HV(82d2c85c,2f5d6e5d),HV(85d6ac27,b854e4a5),
    HV(5ce53ea9,b17767db),HV(c5745ac0,b5b0b470),HV(c777d568,16e8d228),HV(9aa2412a,266bae53),
    HV(2fd66c6b,bf9ef996),HV(748762ad,2092f01c),HV(f8cd5927,73522eef),HV(3dc7bb89,927dac12),
    HV(d1ccf679,414a3a4c),HV(5bf851c3,2b559789),HV(40959d6f,8cb4b3fb),HV(a777bf71,1a089ffe),
    HV(0fa3717b,56ff6a37),HV(2087d2ca,f8ab5254),HV(176a755f,f3a0632d),HV(82ffd462,2173bb26),
    HV(7153d956,53741bc4),HV(302a1bfb,d5d0c5a9),HV(93e58e1d,25ba8fd8),HV(e96c5d66,29cc1e13),
    HV(e78f820e,ead8e212),HV(6c511a13,654358c0),HV(d32739fa,6b66eee5),HV(3e2190ab,426ad550),
    HV(4c7943b1,985199fd),HV(67b08460,52555d83),HV(7d5df292,aa0a6f0e),HV(1b891cd7,76fa041a),
    HV(79c43cac,52c4c658),HV(d76ab5dd,7b754fd5),HV(d9c7423a,522f9c04),HV(46dab830,2ee27630),
    HV(54190d47,7aa149ac),HV(e3ee050d,a2403bd6),HV(6c0f79c8,4a862a92),HV(a4b30684,fc0e8990),
    HV(d8b1edee,e93d553b),HV(e4d614ee,cfb33bbc),HV(8b6d3fcf,5c5a7aff),HV(b79a0b09,657e096b),
    HV(fe0326d0,5d17f0d4),HV(5a2530fa,bc240b70),HV(2b263094,8aad42e8),HV(66c80a3b,faf569b6),
    HV(95c0eaff,a34f7898),HV(77409c8b,13a62e92),HV(a4cc6426,cb5f873f),HV(f7ad9e6c,93afb3a1),
    HV(e9dc8c18,3f4797b1),HV(c36fb764,bec3ae18),HV(30dbd5a2,0b933d72),HV(4b33fcc5,df7a2b15),
    HV(a79788a3,dc5d182d),HV(4e2d1433,7b206b9a),HV(d9581974,b2405816),HV(b83b82b2,f0f5bebe),
    HV(87845688,f9eaa1e1),HV(2a6deb37,1ff8824b),HV(40264e5f,50966115),HV(3a765f05,1671e519),
    HV(04fddb39,acbe8cf9),HV(8f46ad6b,9bf65ad5),HV(08bbb006,e44e4cd9),HV(7fd4ccad,51fa2a9e),
    HV(2bed450e,22c71453),HV(46f814b8,54ce532b),HV(f617806f,cfcc8e3c),HV(d102557a,f214eb5e),
    HV(e52a5044,3aa07e38),HV(090ce043,e81f5a89),HV(c2de59dd,a2c3fd9e),HV(820ef9bf,ceabaf01),
    HV(477ea2c5,845c687f),HV(1f016118,1e921073),HV(158ebe63,87001130),HV(1eeffb02,c6ccb5f7),
    HV(e0dfe5fc,48103fcf),HV(a8e48779,a11cf8d3),HV(12dbf620,e9364fa5),HV(9631cb3a,d19a83dd),
    HV(1c7ebb75,e3f716b8),HV(0bac6586,a4209b49),HV(5346a5cb,628d779c),HV(439c5e92,1bf5af03),
    HV(817956af,4f82c873),HV(cf95ff97,815c0a3a),HV(6ab07a46,14d77c9b),HV(fe05c95b,50a0ac3e),
    HV(91090e24,c1e81446),HV(3c2d3177,d347fa38),HV(6809c0f4,61b54bdd),HV(b562f733,fc3072c9),
    HV(29aa921a,098b65d9),HV(81230efb,ffdb8a79),HV(5822b4b9,6c65d042),HV(fc499725,ee9cb5da),
    HV(74e9e7cd,536ad39c),HV(10e98ce4,8ce6cdb1),HV(c04fe6a1,6552e229),HV(1bc956ec,e2d9b614),
    HV(4de56e29,9d43fd61),HV(69f28fa2,fac0d97d),HV(e40e7a77,d60b7314),HV(884b0f1c,57954e88),
    HV(ba09c4c7,35a89960),HV(2aa7bf01,e6a3fbc7),HV(8424296a,adc06e3d),HV(bf50c3b1,57c9174b),
    HV(b7faa2c1,61c3cc35),HV(885170f9,d66a60eb),HV(d27b16a9,1cd42544),HV(222c9b2c,fc64bafa),
    HV(8b2feafd,c1124f8f),HV(f33d3ddf,d8896757),HV(4db81d9b,8080bb30),HV(270ab8f2,5962f2e6),
    HV(c0e5fc95,92b33c5f),HV(150d8fb7,c867248e),HV(c9b6ddb6,4da80d47),HV(ad4057c7,ebc78986)
};
#endif /* ERWIN_HASH_STRENGTH >= 3 */
#endif /* ERWIN_HASH_STRENGTH >= 1 */

ERWIN_BOOL erwin_mapinitialised= ERWIN_FALSE;

#if !defined(ERWIN_THREAD_SAFE) || ERWIN_USE_THREAD_KEYWORD

ERWIN_THREAD_LOCAL
int erwininternalmaperrno= ERWININTERNALMAPOK;

#elif ERWIN_USE_PTHREAD

static pthread_key_t  key;
static pthread_once_t key_once= PTHREAD_ONCE_INIT;

static void make_key()
{
    pthread_key_create(&key, NULL);
}

int *erwininternalmaperrnoptr(void)
{
    int *errno_ptr;

    pthread_once (&key_once, make_key);
    errno_ptr= (int*)pthread_getspecific(key);
    if (ERWIN_UNLIKELY(!errno_ptr)) {
        errno_ptr=  (int*)malloc(sizeof(int));
        *errno_ptr= ERWININTERNALMAPOK;
        pthread_setspecific(key, (void*)errno_ptr);
    }

    return errno_ptr;
}

#endif


char const *erwininternalmapstrerror (int i)
{
    switch (i) {
        case ERWININTERNALMAPOK:
            return "No error";

        case ERWININTERNALMAPERRNOMEM:
            return "Error: Memory exhausted";

        case ERWININTERNALMAPERRASSERTIONFAILED:
            return "Error: Assertion failed";

        case ERWININTERNALMAPWARNEXISTINGKEY:
            return "Warning: Key already exists";

        case ERWININTERNALMAPWARNKEYNOTFOUND:
            return "Warning: Key not found";

        case ERWININTERNALMAPWARNEMPTY:
            return "Warning: Map is empty";

        case ERWININTERNALMAPWARNNOMOREELEMS:
            return "Warning: No more elements";

        case ERWININTERNALMAPREHASHNOMEM:
            return "Warning: Rehash ran out of memory";

        case ERWININTERNALMAPREHASHDUPLICATEKEY:
            return "Warning: Rehash found duplicate key";

        case ERWININTERNALMAPREHASHRECURSION:
            return "Warning: Rehash went into recursion";
    }
    return "Error: Unknown error code";
}

void erwin_init_map (void)
{

    if (ERWIN_UNLIKELY(!erwin_mapinitialised))
    {
#ifdef ERWIN_REQUIRE_DETERMINISM
        /* If we require determinism, the tables will not be modified. */
#else
        int i;
#if ERWIN_HASH_STRENGTH >= 1
        hashval_t a1= ERWIN_RANDOM_FUNC() & ~((hashval_t)0x00ff);
        hashval_t a2= ERWIN_RANDOM_FUNC() & ~((hashval_t)0xff00);
#if ERWIN_HASH_STRENGTH >= 3
        hashval_t a3= ERWIN_RANDOM_FUNC() & ~((hashval_t)0x00ff);
        hashval_t a4= ERWIN_RANDOM_FUNC() & ~((hashval_t)0xff00);
#endif /* ERWIN_HASH_STRENGTH >= 3 */
            /* Add the same value to all elements to ensure that no
             * table entries become equal.  By using ^ to incorporate the random,
             * the hamming distance is the same as before. */
        for (i= 0; i < 256; i++) {
            erwin_random_table [i]^= a1;
            erwin_random_table2[i]^= a2;
#if ERWIN_HASH_STRENGTH >= 3
            erwin_random_table3[i]^= a3;
            erwin_random_table4[i]^= a4;
#endif
        }
#endif /* ERWIN_HASH_STRENGTH >= 1 */
#endif /* ERWIN_REQUIRE_DETERMINISM */
        erwin_mapinitialised= ERWIN_TRUE;
    }
}

/* ********************************************************************** */

#if defined(ERWIN_U64)

ERWIN_STATIC_INLINE ERWIN_U64 make_uint64 (
    ERWIN_U8 c1,ERWIN_U8 c2,ERWIN_U8 c3,ERWIN_U8 c4,
    ERWIN_U8 c5,ERWIN_U8 c6,ERWIN_U8 c7,ERWIN_U8 c8)
{
    return
        (((ERWIN_U64)c1)      ) |
        (((ERWIN_U64)c2) <<  8) |
        (((ERWIN_U64)c3) << 16) |
        (((ERWIN_U64)c4) << 24) |
        (((ERWIN_U64)c5) << 32) |
        (((ERWIN_U64)c6) << 40) |
        (((ERWIN_U64)c7) << 48) |
        (((ERWIN_U64)c8) << 56);
}

#endif /* defined ERWIN_U64 */

ERWIN_STATIC_INLINE ERWIN_U32 make_uint32 (ERWIN_U8 c1,ERWIN_U8 c2,ERWIN_U8 c3,ERWIN_U8 c4)
{
    /* low byte first */
    return
        (((ERWIN_U32)c1)      ) |
        (((ERWIN_U32)c2) <<  8) |
        (((ERWIN_U32)c3) << 16) |
        (((ERWIN_U32)c4) << 24);
}

#define HASH1U8(state, hash,c,e)                                      \
        do{                                                           \
            if (c >= e) return ERWIN_STATE_GET_HASHVAL(state); \
            ERWIN_STATE_MIX_ORDERED(state,hash(*(c)));         \
            (c)++;                                                    \
        }while(0);


#define HASH1U16(state, c,e)                                                   \
        do{                                                                    \
            if (c >= e) return ERWIN_STATE_GET_HASHVAL(state);          \
            ERWIN_STATE_MIX_ORDERED(state,erwin_u16_hash(*(c))); \
            (c)++;                                                             \
        }while(0);

hashval_t erwin_u8_array_hash (ERWIN_U8 const *c, size_t l)
/* distinguishes NULL and "" */
{
    ERWIN_U8 const *e;
    erwin_hash_state_t state;

    if (ERWIN_UNLIKELY(c == NULL))
        return ERWIN_HASH_INIT;

    ERWIN_STATE_INIT_WITH (state, size_t_hash(l));
    e= c+l;

    /* we want the same value for all architectures (otherwise comparison
     * becomes hard), so we use low byte first order on all machines. */
#if defined(ERWIN_BYTE_ORDER)
    if ((((unsigned long)c) & 3) == 0) {
        for (; c + 4 <= e; c+= 4)
            ERWIN_STATE_MIX_ORDERED(
                state,
                erwin_u32_hash(
                    erwin_int2lbf32(*((ERWIN_U32*)c))   /* make it low byte first */
                )
            );
    }
    else
#endif /* ERWIN_BYTE_ORDER */
    {
        for (; c + 4 <= e; c+= 4)
            ERWIN_STATE_MIX_ORDERED(
                state,
                erwin_u32_hash(
                    make_uint32( /* low byte first as above */
                        c[0],
                        c[1],
                        c[2],
                        c[3])));
    }

    HASH1U8(state, char_hash2, c, e);
    HASH1U8(state, char_hash3, c, e);
    HASH1U8(state, char_hash4, c, e);

    return ERWIN_STATE_GET_HASHVAL(state);
}


hashval_t erwin_u8_array_case_hash (ERWIN_U8 const *c, size_t l)
{
    ERWIN_U8 const *e;
    erwin_hash_state_t state;

    if (ERWIN_UNLIKELY(c == NULL))
        return ERWIN_HASH_INIT;

    ERWIN_STATE_INIT_WITH (state, size_t_hash(l));
    e= c+l;

    for (; c + 4 < e; c+= 4)
        ERWIN_STATE_MIX_ORDERED(
            state,
            erwin_u32_hash(
                make_uint32(
                    char_to_lower(c[0]),
                    char_to_lower(c[1]),
                    char_to_lower(c[2]),
                    char_to_lower(c[3]))));

    HASH1U8(state, char_case_hash2, c, e);
    HASH1U8(state, char_case_hash3, c, e);
    HASH1U8(state, char_case_hash4, c, e);

    return ERWIN_STATE_GET_HASHVAL(state);
}

hashval_t erwin_u16_array_hash (ERWIN_U16 const *c, size_t l)
{
    ERWIN_U16 const *e;
    erwin_hash_state_t state;

    if (ERWIN_UNLIKELY(c == NULL))
        return ERWIN_HASH_INIT;

    ERWIN_STATE_INIT_WITH (state, size_t_hash(l));
    e= c+l;

    for (; c < e; c++)
        ERWIN_STATE_MIX_ORDERED(state, erwin_u16_hash(*c));

    return ERWIN_STATE_GET_HASHVAL (state);
}

hashval_t erwin_u32_array_hash (ERWIN_U32 const *c, size_t l)
{
    ERWIN_U32 const *e;
    erwin_hash_state_t state;

    if (ERWIN_UNLIKELY(c == NULL))
        return ERWIN_HASH_INIT;

    ERWIN_STATE_INIT_WITH (state, size_t_hash(l));
    e= c+l;

    for (; c < e; c++)
        ERWIN_STATE_MIX_ORDERED(state, erwin_u32_hash(*c));

    return ERWIN_STATE_GET_HASHVAL (state);
}

#ifdef ERWIN_U64

hashval_t erwin_u64_array_hash (ERWIN_U64 const *c, size_t l)
{
    ERWIN_U64 const *e;
    erwin_hash_state_t state;

    if (ERWIN_UNLIKELY(c == NULL))
        return ERWIN_HASH_INIT;

    ERWIN_STATE_INIT_WITH (state, size_t_hash(l));
    e= c+l;

    for (; c < e; c++)
        ERWIN_STATE_MIX_ORDERED(state, erwin_u64_hash(*c));

    return ERWIN_STATE_GET_HASHVAL (state);
}

#endif
