#
# Author: Henrik Theiling
#
# @@Begin: Licencing and Copying@@
#
# Copyright (c) 1999 Henrik Theiling
#
# The term `this software' used in the following, additional to its
# usual usage, also includes the instantiated source files generated by
# tools from this package.
#
# This software is provided 'as-is', without warranty of any kind,
# express or implied.  In no event will the authors or copyright holders
# be held liable for any damages arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must
# not claim that you wrote the original software. If you use this
# software in a product, an acknowledgment in the product documentation
# would be appreciated but is not required.
#
# 2. Altered source versions must be plainly marked as such, and must
# not be misrepresented as being the original software.
#
# 3. You must not use any of the names of the authors or copyright
# holders of the original software for advertising or publicity
# pertaining to distribution without specific, written prior permission.
#
# 4. This notice may not be removed or altered from any source
# distribution.
#
# This licence is governed by the Laws of Germany.  Disputes shall be
# settled by Saarbruecken City Court.
#
# @@End: Licencing and Copying@@
#

VERSION=2.1.89877

WIN_NOLOGO=
# Nothing until an option exists that does echo the cmd line but
# suppresses the logo

CC=cl $(WIN_NOLOGO)
CXX=cl $(WIN_NOLOGO)
LD=link $(WIN_NOLOGO)
AR=lib $(WIN_NOLOGO)

# WRONG:
# TSORT and LORDER are not needed here: the MSVC++ linker determines
# the order itself.  This is the first positive thing I haveve ever
# learnt about this compiler <running to the calender marking today
# with a red pen>.  Hopefully I am right in thinking this... :-/
#
# No.
#
# Yes, the order does not seem to matter.  So far so good.  But the
# linker is not guaranteed to do it right.  It seems that it depends
# on the moon whether the initialisation order is correct.

CPPFLAGS=$(LESS_CPPFLAGS) -I../include -Iinclude -I.. /I $(SUBDIR) /I $(SUBDIR2) /I $(SUBDIR3) \
         /DERWIN_DOS=1 \
         /DERR_ERWIN_COMPILING=1 \
         /DERWIN_MSVC=1 \
         /D_CRT_SECURE_NO_DEPRECATE /D_CRT_NONSTDC_NO_DEPRECATE \
         -DHAVE_LIBERROR $(MORE_CPPFLAGS)
CXXFLAGS=$(LESS_CXXFLAGS)  /TP /MD  $(MORE_CXXFLAGS)
CFLAGS=$(LESS_CFLAGS)  /TC /MD  $(MORE_CFLAGS)

#EXT=.obj
#PREFIX=lib\
TARGETS= \
 lib\err_map_int_map_int_v_callback.obj lib\err_map_int_v_callback.obj \
 lib\err_map_symbol_stream.obj lib\err_map_symbol_string.obj \
 lib\err_map_char_p_char_p.obj lib\err_map_int_callback.obj \
 lib\err_map_int_v_stream.obj lib\err_map_file_stream.obj \
 lib\err_map_symbol_int.obj lib\err_map_int_char_p.obj \
 lib\err_v_char_const_p.obj lib\err_map_int_symbol.obj lib\err_map_int_bool.obj \
 lib\err_map_int_int.obj lib\err_v_callback.obj lib\err_v_message.obj \
 lib\err_v_stream.obj lib\err_v_buffer.obj lib\err_v_char.obj \
 lib\err_symtab.obj \
 lib\err_v_int.obj
SUBDIR=src
SUBDIR2=include
SUBDIR3=include

INIT_TARGETS=lib\init.obj
BASE_TARGETS=lib\map.obj lib\vector.obj lib\base.obj lib\list.obj
OBJECTS=$(INIT_TARGETS) $(TARGETS) $(BASE_TARGETS)

all: lib\errerwin.lib

clean: dummy
	-del lib\errerwin.lib $(OBJECTS)

lib\map.obj: lib\map.c
	$(CC) @<<maketmp
lib\map.c $(CPPFLAGS) $(CFLAGS) /c
<<
	-move /Y map.obj lib\map.obj

lib\init.obj: lib\init.c
	$(CC) @<<maketmp
lib\init.c $(CPPFLAGS) $(CFLAGS) /c
<<
	-move /Y init.obj lib\init.obj

lib\vector.obj: lib\vector.c
	$(CC) @<<maketmp
lib\vector.c $(CPPFLAGS) $(CFLAGS) /c
<<
	-move /Y vector.obj lib\vector.obj

lib\list.obj: lib\list.c
	$(CC) @<<maketmp
lib\list.c $(CPPFLAGS) $(CFLAGS) /c
<<
	-move /Y list.obj lib\list.obj

lib\base.obj: lib\base.c
	$(CC) @<<maketmp
lib\base.c $(CPPFLAGS) $(CFLAGS) /c
<<
	-move /Y base.obj lib\base.obj

#RULE lib\%.obj: $(SUBDIR)\%.--SOURCE-ENDING--
#	--COMPILER-- @<<maketmp
#$< $(CPPFLAGS) --COMPILER-FLAGS-- /c
#<<
#	-move /Y %.obj $@
#
lib\err_map_int_callback.obj: $(SUBDIR)\err_map_int_callback.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_map_int_callback.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_map_int_callback.obj lib\err_map_int_callback.obj

lib\err_map_int_v_callback.obj: $(SUBDIR)\err_map_int_v_callback.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_map_int_v_callback.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_map_int_v_callback.obj lib\err_map_int_v_callback.obj

lib\err_map_symbol_int.obj: $(SUBDIR)\err_map_symbol_int.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_map_symbol_int.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_map_symbol_int.obj lib\err_map_symbol_int.obj

lib\err_v_callback.obj: $(SUBDIR)\err_v_callback.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_v_callback.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_v_callback.obj lib\err_v_callback.obj

lib\err_map_symbol_stream.obj: $(SUBDIR)\err_map_symbol_stream.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_map_symbol_stream.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_map_symbol_stream.obj lib\err_map_symbol_stream.obj

lib\err_v_stream.obj: $(SUBDIR)\err_v_stream.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_v_stream.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_v_stream.obj lib\err_v_stream.obj

lib\err_map_symbol_string.obj: $(SUBDIR)\err_map_symbol_string.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_map_symbol_string.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_map_symbol_string.obj lib\err_map_symbol_string.obj

lib\err_v_char.obj: $(SUBDIR)\err_v_char.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_v_char.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_v_char.obj lib\err_v_char.obj

lib\err_map_int_map_int_v_callback.obj: $(SUBDIR)\err_map_int_map_int_v_callback.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_map_int_map_int_v_callback.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_map_int_map_int_v_callback.obj lib\err_map_int_map_int_v_callback.obj

lib\err_map_int_char_p.obj: $(SUBDIR)\err_map_int_char_p.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_map_int_char_p.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_map_int_char_p.obj lib\err_map_int_char_p.obj

lib\err_v_buffer.obj: $(SUBDIR)\err_v_buffer.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_v_buffer.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_v_buffer.obj lib\err_v_buffer.obj

lib\err_v_int.obj: $(SUBDIR)\err_v_int.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_v_int.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_v_int.obj lib\err_v_int.obj

lib\err_v_char_const_p.obj: $(SUBDIR)\err_v_char_const_p.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_v_char_const_p.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_v_char_const_p.obj lib\err_v_char_const_p.obj

lib\err_map_int_v_stream.obj: $(SUBDIR)\err_map_int_v_stream.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_map_int_v_stream.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_map_int_v_stream.obj lib\err_map_int_v_stream.obj

lib\err_map_int_symbol.obj: $(SUBDIR)\err_map_int_symbol.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_map_int_symbol.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_map_int_symbol.obj lib\err_map_int_symbol.obj

lib\err_map_file_stream.obj: $(SUBDIR)\err_map_file_stream.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_map_file_stream.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_map_file_stream.obj lib\err_map_file_stream.obj

lib\err_map_char_p_char_p.obj: $(SUBDIR)\err_map_char_p_char_p.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_map_char_p_char_p.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_map_char_p_char_p.obj lib\err_map_char_p_char_p.obj

lib\err_symtab.obj: $(SUBDIR)\err_symtab.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_symtab.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_symtab.obj lib\err_symtab.obj

lib\err_v_message.obj: $(SUBDIR)\err_v_message.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_v_message.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_v_message.obj lib\err_v_message.obj

lib\err_map_int_bool.obj: $(SUBDIR)\err_map_int_bool.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_map_int_bool.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_map_int_bool.obj lib\err_map_int_bool.obj

lib\err_map_int_int.obj: $(SUBDIR)\err_map_int_int.cpp
	$(CXX) @<<maketmp
$(SUBDIR)\err_map_int_int.cpp $(CPPFLAGS) $(CXXFLAGS) /c
<<
	-move /Y err_map_int_int.obj lib\err_map_int_int.obj

#END RULE

lib\errerwin.lib: $(OBJECTS)
	-del lib\errerwin.lib
	$(AR) $(WIN_NOLOGO) @<<maketmp
/out:$@ $(OBJECTS)
<<

dummy:


