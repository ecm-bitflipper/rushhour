/* -*- Mode: C -*- */
/* Generated Wed Sep 17 00:48:15 GMT 2008
 */
/*
 * Author: Henrik Theiling
 * Description:
 *     Public header file for maps with arbitrary key and value types.
 *
 */
/*
 * Copyright (c) 1999-2002 Henrik Theiling
 * 
 * This file was generated by tools of the Erwin library.  It may be used
 * freely.
 * 
 * This software is provided 'as-is', without warranty of any kind,
 * express or implied.  In no event will the authors or copyright holders
 * be held liable for any damages arising from the use of this software.
 * 
 * Disputes shall be settled by Saarbruecken City Court.
*/

#ifdef ERWIN_DEBUG_INCLUDE
#warning "Including err_map_int_v_callback.h"
#endif

#ifndef ERWIN_ERR_MAP_INT_V_CALLBACK_h
#define ERWIN_ERR_MAP_INT_V_CALLBACK_h

#ifdef ERWIN_DEBUG_INCLUDE
#warning "Including err_map_int_v_callback.h"
#endif

/* include the implementation */
#include "error/err_map_int_char_p.h"



#ifdef __cplusplus
extern "C" {
#endif


typedef int err_map_int_v_callback_index_t;
typedef ErrVCallback * err_map_int_v_callback_value_t;

struct _err_map_int_v_callback_pair_t {
    int key;
    ErrVCallback * value;
};
typedef struct _err_map_int_v_callback_pair_t err_map_int_v_callback_pair_t;

struct _err_map_int_v_callback_pair_ptr_t {
    int key;
    ErrVCallback * *value;
};
typedef struct _err_map_int_v_callback_pair_ptr_t err_map_int_v_callback_pair_ptr_t;



typedef int (*err_map_int_v_callback_pair_cmp_t)(err_map_int_v_callback_pair_t const *, err_map_int_v_callback_pair_t const *);
typedef int (*err_map_int_v_callback_pair_ptr_cmp_t)(err_map_int_v_callback_pair_ptr_t const *, err_map_int_v_callback_pair_ptr_t const *);
typedef int (*err_map_int_v_callback_void_pair_cmp_t)(void const *, void const *);
typedef ERR_ERWIN_BOOL (*err_map_int_v_callback_feature_t)(int , ErrVCallback * );

typedef int err_map_int_v_callback_key_result_t;

typedef ErrVCallback * *err_map_int_v_callback_element_ptr_t;


/* Handle Settings */
#ifndef ERR_MAP_INT_V_CALLBACK_DIRECT_RECURSION
#define ERR_MAP_INT_V_CALLBACK_DIRECT_RECURSION   0
#endif /* !defined ERR_MAP_INT_V_CALLBACK_DIRECT_RECURSION */

#ifndef ERR_MAP_INT_V_CALLBACK_NO_DEFAULT_ARGS
#define ERR_MAP_INT_V_CALLBACK_NO_DEFAULT_ARGS      ERR_MAP_INT_CHAR_P_NO_DEFAULT_ARGS
#endif /* !defined ERR_MAP_INT_V_CALLBACK_NO_DEFAULT_ARGS */

#ifndef ERR_MAP_INT_V_CALLBACK_MANY_CASTS
#define ERR_MAP_INT_V_CALLBACK_MANY_CASTS           ERR_MAP_INT_CHAR_P_MANY_CASTS
#endif /* !defined ERR_MAP_INT_V_CALLBACK_MANY_CASTS */

#ifdef ERR_MAP_INT_CHAR_P_NO_INT_CONSTRUCTOR
#ifndef ERR_MAP_INT_V_CALLBACK_NO_INT_CONSTRUCTOR
#define ERR_MAP_INT_V_CALLBACK_NO_INT_CONSTRUCTOR   ERR_MAP_INT_CHAR_P_NO_INT_CONSTRUCTOR
#endif /* !defined ERR_MAP_INT_V_CALLBACK_NO_INT_CONSTRUCTOR */
#endif /* defined ERR_MAP_INT_CHAR_P_NO_INT_CONSTRUCTOR */
#ifdef ERR_MAP_INT_CHAR_P_HAVE_INT_CONSTRUCTOR
#ifndef ERR_MAP_INT_V_CALLBACK_HAVE_INT_CONSTRUCTOR
#define ERR_MAP_INT_V_CALLBACK_HAVE_INT_CONSTRUCTOR ERR_MAP_INT_CHAR_P_HAVE_INT_CONSTRUCTOR
#endif /* !defined ERR_MAP_INT_V_CALLBACK_HAVE_INT_CONSTRUCTOR */
#endif /* defined ERR_MAP_INT_CHAR_P_HAVE_INT_CONSTRUCTOR */

#ifndef ERR_MAP_INT_V_CALLBACK_CONSTANT_ZERO
#define ERR_MAP_INT_V_CALLBACK_CONSTANT_ZERO        ERR_MAP_INT_CHAR_P_CONSTANT_ZERO
#endif /* !defined ERR_MAP_INT_V_CALLBACK_CONSTANT_ZERO */
#ifndef ERR_MAP_INT_V_CALLBACK_DYN_ZERO
#define ERR_MAP_INT_V_CALLBACK_DYN_ZERO             ERR_MAP_INT_CHAR_P_DYN_ZERO
#endif /* !defined ERR_MAP_INT_V_CALLBACK_DYN_ZERO */

#undef  ERR_MAP_INT_V_CALLBACK_USE_DEFAULT_ARGS
#if defined(__cplusplus) && ERR_MAP_INT_V_CALLBACK_NO_DEFAULT_ARGS == 0
#  define ERR_MAP_INT_V_CALLBACK_USE_DEFAULT_ARGS
#  define ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(X) = X
#  if ERR_MAP_INT_V_CALLBACK_MANY_CASTS == 0
#    define ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG_MANY(X)
#  else
#    define ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG_MANY(X) = X
#  endif
#else
#  define ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(X)
#  define ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG_MANY(X)
#endif

#undef  err_map_errno

#if ERR_ERWIN_GLOBAL_ERRNO
#  define err_map_errno err_erwininternalmaperrno
#endif

#undef  err_map_strerror
#define err_map_strerror err_erwininternalmapstrerror

#undef  ERR_MAP_OK
#define ERR_MAP_OK                     ERR_ERWININTERNALMAPOK

#undef  ERR_MAP_IS_OK
#define ERR_MAP_IS_OK(X)               ERR_ERWININTERNALMAPISOK(X)

#undef  ERR_MAP_IS_ERROR
#define ERR_MAP_IS_ERROR(X)            ERR_ERWININTERNALMAPISERROR(X)

#undef  ERR_MAP_IS_WARNING
#define ERR_MAP_IS_WARNING(X)          ERR_ERWININTERNALMAPISWARNING(X)

#undef  ERR_MAP_ERR_NOMEM
#define ERR_MAP_ERR_NOMEM              ERR_ERWININTERNALMAPERRNOMEM

#undef  ERR_MAP_ERR_ASSERTIONFAILED
#define ERR_MAP_ERR_ASSERTIONFAILED    ERR_ERWININTERNALMAPERRASSERTIONFAILED

#undef  ERR_MAP_WARN_EXISTINGKEY
#define ERR_MAP_WARN_EXISTINGKEY       ERR_ERWININTERNALMAPWARNEXISTINGKEY

#undef  ERR_MAP_ERR_EXISTINGKEY
#define ERR_MAP_ERR_EXISTINGKEY please_use_MAP_WARN_EXISTINGKEY_instead

#undef  ERR_MAP_WARN_KEYNOTFOUND
#define ERR_MAP_WARN_KEYNOTFOUND       ERR_ERWININTERNALMAPWARNKEYNOTFOUND

#undef  ERR_MAP_ERR_KEYNOTFOUND
#define ERR_MAP_ERR_KEYNOTFOUND please_use_MAP_WARN_KEYNOTFOUND_instead

#undef  ERR_MAP_WARN_EMTPY
#define ERR_MAP_WARN_EMPTY             ERR_ERWININTERNALMAPWARNEMPTY

#undef  ERR_MAP_WARN_NOMOREELEMS
#define ERR_MAP_WARN_NOMOREELEMS       ERR_ERWININTERNALMAPWARNNOMOREELEMS

#undef  ERR_MAP_REHASH_NOMEM
#define ERR_MAP_REHASH_NOMEM           ERR_ERWININTERNALMAPREHASHNOMEM

#undef  ERR_MAP_REHASH_DUPLICATEKEY
#define ERR_MAP_REHASH_DUPLICATEKEY    ERR_ERWININTERNALMAPREHASHDUPLICATEKEY

#undef  ERR_MAP_REHASH_RECURSION
#define ERR_MAP_REHASH_RECURSION       ERR_ERWININTERNALMAPREHASHRECURSION

#if ERWIN_CAST_INLINING
ERWIN_WRAPPER err_map_int_v_callback_t * err_map_int_v_callback_new (void)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER err_map_int_v_callback_t * err_map_int_v_callback_new (void) 
{
    return (err_map_int_v_callback_t *)(void*)err_map_int_char_p_new ();
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT err_map_int_v_callback_t * err_map_int_v_callback_new (void)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER err_map_int_v_callback_t * err_map_int_v_callback_new_with_initial_size (int a0)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER err_map_int_v_callback_t * err_map_int_v_callback_new_with_initial_size (int a0) 
{
    return (err_map_int_v_callback_t *)(void*)err_map_int_char_p_new_with_initial_size (a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT err_map_int_v_callback_t * err_map_int_v_callback_new_with_initial_size (int a0)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#if ERR_MAP_INT_V_CALLBACK_DYN_ZERO
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER err_map_int_v_callback_t * err_map_int_v_callback_new_with_zero (ErrVCallback *  a0)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER err_map_int_v_callback_t * err_map_int_v_callback_new_with_zero (ErrVCallback *  a0) 
{
    return (err_map_int_v_callback_t *)(void*)err_map_int_char_p_new_with_zero ((char * )a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT err_map_int_v_callback_t * err_map_int_v_callback_new_with_zero (ErrVCallback *  a0)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER err_map_int_v_callback_t * err_map_int_v_callback_new_with_zero_and_initial_size (ErrVCallback *  a0, int a1)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER err_map_int_v_callback_t * err_map_int_v_callback_new_with_zero_and_initial_size (ErrVCallback *  a0, int a1) 
{
    return (err_map_int_v_callback_t *)(void*)err_map_int_char_p_new_with_zero_and_initial_size ((char * )a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT err_map_int_v_callback_t * err_map_int_v_callback_new_with_zero_and_initial_size (ErrVCallback *  a0, int a1)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_init (err_map_int_v_callback_t * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int err_map_int_v_callback_init (err_map_int_v_callback_t * a0) 
{
    return err_map_int_char_p_init ((err_map_int_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_init (err_map_int_v_callback_t * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERR_MAP_INT_V_CALLBACK_DYN_ZERO
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_init_with_zero_and_initial_size (err_map_int_v_callback_t * a0, ErrVCallback *  a1, int a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int err_map_int_v_callback_init_with_zero_and_initial_size (err_map_int_v_callback_t * a0, ErrVCallback *  a1, int a2) 
{
    return err_map_int_char_p_init_with_zero_and_initial_size ((err_map_int_char_p_t *)(void*)a0, (char * )a1, a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_init_with_zero_and_initial_size (err_map_int_v_callback_t * a0, ErrVCallback *  a1, int a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_init_with_initial_size (err_map_int_v_callback_t * a0, int a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int err_map_int_v_callback_init_with_initial_size (err_map_int_v_callback_t * a0, int a1) 
{
    return err_map_int_char_p_init_with_initial_size ((err_map_int_char_p_t *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_init_with_initial_size (err_map_int_v_callback_t * a0, int a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_destroy (err_map_int_v_callback_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_destroy (err_map_int_v_callback_t * a0)
{
    err_map_int_char_p_destroy ((err_map_int_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_destroy (err_map_int_v_callback_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_xchg (err_map_int_v_callback_t * a0, err_map_int_v_callback_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_xchg (err_map_int_v_callback_t * a0, err_map_int_v_callback_t * a1)
{
    err_map_int_char_p_xchg ((err_map_int_char_p_t *)(void*)a0, (err_map_int_char_p_t *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_xchg (err_map_int_v_callback_t * a0, err_map_int_v_callback_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_destroy_flags (err_map_int_v_callback_t * a0, ERR_ERWIN_BOOL a1, ERR_ERWIN_BOOL a2) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_destroy_flags (err_map_int_v_callback_t * a0, ERR_ERWIN_BOOL a1, ERR_ERWIN_BOOL a2)
{
    err_map_int_char_p_destroy_flags ((err_map_int_char_p_t *)(void*)a0, a1, a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_destroy_flags (err_map_int_v_callback_t * a0, ERR_ERWIN_BOOL a1, ERR_ERWIN_BOOL a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if !ERR_ERWIN_GLOBAL_ERRNO
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_errno (err_map_int_v_callback_t const * a0)   ATTR_UNUSED ATTR_PURE  ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int err_map_int_v_callback_errno (err_map_int_v_callback_t const * a0)  
{
    return err_map_int_char_p_errno ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_errno (err_map_int_v_callback_t const * a0)   ATTR_UNUSED ATTR_PURE  ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_clear_errno (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER void err_map_int_v_callback_clear_errno (err_map_int_v_callback_t const * a0) 
{
    err_map_int_char_p_clear_errno ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_clear_errno (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#else
#define err_map_int_v_callback_errno(X)          err_map_errno
#define err_map_int_v_callback_clear_errno(X)    ((void)(err_map_errno= ERR_MAP_OK))
#endif
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER err_map_int_v_callback_t * err_map_int_v_callback_copy (err_map_int_v_callback_t const * a0) ATTR_UNUSED;
ERWIN_WRAPPER err_map_int_v_callback_t * err_map_int_v_callback_copy (err_map_int_v_callback_t const * a0)
{
    return (err_map_int_v_callback_t *)(void*)err_map_int_char_p_copy ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT err_map_int_v_callback_t * err_map_int_v_callback_copy (err_map_int_v_callback_t const * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER err_map_int_v_callback_t * err_map_int_v_callback_copy_err (err_map_int_v_callback_t const * a0, int * a1) ATTR_UNUSED;
ERWIN_WRAPPER err_map_int_v_callback_t * err_map_int_v_callback_copy_err (err_map_int_v_callback_t const * a0, int * a1)
{
    return (err_map_int_v_callback_t *)(void*)err_map_int_char_p_copy_err ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT err_map_int_v_callback_t * err_map_int_v_callback_copy_err (err_map_int_v_callback_t const * a0, int * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_delete (err_map_int_v_callback_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_delete (err_map_int_v_callback_t * a0)
{
    err_map_int_char_p_delete ((err_map_int_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_delete (err_map_int_v_callback_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_delete_flags (err_map_int_v_callback_t * a0, ERR_ERWIN_BOOL a1, ERR_ERWIN_BOOL a2) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_delete_flags (err_map_int_v_callback_t * a0, ERR_ERWIN_BOOL a1, ERR_ERWIN_BOOL a2)
{
    err_map_int_char_p_delete_flags ((err_map_int_char_p_t *)(void*)a0, a1, a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_delete_flags (err_map_int_v_callback_t * a0, ERR_ERWIN_BOOL a1, ERR_ERWIN_BOOL a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_insert (err_map_int_v_callback_t * a0, int  a1, ErrVCallback *  a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int err_map_int_v_callback_insert (err_map_int_v_callback_t * a0, int  a1, ErrVCallback *  a2) 
{
    return err_map_int_char_p_insert ((err_map_int_char_p_t *)(void*)a0, (int )a1, (char * )a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_insert (err_map_int_v_callback_t * a0, int  a1, ErrVCallback *  a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_insert_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
ERWIN_WRAPPER int err_map_int_v_callback_insert_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1)
{
    return err_map_int_char_p_insert_map ((err_map_int_char_p_t *)(void*)a0, (err_map_int_char_p_t const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_insert_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int  err_map_int_v_callback_ensure (err_map_int_v_callback_t * a0, int  a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int  err_map_int_v_callback_ensure (err_map_int_v_callback_t * a0, int  a1) 
{
    return (int )err_map_int_char_p_ensure ((err_map_int_char_p_t *)(void*)a0, (int )a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int  err_map_int_v_callback_ensure (err_map_int_v_callback_t * a0, int  a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int  err_map_int_v_callback_ensure_no_icopy (err_map_int_v_callback_t * a0, int  a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int  err_map_int_v_callback_ensure_no_icopy (err_map_int_v_callback_t * a0, int  a1) 
{
    return (int )err_map_int_char_p_ensure_no_icopy ((err_map_int_char_p_t *)(void*)a0, (int )a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int  err_map_int_v_callback_ensure_no_icopy (err_map_int_v_callback_t * a0, int  a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ErrVCallback *  err_map_int_v_callback_find_any (err_map_int_v_callback_t const * a0)
   ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER ErrVCallback *  err_map_int_v_callback_find_any (err_map_int_v_callback_t const * a0)
  
{
    return (ErrVCallback * )err_map_int_char_p_find_any ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ErrVCallback *  err_map_int_v_callback_find_any (err_map_int_v_callback_t const * a0)
   ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_find_any_pair (err_map_int_v_callback_key_result_t * a0, err_map_int_v_callback_element_ptr_t * a1, err_map_int_v_callback_t const * a2)
   ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER int err_map_int_v_callback_find_any_pair (err_map_int_v_callback_key_result_t * a0, err_map_int_v_callback_element_ptr_t * a1, err_map_int_v_callback_t const * a2)
  
{
    return err_map_int_char_p_find_any_pair ((err_map_int_char_p_key_result_t *)(void*)a0, (err_map_int_char_p_element_ptr_t *)(void*)a1, (err_map_int_char_p_t const *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_find_any_pair (err_map_int_v_callback_key_result_t * a0, err_map_int_v_callback_element_ptr_t * a1, err_map_int_v_callback_t const * a2)
   ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ErrVCallback *  err_map_int_v_callback_find (err_map_int_v_callback_t const * a0, int  a1)
   ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER ErrVCallback *  err_map_int_v_callback_find (err_map_int_v_callback_t const * a0, int  a1)
  
{
    return (ErrVCallback * )err_map_int_char_p_find ((err_map_int_char_p_t const *)(void*)a0, (int )a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ErrVCallback *  err_map_int_v_callback_find (err_map_int_v_callback_t const * a0, int  a1)
   ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ErrVCallback *  err_map_int_v_callback_find_ensure (err_map_int_v_callback_t * a0, int  a1) ATTR_UNUSED;
ERWIN_WRAPPER ErrVCallback *  err_map_int_v_callback_find_ensure (err_map_int_v_callback_t * a0, int  a1)
{
    return (ErrVCallback * )err_map_int_char_p_find_ensure ((err_map_int_char_p_t *)(void*)a0, (int )a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ErrVCallback *  err_map_int_v_callback_find_ensure (err_map_int_v_callback_t * a0, int  a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int  err_map_int_v_callback_find_key (err_map_int_v_callback_t const * a0, int  a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER int  err_map_int_v_callback_find_key (err_map_int_v_callback_t const * a0, int  a1) 
{
    return (int )err_map_int_char_p_find_key ((err_map_int_char_p_t const *)(void*)a0, (int )a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int  err_map_int_v_callback_find_key (err_map_int_v_callback_t const * a0, int  a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int  err_map_int_v_callback_find_any_key (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER int  err_map_int_v_callback_find_any_key (err_map_int_v_callback_t const * a0) 
{
    return (int )err_map_int_char_p_find_any_key ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int  err_map_int_v_callback_find_any_key (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER err_map_int_v_callback_element_ptr_t err_map_int_v_callback_find_ptr (err_map_int_v_callback_t const * a0, int  a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER err_map_int_v_callback_element_ptr_t err_map_int_v_callback_find_ptr (err_map_int_v_callback_t const * a0, int  a1) 
{
    return (err_map_int_v_callback_element_ptr_t)err_map_int_char_p_find_ptr ((err_map_int_char_p_t const *)(void*)a0, (int )a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT err_map_int_v_callback_element_ptr_t err_map_int_v_callback_find_ptr (err_map_int_v_callback_t const * a0, int  a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER err_map_int_v_callback_element_ptr_t err_map_int_v_callback_find_any_ptr (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER err_map_int_v_callback_element_ptr_t err_map_int_v_callback_find_any_ptr (err_map_int_v_callback_t const * a0) 
{
    return (err_map_int_v_callback_element_ptr_t)err_map_int_char_p_find_any_ptr ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT err_map_int_v_callback_element_ptr_t err_map_int_v_callback_find_any_ptr (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER err_map_int_v_callback_element_ptr_t err_map_int_v_callback_find_ptr_ensure (err_map_int_v_callback_t * a0, int  a1) ATTR_UNUSED;
ERWIN_WRAPPER err_map_int_v_callback_element_ptr_t err_map_int_v_callback_find_ptr_ensure (err_map_int_v_callback_t * a0, int  a1)
{
    return (err_map_int_v_callback_element_ptr_t)err_map_int_char_p_find_ptr_ensure ((err_map_int_char_p_t *)(void*)a0, (int )a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT err_map_int_v_callback_element_ptr_t err_map_int_v_callback_find_ptr_ensure (err_map_int_v_callback_t * a0, int  a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ErrVCallback * err_map_int_v_callback_modify (err_map_int_v_callback_t * a0, int  a1, ErrVCallback *  a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER ErrVCallback * err_map_int_v_callback_modify (err_map_int_v_callback_t * a0, int  a1, ErrVCallback *  a2) 
{
    return (ErrVCallback *)err_map_int_char_p_modify ((err_map_int_char_p_t *)(void*)a0, (int )a1, (char * )a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ErrVCallback * err_map_int_v_callback_modify (err_map_int_v_callback_t * a0, int  a1, ErrVCallback *  a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_modify_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
ERWIN_WRAPPER int err_map_int_v_callback_modify_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1)
{
    return err_map_int_char_p_modify_map ((err_map_int_char_p_t *)(void*)a0, (err_map_int_char_p_t const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_modify_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_set (err_map_int_v_callback_t * a0, int  a1, ErrVCallback *  a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int err_map_int_v_callback_set (err_map_int_v_callback_t * a0, int  a1, ErrVCallback *  a2) 
{
    return err_map_int_char_p_set ((err_map_int_char_p_t *)(void*)a0, (int )a1, (char * )a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_set (err_map_int_v_callback_t * a0, int  a1, ErrVCallback *  a2)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_set_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
ERWIN_WRAPPER int err_map_int_v_callback_set_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1)
{
    return err_map_int_char_p_set_map ((err_map_int_char_p_t *)(void*)a0, (err_map_int_char_p_t const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_set_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_intersect (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
ERWIN_WRAPPER int err_map_int_v_callback_intersect (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1)
{
    return err_map_int_char_p_intersect ((err_map_int_char_p_t *)(void*)a0, (err_map_int_char_p_t const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_intersect (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_intersect_no_resize (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
ERWIN_WRAPPER int err_map_int_v_callback_intersect_no_resize (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1)
{
    return err_map_int_char_p_intersect_no_resize ((err_map_int_char_p_t *)(void*)a0, (err_map_int_char_p_t const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_intersect_no_resize (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ErrVCallback * err_map_int_v_callback_remove (err_map_int_v_callback_t * a0, int  a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER ErrVCallback * err_map_int_v_callback_remove (err_map_int_v_callback_t * a0, int  a1) 
{
    return (ErrVCallback *)err_map_int_char_p_remove ((err_map_int_char_p_t *)(void*)a0, (int )a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ErrVCallback * err_map_int_v_callback_remove (err_map_int_v_callback_t * a0, int  a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ErrVCallback * err_map_int_v_callback_remove_no_resize (err_map_int_v_callback_t * a0, int  a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER ErrVCallback * err_map_int_v_callback_remove_no_resize (err_map_int_v_callback_t * a0, int  a1) 
{
    return (ErrVCallback *)err_map_int_char_p_remove_no_resize ((err_map_int_char_p_t *)(void*)a0, (int )a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ErrVCallback * err_map_int_v_callback_remove_no_resize (err_map_int_v_callback_t * a0, int  a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_remove_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
ERWIN_WRAPPER int err_map_int_v_callback_remove_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1)
{
    return err_map_int_char_p_remove_map ((err_map_int_char_p_t *)(void*)a0, (err_map_int_char_p_t const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_remove_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_remove_if (err_map_int_v_callback_t * a0, err_map_int_v_callback_feature_t a1, ERR_ERWIN_BOOL a2) ATTR_UNUSED;
ERWIN_WRAPPER int err_map_int_v_callback_remove_if (err_map_int_v_callback_t * a0, err_map_int_v_callback_feature_t a1, ERR_ERWIN_BOOL a2)
{
    return err_map_int_char_p_remove_if ((err_map_int_char_p_t *)(void*)a0, (err_map_int_char_p_feature_t)a1, a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_remove_if (err_map_int_v_callback_t * a0, err_map_int_v_callback_feature_t a1, ERR_ERWIN_BOOL a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_erase (err_map_int_v_callback_t * a0, int  a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int err_map_int_v_callback_erase (err_map_int_v_callback_t * a0, int  a1) 
{
    return err_map_int_char_p_erase ((err_map_int_char_p_t *)(void*)a0, (int )a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_erase (err_map_int_v_callback_t * a0, int  a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_erase_no_resize (err_map_int_v_callback_t * a0, int  a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
ERWIN_WRAPPER int err_map_int_v_callback_erase_no_resize (err_map_int_v_callback_t * a0, int  a1) 
{
    return err_map_int_char_p_erase_no_resize ((err_map_int_char_p_t *)(void*)a0, (int )a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_erase_no_resize (err_map_int_v_callback_t * a0, int  a1)  ATTR_UNUSED ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_erase_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
ERWIN_WRAPPER int err_map_int_v_callback_erase_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1)
{
    return err_map_int_char_p_erase_map ((err_map_int_char_p_t *)(void*)a0, (err_map_int_char_p_t const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_erase_map (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_erase_map_no_resize (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
ERWIN_WRAPPER int err_map_int_v_callback_erase_map_no_resize (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1)
{
    return err_map_int_char_p_erase_map_no_resize ((err_map_int_char_p_t *)(void*)a0, (err_map_int_char_p_t const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_erase_map_no_resize (err_map_int_v_callback_t * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_erase_if (err_map_int_v_callback_t * a0, err_map_int_v_callback_feature_t a1, ERR_ERWIN_BOOL a2) ATTR_UNUSED;
ERWIN_WRAPPER int err_map_int_v_callback_erase_if (err_map_int_v_callback_t * a0, err_map_int_v_callback_feature_t a1, ERR_ERWIN_BOOL a2)
{
    return err_map_int_char_p_erase_if ((err_map_int_char_p_t *)(void*)a0, (err_map_int_char_p_feature_t)a1, a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_erase_if (err_map_int_v_callback_t * a0, err_map_int_v_callback_feature_t a1, ERR_ERWIN_BOOL a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_poke (int * a0, ErrVCallback * * a1, err_map_int_v_callback_t * a2, int  a3, ErrVCallback *  a4, ERR_ERWIN_BOOL a5, ERR_ERWIN_BOOL a6)  ATTR_UNUSED ATTR_NONNULL((3)) ;
ERWIN_WRAPPER int err_map_int_v_callback_poke (int * a0, ErrVCallback * * a1, err_map_int_v_callback_t * a2, int  a3, ErrVCallback *  a4, ERR_ERWIN_BOOL a5, ERR_ERWIN_BOOL a6) 
{
    return err_map_int_char_p_poke ((int *)(void*)a0, (char * *)(void*)a1, (err_map_int_char_p_t *)(void*)a2, (int )a3, (char * )a4, a5, a6);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_poke (int * a0, ErrVCallback * * a1, err_map_int_v_callback_t * a2, int  a3, ErrVCallback *  a4, ERR_ERWIN_BOOL a5, ERR_ERWIN_BOOL a6)  ATTR_UNUSED ATTR_NONNULL((3)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_poke_no_icopy (int * a0, ErrVCallback * * a1, err_map_int_v_callback_t * a2, int  a3, ErrVCallback *  a4, ERR_ERWIN_BOOL a5, ERR_ERWIN_BOOL a6)  ATTR_UNUSED ATTR_NONNULL((3)) ;
ERWIN_WRAPPER int err_map_int_v_callback_poke_no_icopy (int * a0, ErrVCallback * * a1, err_map_int_v_callback_t * a2, int  a3, ErrVCallback *  a4, ERR_ERWIN_BOOL a5, ERR_ERWIN_BOOL a6) 
{
    return err_map_int_char_p_poke_no_icopy ((int *)(void*)a0, (char * *)(void*)a1, (err_map_int_char_p_t *)(void*)a2, (int )a3, (char * )a4, a5, a6);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_poke_no_icopy (int * a0, ErrVCallback * * a1, err_map_int_v_callback_t * a2, int  a3, ErrVCallback *  a4, ERR_ERWIN_BOOL a5, ERR_ERWIN_BOOL a6)  ATTR_UNUSED ATTR_NONNULL((3)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_poke_no_ocopy (int * a0, ErrVCallback * * a1, err_map_int_v_callback_t * a2, int  a3, ErrVCallback *  a4, ERR_ERWIN_BOOL a5, ERR_ERWIN_BOOL a6)  ATTR_UNUSED ATTR_NONNULL((3)) ;
ERWIN_WRAPPER int err_map_int_v_callback_poke_no_ocopy (int * a0, ErrVCallback * * a1, err_map_int_v_callback_t * a2, int  a3, ErrVCallback *  a4, ERR_ERWIN_BOOL a5, ERR_ERWIN_BOOL a6) 
{
    return err_map_int_char_p_poke_no_ocopy ((int *)(void*)a0, (char * *)(void*)a1, (err_map_int_char_p_t *)(void*)a2, (int )a3, (char * )a4, a5, a6);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_poke_no_ocopy (int * a0, ErrVCallback * * a1, err_map_int_v_callback_t * a2, int  a3, ErrVCallback *  a4, ERR_ERWIN_BOOL a5, ERR_ERWIN_BOOL a6)  ATTR_UNUSED ATTR_NONNULL((3)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_poke_no_icopy_no_ocopy (int * a0, ErrVCallback * * a1, err_map_int_v_callback_t * a2, int  a3, ErrVCallback *  a4, ERR_ERWIN_BOOL a5, ERR_ERWIN_BOOL a6)  ATTR_UNUSED ATTR_NONNULL((3)) ;
ERWIN_WRAPPER int err_map_int_v_callback_poke_no_icopy_no_ocopy (int * a0, ErrVCallback * * a1, err_map_int_v_callback_t * a2, int  a3, ErrVCallback *  a4, ERR_ERWIN_BOOL a5, ERR_ERWIN_BOOL a6) 
{
    return err_map_int_char_p_poke_no_icopy_no_ocopy ((int *)(void*)a0, (char * *)(void*)a1, (err_map_int_char_p_t *)(void*)a2, (int )a3, (char * )a4, a5, a6);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_poke_no_icopy_no_ocopy (int * a0, ErrVCallback * * a1, err_map_int_v_callback_t * a2, int  a3, ErrVCallback *  a4, ERR_ERWIN_BOOL a5, ERR_ERWIN_BOOL a6)  ATTR_UNUSED ATTR_NONNULL((3)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ErrVCallback *  err_map_int_v_callback_zero (err_map_int_v_callback_t const * a0)   ATTR_UNUSED ATTR_PURE  ATTR_NONNULL((1)) ;
ERWIN_WRAPPER ErrVCallback *  err_map_int_v_callback_zero (err_map_int_v_callback_t const * a0)  
{
    return (ErrVCallback * )err_map_int_char_p_zero ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ErrVCallback *  err_map_int_v_callback_zero (err_map_int_v_callback_t const * a0)   ATTR_UNUSED ATTR_PURE  ATTR_NONNULL((1)) ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_cmp (err_map_int_v_callback_t const * a0, err_map_int_v_callback_t const * a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER int err_map_int_v_callback_cmp (err_map_int_v_callback_t const * a0, err_map_int_v_callback_t const * a1) 
{
    return err_map_int_char_p_cmp ((err_map_int_char_p_t const *)(void*)a0, (err_map_int_char_p_t const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_cmp (err_map_int_v_callback_t const * a0, err_map_int_v_callback_t const * a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_equal (err_map_int_v_callback_t const * a0, err_map_int_v_callback_t const * a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_equal (err_map_int_v_callback_t const * a0, err_map_int_v_callback_t const * a1) 
{
    return err_map_int_char_p_equal ((err_map_int_char_p_t const *)(void*)a0, (err_map_int_char_p_t const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_equal (err_map_int_v_callback_t const * a0, err_map_int_v_callback_t const * a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_cmp_keys (err_map_int_v_callback_t const * a0, err_map_int_v_callback_t const * a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER int err_map_int_v_callback_cmp_keys (err_map_int_v_callback_t const * a0, err_map_int_v_callback_t const * a1) 
{
    return err_map_int_char_p_cmp_keys ((err_map_int_char_p_t const *)(void*)a0, (err_map_int_char_p_t const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_cmp_keys (err_map_int_v_callback_t const * a0, err_map_int_v_callback_t const * a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_equal_keys (err_map_int_v_callback_t const * a0, err_map_int_v_callback_t const * a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_equal_keys (err_map_int_v_callback_t const * a0, err_map_int_v_callback_t const * a1) 
{
    return err_map_int_char_p_equal_keys ((err_map_int_char_p_t const *)(void*)a0, (err_map_int_char_p_t const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_equal_keys (err_map_int_v_callback_t const * a0, err_map_int_v_callback_t const * a1)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER err_hashval_t err_map_int_v_callback_hash_raw (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER err_hashval_t err_map_int_v_callback_hash_raw (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_hash_raw ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT err_hashval_t err_map_int_v_callback_hash_raw (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER err_hashval_t err_map_int_v_callback_hash (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
ERWIN_WRAPPER err_hashval_t err_map_int_v_callback_hash (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_hash ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT err_hashval_t err_map_int_v_callback_hash (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_ERRNO_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_clear (err_map_int_v_callback_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_clear (err_map_int_v_callback_t * a0)
{
    err_map_int_char_p_clear ((err_map_int_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_clear (err_map_int_v_callback_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_clear_no_resize (err_map_int_v_callback_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_clear_no_resize (err_map_int_v_callback_t * a0)
{
    err_map_int_char_p_clear_no_resize ((err_map_int_char_p_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_clear_no_resize (err_map_int_v_callback_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_clear_flags (err_map_int_v_callback_t * a0, ERR_ERWIN_BOOL a1, ERR_ERWIN_BOOL a2) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_clear_flags (err_map_int_v_callback_t * a0, ERR_ERWIN_BOOL a1, ERR_ERWIN_BOOL a2)
{
    err_map_int_char_p_clear_flags ((err_map_int_char_p_t *)(void*)a0, a1, a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_clear_flags (err_map_int_v_callback_t * a0, ERR_ERWIN_BOOL a1, ERR_ERWIN_BOOL a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_clear_flags_no_resize (err_map_int_v_callback_t * a0, ERR_ERWIN_BOOL a1, ERR_ERWIN_BOOL a2) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_clear_flags_no_resize (err_map_int_v_callback_t * a0, ERR_ERWIN_BOOL a1, ERR_ERWIN_BOOL a2)
{
    err_map_int_char_p_clear_flags_no_resize ((err_map_int_char_p_t *)(void*)a0, a1, a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_clear_flags_no_resize (err_map_int_v_callback_t * a0, ERR_ERWIN_BOOL a1, ERR_ERWIN_BOOL a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_nentries (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER int err_map_int_v_callback_nentries (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_nentries ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_nentries (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_empty (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_empty (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_empty ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_empty (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER err_map_int_v_callback_pair_t * err_map_int_v_callback_get_entries (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER err_map_int_v_callback_pair_t * err_map_int_v_callback_get_entries (err_map_int_v_callback_t const * a0) 
{
    return (err_map_int_v_callback_pair_t *)(void*)err_map_int_char_p_get_entries ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT err_map_int_v_callback_pair_t * err_map_int_v_callback_get_entries (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_delete_entries (err_map_int_v_callback_pair_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_delete_entries (err_map_int_v_callback_pair_t * a0)
{
    err_map_int_char_p_delete_entries ((err_map_int_char_p_pair_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_delete_entries (err_map_int_v_callback_pair_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER err_map_int_v_callback_pair_ptr_t * err_map_int_v_callback_get_entries_ptr (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER err_map_int_v_callback_pair_ptr_t * err_map_int_v_callback_get_entries_ptr (err_map_int_v_callback_t const * a0) 
{
    return (err_map_int_v_callback_pair_ptr_t *)(void*)err_map_int_char_p_get_entries_ptr ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT err_map_int_v_callback_pair_ptr_t * err_map_int_v_callback_get_entries_ptr (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_delete_entries_ptr (err_map_int_v_callback_pair_ptr_t * a0) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_delete_entries_ptr (err_map_int_v_callback_pair_ptr_t * a0)
{
    err_map_int_char_p_delete_entries_ptr ((err_map_int_char_p_pair_ptr_t *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_delete_entries_ptr (err_map_int_v_callback_pair_ptr_t * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ErrVCallback * * err_map_int_v_callback_get_values (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER ErrVCallback * * err_map_int_v_callback_get_values (err_map_int_v_callback_t const * a0) 
{
    return (ErrVCallback * *)(void*)err_map_int_char_p_get_values ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ErrVCallback * * err_map_int_v_callback_get_values (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_delete_values (ErrVCallback * * a0) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_delete_values (ErrVCallback * * a0)
{
    err_map_int_char_p_delete_values ((char * *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_delete_values (ErrVCallback * * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int * err_map_int_v_callback_get_keys (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_MALLOC ;
ERWIN_WRAPPER int * err_map_int_v_callback_get_keys (err_map_int_v_callback_t const * a0) 
{
    return (int *)(void*)err_map_int_char_p_get_keys ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int * err_map_int_v_callback_get_keys (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_MALLOC ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_delete_keys (int * a0) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_delete_keys (int * a0)
{
    err_map_int_char_p_delete_keys ((int *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_delete_keys (int * a0) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_hash_size (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER int err_map_int_v_callback_hash_size (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_hash_size ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_hash_size (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_rehash (err_map_int_v_callback_t * a0, int a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_rehash (err_map_int_v_callback_t * a0, int a1)
{
    err_map_int_char_p_rehash ((err_map_int_char_p_t *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_rehash (err_map_int_v_callback_t * a0, int a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_expect_size (err_map_int_v_callback_t * a0, int a1) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_expect_size (err_map_int_v_callback_t * a0, int a1)
{
    return err_map_int_char_p_expect_size ((err_map_int_char_p_t *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_expect_size (err_map_int_v_callback_t * a0, int a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER double err_map_int_v_callback_average_line_length (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER double err_map_int_v_callback_average_line_length (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_average_line_length ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT double err_map_int_v_callback_average_line_length (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER double err_map_int_v_callback_variance_line_length (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER double err_map_int_v_callback_variance_line_length (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_variance_line_length ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT double err_map_int_v_callback_variance_line_length (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#ifdef HAVE_SQRT
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER double err_map_int_v_callback_deviation_line_length (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER double err_map_int_v_callback_deviation_line_length (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_deviation_line_length ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT double err_map_int_v_callback_deviation_line_length (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_max_line_length (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER int err_map_int_v_callback_max_line_length (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_max_line_length ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_max_line_length (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_min_line_length (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER int err_map_int_v_callback_min_line_length (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_min_line_length ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_min_line_length (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_dump (FILE * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_dump (FILE * a0, err_map_int_v_callback_t const * a1)
{
    err_map_int_char_p_dump (a0, (err_map_int_char_p_t const *)(void*)a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_dump (FILE * a0, err_map_int_v_callback_t const * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#define err_map_int_v_callback_forall_nondet(h,i,k,v) \
        for(err_map_int_v_callback_init_iterator ((h),&i); \
            err_map_int_v_callback_next_iteration ((h),&i,&k,&v);)
#define err_map_int_v_callback_forall_ptr_nondet(h,i,k,v) \
        for(err_map_int_v_callback_init_iterator ((h),&i); \
            err_map_int_v_callback_next_iteration_ptr ((h),&i,&k,&v);)
#define err_map_int_v_callback_forall_values_nondet(h,i,v) \
        for(err_map_int_v_callback_init_iterator ((h),&i); \
            err_map_int_v_callback_next_iteration_values ((h),&i,&v);)
#define err_map_int_v_callback_forall_values_ptr_nondet(h,i,v) \
        for(err_map_int_v_callback_init_iterator ((h),&i); \
            err_map_int_v_callback_next_iteration_values_ptr ((h),&i,&v);)
#define err_map_int_v_callback_forall_keys_nondet(h,i,k) \
        for(err_map_int_v_callback_init_iterator ((h),&i); \
            err_map_int_v_callback_next_iteration_keys ((h),&i,&k);)
#define err_map_int_v_callback_forall_pairs_nondet(h,i,p) \
        for(err_map_int_v_callback_init_iterator ((h),&i); \
            err_map_int_v_callback_next_iteration_pairs ((h),&i,&p);)
#define err_map_int_v_callback_forall_pairs_ptr_nondet(h,i,p) \
        for(err_map_int_v_callback_init_iterator ((h),&i); \
            err_map_int_v_callback_next_iteration_pairs_ptr ((h),&i,&p);)
#if !defined (ERR_ERWIN_REQUIRE_DETERMINISM) || defined (ERR_ERWIN_WEAK_DETERMINISM)
#  define err_map_int_v_callback_forall(h,i,k,v) err_map_int_v_callback_forall_nondet(h,i,k,v)
#  define err_map_int_v_callback_forall_ptr(h,i,k,v) err_map_int_v_callback_forall_ptr_nondet(h,i,k,v)
#  define err_map_int_v_callback_forall_values(h,i,v) err_map_int_v_callback_forall_values_nondet(h,i,v)
#  define err_map_int_v_callback_forall_values_ptr(h,i,v) err_map_int_v_callback_forall_values_ptr_nondet(h,i,v)
#  define err_map_int_v_callback_forall_keys(h,i,k)   err_map_int_v_callback_forall_keys_nondet(h,i,k)
#  define err_map_int_v_callback_forall_pairs(h,i,p)  err_map_int_v_callback_forall_pairs_nondet(h,i,p)
#  define err_map_int_v_callback_forall_pairs_ptr(h,i,p)  err_map_int_v_callback_forall_pairs_ptr_nondet(h,i,p)
#endif
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1)
{
    err_map_int_char_p_init_iterator ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#ifdef __cplusplus
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_key (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_key (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_sorted_by_key ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_sorted_by_key (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_value (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_value (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_sorted_by_value ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_sorted_by_value (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_key_and_value (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_key_and_value (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_sorted_by_key_and_value ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_sorted_by_key_and_value (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_value_and_key (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_value_and_key (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_sorted_by_value_and_key ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_sorted_by_value_and_key (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_user (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_cmp_t a2) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_user (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_cmp_t a2)
{
    err_map_int_char_p_init_iterator_sorted_by_user ((err_map_int_char_p_t const *)(void*)a0, a1, (err_map_int_char_p_pair_cmp_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_sorted_by_user (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_cmp_t a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_key (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_key (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_ptr_sorted_by_key ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_ptr_sorted_by_key (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_value (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_value (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_ptr_sorted_by_value ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_ptr_sorted_by_value (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_key_and_value (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_key_and_value (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_ptr_sorted_by_key_and_value ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_ptr_sorted_by_key_and_value (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_value_and_key (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_value_and_key (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_ptr_sorted_by_value_and_key ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_ptr_sorted_by_value_and_key (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_user (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_ptr_cmp_t a2) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_user (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_ptr_cmp_t a2)
{
    err_map_int_char_p_init_iterator_ptr_sorted_by_user ((err_map_int_char_p_t const *)(void*)a0, a1, (err_map_int_char_p_pair_ptr_cmp_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_ptr_sorted_by_user (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_ptr_cmp_t a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_key_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_key_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_sorted_by_key_reverse ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_sorted_by_key_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_value_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_value_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_sorted_by_value_reverse ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_sorted_by_value_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_key_and_value_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_key_and_value_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_sorted_by_key_and_value_reverse ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_sorted_by_key_and_value_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_value_and_key_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_value_and_key_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_sorted_by_value_and_key_reverse ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_sorted_by_value_and_key_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_user_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_cmp_t a2) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_sorted_by_user_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_cmp_t a2)
{
    err_map_int_char_p_init_iterator_sorted_by_user_reverse ((err_map_int_char_p_t const *)(void*)a0, a1, (err_map_int_char_p_pair_cmp_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_sorted_by_user_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_cmp_t a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_key_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_key_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_ptr_sorted_by_key_reverse ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_ptr_sorted_by_key_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_value_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_value_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_ptr_sorted_by_value_reverse ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_ptr_sorted_by_value_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_key_and_value_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_key_and_value_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_ptr_sorted_by_key_and_value_reverse ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_ptr_sorted_by_key_and_value_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_value_and_key_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_value_and_key_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1)
{
    err_map_int_char_p_init_iterator_ptr_sorted_by_value_and_key_reverse ((err_map_int_char_p_t const *)(void*)a0, a1);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_ptr_sorted_by_value_and_key_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_user_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_ptr_cmp_t a2) ATTR_UNUSED;
ERWIN_WRAPPER void err_map_int_v_callback_init_iterator_ptr_sorted_by_user_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_ptr_cmp_t a2)
{
    err_map_int_char_p_init_iterator_ptr_sorted_by_user_reverse ((err_map_int_char_p_t const *)(void*)a0, a1, (err_map_int_char_p_pair_ptr_cmp_t)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT void err_map_int_v_callback_init_iterator_ptr_sorted_by_user_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_ptr_cmp_t a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2, ErrVCallback * * a3) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2, ErrVCallback * * a3)
{
    return err_map_int_char_p_next_iteration_sorted ((err_map_int_char_p_t const *)(void*)a0, a1, (int *)(void*)a2, (char * *)(void*)a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2, ErrVCallback * * a3) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2, err_map_int_v_callback_element_ptr_t * a3) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2, err_map_int_v_callback_element_ptr_t * a3)
{
    return err_map_int_char_p_next_iteration_sorted_ptr ((err_map_int_char_p_t const *)(void*)a0, a1, (int *)(void*)a2, (err_map_int_char_p_element_ptr_t *)(void*)a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2, err_map_int_v_callback_element_ptr_t * a3) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_keys (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_keys (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2)
{
    return err_map_int_char_p_next_iteration_sorted_keys ((err_map_int_char_p_t const *)(void*)a0, a1, (int *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_keys (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_values (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, ErrVCallback * * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_values (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, ErrVCallback * * a2)
{
    return err_map_int_char_p_next_iteration_sorted_values ((err_map_int_char_p_t const *)(void*)a0, a1, (char * *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_values (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, ErrVCallback * * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_values_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_element_ptr_t * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_values_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_element_ptr_t * a2)
{
    return err_map_int_char_p_next_iteration_sorted_values_ptr ((err_map_int_char_p_t const *)(void*)a0, a1, (err_map_int_char_p_element_ptr_t *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_values_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_element_ptr_t * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_pairs (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_t * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_pairs (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_t * a2)
{
    return err_map_int_char_p_next_iteration_sorted_pairs ((err_map_int_char_p_t const *)(void*)a0, a1, (err_map_int_char_p_pair_t *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_pairs (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_t * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_pairs_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_ptr_t * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_pairs_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_ptr_t * a2)
{
    return err_map_int_char_p_next_iteration_sorted_pairs_ptr ((err_map_int_char_p_t const *)(void*)a0, a1, (err_map_int_char_p_pair_ptr_t *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_pairs_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_ptr_t * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2, ErrVCallback * * a3) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2, ErrVCallback * * a3)
{
    return err_map_int_char_p_next_iteration_sorted_reverse ((err_map_int_char_p_t const *)(void*)a0, a1, (int *)(void*)a2, (char * *)(void*)a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2, ErrVCallback * * a3) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_ptr_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2, err_map_int_v_callback_element_ptr_t * a3) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_ptr_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2, err_map_int_v_callback_element_ptr_t * a3)
{
    return err_map_int_char_p_next_iteration_sorted_ptr_reverse ((err_map_int_char_p_t const *)(void*)a0, a1, (int *)(void*)a2, (err_map_int_char_p_element_ptr_t *)(void*)a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_ptr_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2, err_map_int_v_callback_element_ptr_t * a3) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_keys_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_keys_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2)
{
    return err_map_int_char_p_next_iteration_sorted_keys_reverse ((err_map_int_char_p_t const *)(void*)a0, a1, (int *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_keys_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, int * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_values_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, ErrVCallback * * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_values_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, ErrVCallback * * a2)
{
    return err_map_int_char_p_next_iteration_sorted_values_reverse ((err_map_int_char_p_t const *)(void*)a0, a1, (char * *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_values_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, ErrVCallback * * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_values_ptr_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_element_ptr_t * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_values_ptr_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_element_ptr_t * a2)
{
    return err_map_int_char_p_next_iteration_sorted_values_ptr_reverse ((err_map_int_char_p_t const *)(void*)a0, a1, (err_map_int_char_p_element_ptr_t *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_values_ptr_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_element_ptr_t * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_pairs_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_t * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_pairs_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_t * a2)
{
    return err_map_int_char_p_next_iteration_sorted_pairs_reverse ((err_map_int_char_p_t const *)(void*)a0, a1, (err_map_int_char_p_pair_t *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_pairs_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_t * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_pairs_ptr_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_ptr_t * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_pairs_ptr_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_ptr_t * a2)
{
    return err_map_int_char_p_next_iteration_sorted_pairs_ptr_reverse ((err_map_int_char_p_t const *)(void*)a0, a1, (err_map_int_char_p_pair_ptr_t *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_sorted_pairs_ptr_reverse (err_map_int_v_callback_t const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_pair_ptr_t * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#endif /* defined(__cplusplus) */
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, int * a2, ErrVCallback * * a3) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, int * a2, ErrVCallback * * a3)
{
    return err_map_int_char_p_next_iteration ((err_map_int_char_p_t const *)(void*)a0, a1, (int *)(void*)a2, (char * *)(void*)a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, int * a2, ErrVCallback * * a3) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, int * a2, err_map_int_v_callback_element_ptr_t * a3) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, int * a2, err_map_int_v_callback_element_ptr_t * a3)
{
    return err_map_int_char_p_next_iteration_ptr ((err_map_int_char_p_t const *)(void*)a0, a1, (int *)(void*)a2, (err_map_int_char_p_element_ptr_t *)(void*)a3);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, int * a2, err_map_int_v_callback_element_ptr_t * a3) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_values (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, ErrVCallback * * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_values (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, ErrVCallback * * a2)
{
    return err_map_int_char_p_next_iteration_values ((err_map_int_char_p_t const *)(void*)a0, a1, (char * *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_values (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, ErrVCallback * * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_values_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, err_map_int_v_callback_element_ptr_t * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_values_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, err_map_int_v_callback_element_ptr_t * a2)
{
    return err_map_int_char_p_next_iteration_values_ptr ((err_map_int_char_p_t const *)(void*)a0, a1, (err_map_int_char_p_element_ptr_t *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_values_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, err_map_int_v_callback_element_ptr_t * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_keys (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, int * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_keys (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, int * a2)
{
    return err_map_int_char_p_next_iteration_keys ((err_map_int_char_p_t const *)(void*)a0, a1, (int *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_keys (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, int * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_pairs (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, err_map_int_v_callback_pair_t * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_pairs (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, err_map_int_v_callback_pair_t * a2)
{
    return err_map_int_char_p_next_iteration_pairs ((err_map_int_char_p_t const *)(void*)a0, a1, (err_map_int_char_p_pair_t *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_pairs (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, err_map_int_v_callback_pair_t * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_pairs_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, err_map_int_v_callback_pair_ptr_t * a2) ATTR_UNUSED;
ERWIN_WRAPPER ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_pairs_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, err_map_int_v_callback_pair_ptr_t * a2)
{
    return err_map_int_char_p_next_iteration_pairs_ptr ((err_map_int_char_p_t const *)(void*)a0, a1, (err_map_int_char_p_pair_ptr_t *)(void*)a2);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT ERR_ERWIN_BOOL err_map_int_v_callback_next_iteration_pairs_ptr (err_map_int_v_callback_t const * a0, err_map_iterator_t * a1, err_map_int_v_callback_pair_ptr_t * a2) ATTR_UNUSED;
#endif /*ERWIN_CAST_INLINING*/
#ifdef ERR_ERWIN_PROFILE
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_nrehash_ops (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER int err_map_int_v_callback_nrehash_ops (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_nrehash_ops ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_nrehash_ops (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_nrehash (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER int err_map_int_v_callback_nrehash (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_nrehash ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_nrehash (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_ninsert (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER int err_map_int_v_callback_ninsert (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_ninsert ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_ninsert (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_nremove (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER int err_map_int_v_callback_nremove (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_nremove ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_nremove (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_nfind (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER int err_map_int_v_callback_nfind (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_nfind ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_nfind (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
ERWIN_WRAPPER int err_map_int_v_callback_nops (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
ERWIN_WRAPPER int err_map_int_v_callback_nops (err_map_int_v_callback_t const * a0) 
{
    return err_map_int_char_p_nops ((err_map_int_char_p_t const *)(void*)a0);
}
#else /*!ERWIN_CAST_INLINING*/
ERR_ERWIN_EXPORT int err_map_int_v_callback_nops (err_map_int_v_callback_t const * a0)  ATTR_UNUSED ATTR_PURE ;
#endif /*ERWIN_CAST_INLINING*/
#endif

#ifdef __cplusplus
} /* extern "C" */
#endif


#ifdef __cplusplus
struct err_map_int_v_callback_t : protected err_map_int_char_p_t
#else
struct err_map_int_v_callback_t
#endif
{
#ifndef __cplusplus
    err_map_int_char_p_t impl;
#endif

#ifdef __cplusplus
    typedef err_map_int_char_p_t Super;
public:
#if !ERR_ERWIN_DEFAULT_NEW_DELETE
    static void *operator new(size_t s)               { return Super::operator new(s);   }
    static void operator delete(void *p, size_t s)    { Super::operator delete(p,s);     }
    static void *operator new[](size_t s)             { return Super::operator new[](s); }
    static void operator delete[](void *p, size_t s)  { Super::operator delete[](p,s);   }
#endif
public:
#ifdef __cplusplus
#if !ERR_ERWIN_DEFAULT_NEW_DELETE
#endif
#endif
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t (void):
        err_map_int_char_p_t ()
    {}
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline err_map_int_v_callback_t const & static_zero ()
    {
        return (err_map_int_v_callback_t const &)err_map_int_char_p_t::static_zero ();
    }
#else /*!ERWIN_CAST_INLINING*/
    static err_map_int_v_callback_t const & static_zero ();
#endif /*ERWIN_CAST_INLINING*/
#if ERR_MAP_INT_V_CALLBACK_HAVE_INT_CONSTRUCTOR
#if ERWIN_CAST_INLINING
    ERR_ERWIN_EXPLICIT err_map_int_v_callback_t (int a0):
        err_map_int_char_p_t (a0)
    {}
#else /*!ERWIN_CAST_INLINING*/
    ERR_ERWIN_EXPLICIT err_map_int_v_callback_t (int a0);
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERR_MAP_INT_V_CALLBACK_DYN_ZERO
#if ERWIN_CAST_INLINING
    ERR_ERWIN_EXPLICIT err_map_int_v_callback_t (ErrVCallback *  a0):
        err_map_int_char_p_t ((char * )a0)
    {}
#else /*!ERWIN_CAST_INLINING*/
    ERR_ERWIN_EXPLICIT err_map_int_v_callback_t (ErrVCallback *  a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t (ErrVCallback *  a0, int a1):
        err_map_int_char_p_t ((char * )a0, a1)
    {}
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t (ErrVCallback *  a0, int a1);
#endif /*ERWIN_CAST_INLINING*/
#endif
#if !ERR_ERWIN_GLOBAL_ERRNO
#if ERWIN_CAST_INLINING
    int get_errno (void) const
    {
        return err_map_int_char_p_t::get_errno ();
    }
#else /*!ERWIN_CAST_INLINING*/
    int get_errno (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    void clear_errno (void) const
    {
        err_map_int_char_p_t::clear_errno ();
    }
#else /*!ERWIN_CAST_INLINING*/
    void clear_errno (void) const;
#endif /*ERWIN_CAST_INLINING*/
#else
#if ERWIN_CAST_INLINING
    static inline int get_errno (void)
    {
        return err_map_int_char_p_t::get_errno ();
    }
#else /*!ERWIN_CAST_INLINING*/
    static int get_errno (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void clear_errno (void)
    {
        err_map_int_char_p_t::clear_errno ();
    }
#else /*!ERWIN_CAST_INLINING*/
    static void clear_errno (void);
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    ERR_ERWIN_EXPLICIT err_map_int_v_callback_t (err_map_int_v_callback_t const * a0):
        err_map_int_char_p_t ((err_map_int_char_p_t const *)(void*)a0)
    {}
#else /*!ERWIN_CAST_INLINING*/
    ERR_ERWIN_EXPLICIT err_map_int_v_callback_t (err_map_int_v_callback_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t (err_map_int_v_callback_t const & a0):
        err_map_int_char_p_t ((err_map_int_char_p_t const &)a0)
    {}
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t (err_map_int_v_callback_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t * copy (void) const
    {
        return (err_map_int_v_callback_t *)(void*)err_map_int_char_p_t::copy ();
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t * copy (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t * copy_err (int * a0) const
    {
        return (err_map_int_v_callback_t *)(void*)err_map_int_char_p_t::copy_err (a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t * copy_err (int * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & xchg (err_map_int_v_callback_t * a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::xchg ((err_map_int_char_p_t *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & xchg (err_map_int_v_callback_t * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & xchg (err_map_int_v_callback_t & a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::xchg ((err_map_int_char_p_t &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & xchg (err_map_int_v_callback_t & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & operator= (err_map_int_v_callback_t const & a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::operator= ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & operator= (err_map_int_v_callback_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & operator= (err_map_int_v_callback_t const * a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::operator= ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & operator= (err_map_int_v_callback_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    void _constructor (void)
    {
        err_map_int_char_p_t::_constructor ();
    }
#else /*!ERWIN_CAST_INLINING*/
    void _constructor (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    void _destructor (void)
    {
        err_map_int_char_p_t::_destructor ();
    }
#else /*!ERWIN_CAST_INLINING*/
    void _destructor (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    operator err_map_int_v_callback_t * (void)
    {
        return (err_map_int_v_callback_t *)(void*)err_map_int_char_p_t::operator err_map_int_char_p_t * ();
    }
#else /*!ERWIN_CAST_INLINING*/
    operator err_map_int_v_callback_t * (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    operator err_map_int_v_callback_t const * (void) const
    {
        return (err_map_int_v_callback_t const *)(void*)err_map_int_char_p_t::operator err_map_int_char_p_t const * ();
    }
#else /*!ERWIN_CAST_INLINING*/
    operator err_map_int_v_callback_t const * (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    ErrVCallback *  operator[] (int  a0) const
    {
        return (ErrVCallback * )err_map_int_char_p_t::operator[] ((int )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    ErrVCallback *  operator[] (int  a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    ErrVCallback * & operator[] (int  a0)
    {
        return (ErrVCallback * &)err_map_int_char_p_t::operator[] ((int )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    ErrVCallback * & operator[] (int  a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    ErrVCallback * * find_ptr (int  a0) const
    {
        return (ErrVCallback * *)(void*)err_map_int_char_p_t::find_ptr ((int )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    ErrVCallback * * find_ptr (int  a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    ErrVCallback * * find_ptr_ensure (int  a0)
    {
        return (ErrVCallback * *)(void*)err_map_int_char_p_t::find_ptr_ensure ((int )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    ErrVCallback * * find_ptr_ensure (int  a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    ErrVCallback *  find (int  a0) const
    {
        return (ErrVCallback * )err_map_int_char_p_t::find ((int )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    ErrVCallback *  find (int  a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    ErrVCallback *  find_ensure (int  a0)
    {
        return (ErrVCallback * )err_map_int_char_p_t::find_ensure ((int )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    ErrVCallback *  find_ensure (int  a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int  find_any_key () const
    {
        return (int )err_map_int_char_p_t::find_any_key ();
    }
#else /*!ERWIN_CAST_INLINING*/
    int  find_any_key () const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    ErrVCallback *  find_any () const
    {
        return (ErrVCallback * )err_map_int_char_p_t::find_any ();
    }
#else /*!ERWIN_CAST_INLINING*/
    ErrVCallback *  find_any () const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_element_ptr_t find_any_ptr () const
    {
        return (err_map_int_v_callback_element_ptr_t)err_map_int_char_p_t::find_any_ptr ();
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_element_ptr_t find_any_ptr () const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int find_any_pair (err_map_int_v_callback_key_result_t & a0, err_map_int_v_callback_element_ptr_t & a1) const
    {
        return err_map_int_char_p_t::find_any_pair ((err_map_int_char_p_key_result_t &)a0, (err_map_int_char_p_element_ptr_t &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    int find_any_pair (err_map_int_v_callback_key_result_t & a0, err_map_int_v_callback_element_ptr_t & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & insert (int  a0, ErrVCallback *  a1)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::insert ((int )a0, (char * )a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & insert (int  a0, ErrVCallback *  a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & insert_map (err_map_int_v_callback_t const & a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::insert_map ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & insert_map (err_map_int_v_callback_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & insert_map (err_map_int_v_callback_t const * a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::insert_map ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & insert_map (err_map_int_v_callback_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERR_MAP_INT_V_CALLBACK_DIRECT_RECURSION == 0
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & insert (err_map_int_v_callback_t const & a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::insert ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & insert (err_map_int_v_callback_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & insert (err_map_int_v_callback_t const * a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::insert ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & insert (err_map_int_v_callback_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    ErrVCallback * modify (int  a0, ErrVCallback *  a1)
    {
        return (ErrVCallback *)err_map_int_char_p_t::modify ((int )a0, (char * )a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    ErrVCallback * modify (int  a0, ErrVCallback *  a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & modify_map (err_map_int_v_callback_t const & a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::modify_map ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & modify_map (err_map_int_v_callback_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & modify_map (err_map_int_v_callback_t const * a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::modify_map ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & modify_map (err_map_int_v_callback_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERR_MAP_INT_V_CALLBACK_DIRECT_RECURSION == 0
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & modify (err_map_int_v_callback_t const & a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::modify ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & modify (err_map_int_v_callback_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & modify (err_map_int_v_callback_t const * a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::modify ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & modify (err_map_int_v_callback_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & set (int  a0, ErrVCallback *  a1)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::set ((int )a0, (char * )a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & set (int  a0, ErrVCallback *  a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & set_map (err_map_int_v_callback_t const & a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::set_map ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & set_map (err_map_int_v_callback_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & set_map (err_map_int_v_callback_t const * a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::set_map ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & set_map (err_map_int_v_callback_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERR_MAP_INT_V_CALLBACK_DIRECT_RECURSION == 0
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & set (err_map_int_v_callback_t const & a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::set ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & set (err_map_int_v_callback_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & set (err_map_int_v_callback_t const * a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::set ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & set (err_map_int_v_callback_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    ErrVCallback * remove (int  a0)
    {
        return (ErrVCallback *)err_map_int_char_p_t::remove ((int )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    ErrVCallback * remove (int  a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & remove_map (err_map_int_v_callback_t const & a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::remove_map ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & remove_map (err_map_int_v_callback_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & remove_map (err_map_int_v_callback_t const * a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::remove_map ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & remove_map (err_map_int_v_callback_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int remove_if (err_map_int_v_callback_feature_t a0, bool a1 = true)
    {
        return err_map_int_char_p_t::remove_if ((err_map_int_char_p_feature_t)a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    int remove_if (err_map_int_v_callback_feature_t a0, bool a1 = true);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & erase (int  a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::erase ((int )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & erase (int  a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & erase_map (err_map_int_v_callback_t const & a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::erase_map ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & erase_map (err_map_int_v_callback_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & erase_map (err_map_int_v_callback_t const * a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::erase_map ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & erase_map (err_map_int_v_callback_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERR_MAP_INT_V_CALLBACK_DIRECT_RECURSION == 0
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & erase (err_map_int_v_callback_t const & a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::erase ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & erase (err_map_int_v_callback_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & erase (err_map_int_v_callback_t const * a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::erase ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & erase (err_map_int_v_callback_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    int erase_if (err_map_int_v_callback_feature_t a0, bool a1 = true)
    {
        return err_map_int_char_p_t::erase_if ((err_map_int_char_p_feature_t)a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    int erase_if (err_map_int_v_callback_feature_t a0, bool a1 = true);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & intersect (err_map_int_v_callback_t const & a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::intersect ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & intersect (err_map_int_v_callback_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & intersect (err_map_int_v_callback_t const * a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::intersect ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & intersect (err_map_int_v_callback_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & intersect_no_resize (err_map_int_v_callback_t const & a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::intersect_no_resize ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & intersect_no_resize (err_map_int_v_callback_t const & a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & intersect_no_resize (err_map_int_v_callback_t const * a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::intersect_no_resize ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & intersect_no_resize (err_map_int_v_callback_t const * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int  find_key (int  a0) const
    {
        return (int )err_map_int_char_p_t::find_key ((int )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    int  find_key (int  a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    ErrVCallback *  zero (void) const
    {
        return (ErrVCallback * )err_map_int_char_p_t::zero ();
    }
#else /*!ERWIN_CAST_INLINING*/
    ErrVCallback *  zero (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int  ensure (int  a0)
    {
        return (int )err_map_int_char_p_t::ensure ((int )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    int  ensure (int  a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int  ensure_no_icopy (int  a0)
    {
        return (int )err_map_int_char_p_t::ensure_no_icopy ((int )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    int  ensure_no_icopy (int  a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int  operator() (int  a0)
    {
        return (int )err_map_int_char_p_t::operator() ((int )a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    int  operator() (int  a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & poke (int * a0, ErrVCallback * * a1, int  a2, ErrVCallback *  a3, bool a4 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true), bool a5 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true))
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::poke ((int *)(void*)a0, (char * *)(void*)a1, (int )a2, (char * )a3, a4, a5);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & poke (int * a0, ErrVCallback * * a1, int  a2, ErrVCallback *  a3, bool a4 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true), bool a5 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & poke_no_icopy (int * a0, ErrVCallback * * a1, int  a2, ErrVCallback *  a3, bool a4 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true), bool a5 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true))
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::poke_no_icopy ((int *)(void*)a0, (char * *)(void*)a1, (int )a2, (char * )a3, a4, a5);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & poke_no_icopy (int * a0, ErrVCallback * * a1, int  a2, ErrVCallback *  a3, bool a4 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true), bool a5 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & poke_no_ocopy (int * a0, ErrVCallback * * a1, int  a2, ErrVCallback *  a3, bool a4 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true), bool a5 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true))
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::poke_no_ocopy ((int *)(void*)a0, (char * *)(void*)a1, (int )a2, (char * )a3, a4, a5);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & poke_no_ocopy (int * a0, ErrVCallback * * a1, int  a2, ErrVCallback *  a3, bool a4 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true), bool a5 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & poke_no_icopy_no_ocopy (int * a0, ErrVCallback * * a1, int  a2, ErrVCallback *  a3, bool a4 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true), bool a5 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true))
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::poke_no_icopy_no_ocopy ((int *)(void*)a0, (char * *)(void*)a1, (int )a2, (char * )a3, a4, a5);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & poke_no_icopy_no_ocopy (int * a0, ErrVCallback * * a1, int  a2, ErrVCallback *  a3, bool a4 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true), bool a5 ERR_MAP_INT_V_CALLBACK_DEFAULT_ARG(true));
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & clear (void)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::clear ();
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & clear (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & clear_no_resize (void)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::clear_no_resize ();
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & clear_no_resize (void);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & clear (bool a0, bool a1)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::clear (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & clear (bool a0, bool a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int nentries (void) const
    {
        return err_map_int_char_p_t::nentries ();
    }
#else /*!ERWIN_CAST_INLINING*/
    int nentries (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool empty (void) const
    {
        return err_map_int_char_p_t::empty ();
    }
#else /*!ERWIN_CAST_INLINING*/
    bool empty (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool non_empty (void) const
    {
        return err_map_int_char_p_t::non_empty ();
    }
#else /*!ERWIN_CAST_INLINING*/
    bool non_empty (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int * get_keys (void) const
    {
        return (int *)(void*)err_map_int_char_p_t::get_keys ();
    }
#else /*!ERWIN_CAST_INLINING*/
    int * get_keys (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void delete_keys (int * a0)
    {
        err_map_int_char_p_t::delete_keys ((int *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void delete_keys (int * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_pair_t * get_entries (void) const
    {
        return (err_map_int_v_callback_pair_t *)(void*)err_map_int_char_p_t::get_entries ();
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_pair_t * get_entries (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_pair_ptr_t * get_entries_ptr (void) const
    {
        return (err_map_int_v_callback_pair_ptr_t *)(void*)err_map_int_char_p_t::get_entries_ptr ();
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_pair_ptr_t * get_entries_ptr (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    ErrVCallback * * get_values (void) const
    {
        return (ErrVCallback * *)(void*)err_map_int_char_p_t::get_values ();
    }
#else /*!ERWIN_CAST_INLINING*/
    ErrVCallback * * get_values (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void delete_entries_ptr (err_map_int_v_callback_pair_ptr_t * a0)
    {
        err_map_int_char_p_t::delete_entries_ptr ((err_map_int_char_p_pair_ptr_t *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void delete_entries_ptr (err_map_int_v_callback_pair_ptr_t * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void delete_entries (err_map_int_v_callback_pair_t * a0)
    {
        err_map_int_char_p_t::delete_entries ((err_map_int_char_p_pair_t *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void delete_entries (err_map_int_v_callback_pair_t * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void delete_values (ErrVCallback * * a0)
    {
        err_map_int_char_p_t::delete_values ((char * *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void delete_values (ErrVCallback * * a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int hash_size (void) const
    {
        return err_map_int_char_p_t::hash_size ();
    }
#else /*!ERWIN_CAST_INLINING*/
    int hash_size (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_map_int_v_callback_t & rehash (int a0)
    {
        return (err_map_int_v_callback_t &)err_map_int_char_p_t::rehash (a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    err_map_int_v_callback_t & rehash (int a0);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    double average_line_length (void) const
    {
        return err_map_int_char_p_t::average_line_length ();
    }
#else /*!ERWIN_CAST_INLINING*/
    double average_line_length (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    double variance_line_length (void) const
    {
        return err_map_int_char_p_t::variance_line_length ();
    }
#else /*!ERWIN_CAST_INLINING*/
    double variance_line_length (void) const;
#endif /*ERWIN_CAST_INLINING*/
#ifdef HAVE_SQRT
#if ERWIN_CAST_INLINING
    double deviation_line_length (void) const
    {
        return err_map_int_char_p_t::deviation_line_length ();
    }
#else /*!ERWIN_CAST_INLINING*/
    double deviation_line_length (void) const;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    int max_line_length (void) const
    {
        return err_map_int_char_p_t::max_line_length ();
    }
#else /*!ERWIN_CAST_INLINING*/
    int max_line_length (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int min_line_length (void) const
    {
        return err_map_int_char_p_t::min_line_length ();
    }
#else /*!ERWIN_CAST_INLINING*/
    int min_line_length (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    void dump (FILE * a0) const
    {
        err_map_int_char_p_t::dump (a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    void dump (FILE * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#ifdef ERR_ERWIN_PROFILE
#if ERWIN_CAST_INLINING
    int nrehash_ops (void) const
    {
        return err_map_int_char_p_t::nrehash_ops ();
    }
#else /*!ERWIN_CAST_INLINING*/
    int nrehash_ops (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int nrehash (void) const
    {
        return err_map_int_char_p_t::nrehash ();
    }
#else /*!ERWIN_CAST_INLINING*/
    int nrehash (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int ninsert (void) const
    {
        return err_map_int_char_p_t::ninsert ();
    }
#else /*!ERWIN_CAST_INLINING*/
    int ninsert (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int nremove (void) const
    {
        return err_map_int_char_p_t::nremove ();
    }
#else /*!ERWIN_CAST_INLINING*/
    int nremove (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int nfind (void) const
    {
        return err_map_int_char_p_t::nfind ();
    }
#else /*!ERWIN_CAST_INLINING*/
    int nfind (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int nops (void) const
    {
        return err_map_int_char_p_t::nops ();
    }
#else /*!ERWIN_CAST_INLINING*/
    int nops (void) const;
#endif /*ERWIN_CAST_INLINING*/
#endif
#if ERWIN_CAST_INLINING
    err_hashval_t hash_raw (void) const
    {
        return err_map_int_char_p_t::hash_raw ();
    }
#else /*!ERWIN_CAST_INLINING*/
    err_hashval_t hash_raw (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    err_hashval_t hash (void) const
    {
        return err_map_int_char_p_t::hash ();
    }
#else /*!ERWIN_CAST_INLINING*/
    err_hashval_t hash (void) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool equal (err_map_int_v_callback_t const * a0) const
    {
        return err_map_int_char_p_t::equal ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool equal (err_map_int_v_callback_t const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool equal (err_map_int_v_callback_t const & a0) const
    {
        return err_map_int_char_p_t::equal ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool equal (err_map_int_v_callback_t const & a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int cmp (err_map_int_v_callback_t const * a0) const
    {
        return err_map_int_char_p_t::cmp ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    int cmp (err_map_int_v_callback_t const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    int cmp (err_map_int_v_callback_t const & a0) const
    {
        return err_map_int_char_p_t::cmp ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    int cmp (err_map_int_v_callback_t const & a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator== (err_map_int_v_callback_t const & a0) const
    {
        return err_map_int_char_p_t::operator== ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator== (err_map_int_v_callback_t const & a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator== (err_map_int_v_callback_t const * a0) const
    {
        return err_map_int_char_p_t::operator== ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator== (err_map_int_v_callback_t const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator!= (err_map_int_v_callback_t const & a0) const
    {
        return err_map_int_char_p_t::operator!= ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator!= (err_map_int_v_callback_t const & a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator!= (err_map_int_v_callback_t const * a0) const
    {
        return err_map_int_char_p_t::operator!= ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator!= (err_map_int_v_callback_t const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator<= (err_map_int_v_callback_t const & a0) const
    {
        return err_map_int_char_p_t::operator<= ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator<= (err_map_int_v_callback_t const & a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator<= (err_map_int_v_callback_t const * a0) const
    {
        return err_map_int_char_p_t::operator<= ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator<= (err_map_int_v_callback_t const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator>= (err_map_int_v_callback_t const & a0) const
    {
        return err_map_int_char_p_t::operator>= ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator>= (err_map_int_v_callback_t const & a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator>= (err_map_int_v_callback_t const * a0) const
    {
        return err_map_int_char_p_t::operator>= ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator>= (err_map_int_v_callback_t const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator< (err_map_int_v_callback_t const & a0) const
    {
        return err_map_int_char_p_t::operator< ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator< (err_map_int_v_callback_t const & a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator< (err_map_int_v_callback_t const * a0) const
    {
        return err_map_int_char_p_t::operator< ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator< (err_map_int_v_callback_t const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator> (err_map_int_v_callback_t const & a0) const
    {
        return err_map_int_char_p_t::operator> ((err_map_int_char_p_t const &)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator> (err_map_int_v_callback_t const & a0) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool operator> (err_map_int_v_callback_t const * a0) const
    {
        return err_map_int_char_p_t::operator> ((err_map_int_char_p_t const *)(void*)a0);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool operator> (err_map_int_v_callback_t const * a0) const;
#endif /*ERWIN_CAST_INLINING*/
    typedef ErrVCallback * ValueType;
    typedef int KeyType;

#if ERWIN_CAST_INLINING
    static inline void init_iterator (void const * a0, err_map_iterator_t * a1)
    {
        err_map_int_char_p_t::init_iterator (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator (void const * a0, err_map_iterator_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next (err_map_iterator_t & a0, int & a1, ErrVCallback * & a2) const
    {
        return err_map_int_char_p_t::next (a0, (int &)a1, (char * &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next (err_map_iterator_t & a0, int & a1, ErrVCallback * & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_sorted_by_key (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_sorted_by_key (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_sorted_by_key (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_sorted (err_map_iterator_sorted_t & a0, int & a1, ErrVCallback * & a2) const
    {
        return err_map_int_char_p_t::next_sorted (a0, (int &)a1, (char * &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_sorted (err_map_iterator_sorted_t & a0, int & a1, ErrVCallback * & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_sorted_by_value (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_sorted_by_value (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_sorted_by_value (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_sorted_by_key_and_value (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_sorted_by_key_and_value (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_sorted_by_key_and_value (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_sorted_by_value_and_key (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_sorted_by_value_and_key (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_sorted_by_value_and_key (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_sorted_by_user (void const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_void_pair_cmp_t a2)
    {
        err_map_int_char_p_t::init_iterator_sorted_by_user (a0, a1, (err_map_int_char_p_void_pair_cmp_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_sorted_by_user (void const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_void_pair_cmp_t a2);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_user_sorted (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, int & a2, ErrVCallback * & a3) const
    {
        return err_map_int_char_p_t::next_user_sorted (a0, (err_map_int_char_p_pair_cmp_t)a1, (int &)a2, (char * &)a3);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_user_sorted (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, int & a2, ErrVCallback * & a3) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_ptr (err_map_iterator_t & a0, int & a1, err_map_int_v_callback_element_ptr_t & a2) const
    {
        return err_map_int_char_p_t::next_ptr (a0, (int &)a1, (err_map_int_char_p_element_ptr_t &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_ptr (err_map_iterator_t & a0, int & a1, err_map_int_v_callback_element_ptr_t & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_ptr_sorted_by_key (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_ptr_sorted_by_key (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_ptr_sorted_by_key (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_sorted_ptr (err_map_iterator_sorted_t & a0, int & a1, err_map_int_v_callback_element_ptr_t & a2) const
    {
        return err_map_int_char_p_t::next_sorted_ptr (a0, (int &)a1, (err_map_int_char_p_element_ptr_t &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_sorted_ptr (err_map_iterator_sorted_t & a0, int & a1, err_map_int_v_callback_element_ptr_t & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_ptr_sorted_by_value (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_ptr_sorted_by_value (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_ptr_sorted_by_value (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_ptr_sorted_by_key_and_value (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_ptr_sorted_by_key_and_value (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_ptr_sorted_by_key_and_value (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_ptr_sorted_by_value_and_key (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_ptr_sorted_by_value_and_key (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_ptr_sorted_by_value_and_key (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_ptr_sorted_by_user (void const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_void_pair_cmp_t a2)
    {
        err_map_int_char_p_t::init_iterator_ptr_sorted_by_user (a0, a1, (err_map_int_char_p_void_pair_cmp_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_ptr_sorted_by_user (void const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_void_pair_cmp_t a2);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_user_sorted_ptr (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_cmp_t a1, int & a2, err_map_int_v_callback_element_ptr_t & a3) const
    {
        return err_map_int_char_p_t::next_user_sorted_ptr (a0, (err_map_int_char_p_pair_ptr_cmp_t)a1, (int &)a2, (err_map_int_char_p_element_ptr_t &)a3);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_user_sorted_ptr (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_cmp_t a1, int & a2, err_map_int_v_callback_element_ptr_t & a3) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_key (err_map_iterator_t & a0, int & a1) const
    {
        return err_map_int_char_p_t::next_key (a0, (int &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_key (err_map_iterator_t & a0, int & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_sorted_key (err_map_iterator_sorted_t & a0, int & a1) const
    {
        return err_map_int_char_p_t::next_sorted_key (a0, (int &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_sorted_key (err_map_iterator_sorted_t & a0, int & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_user_sorted_key (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, int & a2) const
    {
        return err_map_int_char_p_t::next_user_sorted_key (a0, (err_map_int_char_p_pair_cmp_t)a1, (int &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_user_sorted_key (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, int & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_value (err_map_iterator_t & a0, ErrVCallback * & a1) const
    {
        return err_map_int_char_p_t::next_value (a0, (char * &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_value (err_map_iterator_t & a0, ErrVCallback * & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_sorted_value (err_map_iterator_sorted_t & a0, ErrVCallback * & a1) const
    {
        return err_map_int_char_p_t::next_sorted_value (a0, (char * &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_sorted_value (err_map_iterator_sorted_t & a0, ErrVCallback * & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_user_sorted_value (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, ErrVCallback * & a2) const
    {
        return err_map_int_char_p_t::next_user_sorted_value (a0, (err_map_int_char_p_pair_cmp_t)a1, (char * &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_user_sorted_value (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, ErrVCallback * & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_value_ptr (err_map_iterator_t & a0, err_map_int_v_callback_element_ptr_t & a1) const
    {
        return err_map_int_char_p_t::next_value_ptr (a0, (err_map_int_char_p_element_ptr_t &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_value_ptr (err_map_iterator_t & a0, err_map_int_v_callback_element_ptr_t & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_sorted_value_ptr (err_map_iterator_sorted_t & a0, err_map_int_v_callback_element_ptr_t & a1) const
    {
        return err_map_int_char_p_t::next_sorted_value_ptr (a0, (err_map_int_char_p_element_ptr_t &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_sorted_value_ptr (err_map_iterator_sorted_t & a0, err_map_int_v_callback_element_ptr_t & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_user_sorted_value_ptr (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_cmp_t a1, err_map_int_v_callback_element_ptr_t & a2) const
    {
        return err_map_int_char_p_t::next_user_sorted_value_ptr (a0, (err_map_int_char_p_pair_ptr_cmp_t)a1, (err_map_int_char_p_element_ptr_t &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_user_sorted_value_ptr (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_cmp_t a1, err_map_int_v_callback_element_ptr_t & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_pair (err_map_iterator_t & a0, err_map_int_v_callback_pair_t & a1) const
    {
        return err_map_int_char_p_t::next_pair (a0, (err_map_int_char_p_pair_t &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_pair (err_map_iterator_t & a0, err_map_int_v_callback_pair_t & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_sorted_pair (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_t & a1) const
    {
        return err_map_int_char_p_t::next_sorted_pair (a0, (err_map_int_char_p_pair_t &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_sorted_pair (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_t & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_user_sorted_pair (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, err_map_int_v_callback_pair_t & a2) const
    {
        return err_map_int_char_p_t::next_user_sorted_pair (a0, (err_map_int_char_p_pair_cmp_t)a1, (err_map_int_char_p_pair_t &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_user_sorted_pair (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, err_map_int_v_callback_pair_t & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_pair_ptr (err_map_iterator_t & a0, err_map_int_v_callback_pair_ptr_t & a1) const
    {
        return err_map_int_char_p_t::next_pair_ptr (a0, (err_map_int_char_p_pair_ptr_t &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_pair_ptr (err_map_iterator_t & a0, err_map_int_v_callback_pair_ptr_t & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_sorted_pair_ptr (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_t & a1) const
    {
        return err_map_int_char_p_t::next_sorted_pair_ptr (a0, (err_map_int_char_p_pair_ptr_t &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_sorted_pair_ptr (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_t & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_user_sorted_pair_ptr (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_cmp_t a1, err_map_int_v_callback_pair_ptr_t & a2) const
    {
        return err_map_int_char_p_t::next_user_sorted_pair_ptr (a0, (err_map_int_char_p_pair_ptr_cmp_t)a1, (err_map_int_char_p_pair_ptr_t &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_user_sorted_pair_ptr (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_cmp_t a1, err_map_int_v_callback_pair_ptr_t & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_sorted_by_key_reverse (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_sorted_by_key_reverse (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_sorted_by_key_reverse (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_sorted_reverse (err_map_iterator_sorted_t & a0, int & a1, ErrVCallback * & a2) const
    {
        return err_map_int_char_p_t::next_sorted_reverse (a0, (int &)a1, (char * &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_sorted_reverse (err_map_iterator_sorted_t & a0, int & a1, ErrVCallback * & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_sorted_by_value_reverse (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_sorted_by_value_reverse (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_sorted_by_value_reverse (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_sorted_by_key_and_value_reverse (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_sorted_by_key_and_value_reverse (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_sorted_by_key_and_value_reverse (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_sorted_by_value_and_key_reverse (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_sorted_by_value_and_key_reverse (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_sorted_by_value_and_key_reverse (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_sorted_by_user_reverse (void const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_void_pair_cmp_t a2)
    {
        err_map_int_char_p_t::init_iterator_sorted_by_user_reverse (a0, a1, (err_map_int_char_p_void_pair_cmp_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_sorted_by_user_reverse (void const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_void_pair_cmp_t a2);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_user_sorted_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, int & a2, ErrVCallback * & a3) const
    {
        return err_map_int_char_p_t::next_user_sorted_reverse (a0, (err_map_int_char_p_pair_cmp_t)a1, (int &)a2, (char * &)a3);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_user_sorted_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, int & a2, ErrVCallback * & a3) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_ptr_sorted_by_key_reverse (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_ptr_sorted_by_key_reverse (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_ptr_sorted_by_key_reverse (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_sorted_ptr_reverse (err_map_iterator_sorted_t & a0, int & a1, err_map_int_v_callback_element_ptr_t & a2) const
    {
        return err_map_int_char_p_t::next_sorted_ptr_reverse (a0, (int &)a1, (err_map_int_char_p_element_ptr_t &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_sorted_ptr_reverse (err_map_iterator_sorted_t & a0, int & a1, err_map_int_v_callback_element_ptr_t & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_ptr_sorted_by_value_reverse (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_ptr_sorted_by_value_reverse (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_ptr_sorted_by_value_reverse (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_ptr_sorted_by_key_and_value_reverse (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_ptr_sorted_by_key_and_value_reverse (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_ptr_sorted_by_key_and_value_reverse (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_ptr_sorted_by_value_and_key_reverse (void const * a0, err_map_iterator_sorted_t * a1)
    {
        err_map_int_char_p_t::init_iterator_ptr_sorted_by_value_and_key_reverse (a0, a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_ptr_sorted_by_value_and_key_reverse (void const * a0, err_map_iterator_sorted_t * a1);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    static inline void init_iterator_ptr_sorted_by_user_reverse (void const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_void_pair_cmp_t a2)
    {
        err_map_int_char_p_t::init_iterator_ptr_sorted_by_user_reverse (a0, a1, (err_map_int_char_p_void_pair_cmp_t)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    static void init_iterator_ptr_sorted_by_user_reverse (void const * a0, err_map_iterator_sorted_t * a1, err_map_int_v_callback_void_pair_cmp_t a2);
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_user_sorted_ptr_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_cmp_t a1, int & a2, err_map_int_v_callback_element_ptr_t & a3) const
    {
        return err_map_int_char_p_t::next_user_sorted_ptr_reverse (a0, (err_map_int_char_p_pair_ptr_cmp_t)a1, (int &)a2, (err_map_int_char_p_element_ptr_t &)a3);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_user_sorted_ptr_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_cmp_t a1, int & a2, err_map_int_v_callback_element_ptr_t & a3) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_sorted_key_reverse (err_map_iterator_sorted_t & a0, int & a1) const
    {
        return err_map_int_char_p_t::next_sorted_key_reverse (a0, (int &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_sorted_key_reverse (err_map_iterator_sorted_t & a0, int & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_user_sorted_key_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, int & a2) const
    {
        return err_map_int_char_p_t::next_user_sorted_key_reverse (a0, (err_map_int_char_p_pair_cmp_t)a1, (int &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_user_sorted_key_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, int & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_sorted_value_reverse (err_map_iterator_sorted_t & a0, ErrVCallback * & a1) const
    {
        return err_map_int_char_p_t::next_sorted_value_reverse (a0, (char * &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_sorted_value_reverse (err_map_iterator_sorted_t & a0, ErrVCallback * & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_user_sorted_value_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, ErrVCallback * & a2) const
    {
        return err_map_int_char_p_t::next_user_sorted_value_reverse (a0, (err_map_int_char_p_pair_cmp_t)a1, (char * &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_user_sorted_value_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, ErrVCallback * & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_sorted_value_ptr_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_element_ptr_t & a1) const
    {
        return err_map_int_char_p_t::next_sorted_value_ptr_reverse (a0, (err_map_int_char_p_element_ptr_t &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_sorted_value_ptr_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_element_ptr_t & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_user_sorted_value_ptr_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_cmp_t a1, err_map_int_v_callback_element_ptr_t & a2) const
    {
        return err_map_int_char_p_t::next_user_sorted_value_ptr_reverse (a0, (err_map_int_char_p_pair_ptr_cmp_t)a1, (err_map_int_char_p_element_ptr_t &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_user_sorted_value_ptr_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_cmp_t a1, err_map_int_v_callback_element_ptr_t & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_sorted_pair_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_t & a1) const
    {
        return err_map_int_char_p_t::next_sorted_pair_reverse (a0, (err_map_int_char_p_pair_t &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_sorted_pair_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_t & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_user_sorted_pair_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, err_map_int_v_callback_pair_t & a2) const
    {
        return err_map_int_char_p_t::next_user_sorted_pair_reverse (a0, (err_map_int_char_p_pair_cmp_t)a1, (err_map_int_char_p_pair_t &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_user_sorted_pair_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_cmp_t a1, err_map_int_v_callback_pair_t & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_sorted_pair_ptr_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_t & a1) const
    {
        return err_map_int_char_p_t::next_sorted_pair_ptr_reverse (a0, (err_map_int_char_p_pair_ptr_t &)a1);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_sorted_pair_ptr_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_t & a1) const;
#endif /*ERWIN_CAST_INLINING*/
#if ERWIN_CAST_INLINING
    bool next_user_sorted_pair_ptr_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_cmp_t a1, err_map_int_v_callback_pair_ptr_t & a2) const
    {
        return err_map_int_char_p_t::next_user_sorted_pair_ptr_reverse (a0, (err_map_int_char_p_pair_ptr_cmp_t)a1, (err_map_int_char_p_pair_ptr_t &)a2);
    }
#else /*!ERWIN_CAST_INLINING*/
    bool next_user_sorted_pair_ptr_reverse (err_map_iterator_sorted_t & a0, err_map_int_v_callback_pair_ptr_cmp_t a1, err_map_int_v_callback_pair_ptr_t & a2) const;
#endif /*ERWIN_CAST_INLINING*/
#endif /* _cplusplus */
};

#ifdef __cplusplus

/* some nasty global functions that are useful e.g. for forall.  Note that these
 * are not local to one vector but will be overloaded by all different vector
 * instantiations. */
extern "C++" {
ERWIN_WRAPPER
err_map_int_v_callback_t *err_erwin_ptr_of(err_map_int_v_callback_t *x) { return x;  }

ERWIN_WRAPPER
err_map_int_v_callback_t *err_erwin_ptr_of(err_map_int_v_callback_t &x) { return &x; }

ERWIN_WRAPPER
err_map_int_v_callback_t const *err_erwin_ptr_const_of (err_map_int_v_callback_t const *x) { return x;  }

ERWIN_WRAPPER
err_map_int_v_callback_t const *err_erwin_ptr_const_of (err_map_int_v_callback_t const &x) { return &x; }
}

#endif /* __cplusplus */


#ifdef ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP
#  if ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY
#      define ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY 1
#    endif
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE
#      define ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE 1
#    endif
#  else
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY
#      define ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY 0
#    endif
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE
#      define ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY
#define ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY 0
#endif /* !defined ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY */

#ifndef ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE
#define ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE 0
#endif /* !defined ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE */

#ifdef ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP
#  if ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COPY
#      define ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COPY 1
#    endif
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COMPARE
#      define ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COMPARE 1
#    endif
#  else
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COPY
#      define ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COPY 0
#    endif
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COMPARE
#      define ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COPY
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COPY 0
#endif /* !defined ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COPY */

#ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COMPARE
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COMPARE 0
#endif /* !defined ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COMPARE */

#ifdef ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP
#  if ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP
#    ifndef ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY
#      define ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY 1
#    endif
#    ifndef ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE
#      define ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE 1
#    endif
#  else
#    ifndef ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY
#      define ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY 0
#    endif
#    ifndef ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE
#      define ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY 0
#endif /* !defined ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY */

#ifndef ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE 0
#endif /* !defined ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE */

#ifdef ERR_ERRMAPINTVCALLBACKP_DEEP
#  if ERR_ERRMAPINTVCALLBACKP_DEEP
#    ifndef ERR_ERRMAPINTVCALLBACKP_DEEP_COPY
#      define ERR_ERRMAPINTVCALLBACKP_DEEP_COPY 1
#    endif
#    ifndef ERR_ERRMAPINTVCALLBACKP_DEEP_COMPARE
#      define ERR_ERRMAPINTVCALLBACKP_DEEP_COMPARE 1
#    endif
#  else
#    ifndef ERR_ERRMAPINTVCALLBACKP_DEEP_COPY
#      define ERR_ERRMAPINTVCALLBACKP_DEEP_COPY 0
#    endif
#    ifndef ERR_ERRMAPINTVCALLBACKP_DEEP_COMPARE
#      define ERR_ERRMAPINTVCALLBACKP_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef ERR_ERRMAPINTVCALLBACKP_DEEP_COPY
#define ERR_ERRMAPINTVCALLBACKP_DEEP_COPY 0
#endif /* !defined ERR_ERRMAPINTVCALLBACKP_DEEP_COPY */

#ifndef ERR_ERRMAPINTVCALLBACKP_DEEP_COMPARE
#define ERR_ERRMAPINTVCALLBACKP_DEEP_COMPARE 0
#endif /* !defined ERR_ERRMAPINTVCALLBACKP_DEEP_COMPARE */

#ifdef ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP
#  if ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP
#    ifndef ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COPY
#      define ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COPY 1
#    endif
#    ifndef ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COMPARE
#      define ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COMPARE 1
#    endif
#  else
#    ifndef ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COPY
#      define ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COPY 0
#    endif
#    ifndef ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COMPARE
#      define ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COPY
#define ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COPY 0
#endif /* !defined ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COPY */

#ifndef ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COMPARE
#define ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COMPARE 0
#endif /* !defined ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COMPARE */

#ifdef ERR_CONST_ERRMAPINTVCALLBACKP_DEEP
#  if ERR_CONST_ERRMAPINTVCALLBACKP_DEEP
#    ifndef ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COPY
#      define ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COPY 1
#    endif
#    ifndef ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COMPARE
#      define ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COMPARE 1
#    endif
#  else
#    ifndef ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COPY
#      define ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COPY 0
#    endif
#    ifndef ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COMPARE
#      define ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COPY
#define ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COPY 0
#endif /* !defined ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COPY */

#ifndef ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COMPARE
#define ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COMPARE 0
#endif /* !defined ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COMPARE */

#ifdef ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP
#  if ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY
#      define ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY 1
#    endif
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE
#      define ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE 1
#    endif
#  else
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY
#      define ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY 0
#    endif
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE
#      define ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY
#define ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY 0
#endif /* !defined ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY */

#ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE
#define ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE 0
#endif /* !defined ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE */

#ifdef ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP
#  if ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COPY
#      define ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COPY 1
#    endif
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COMPARE
#      define ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COMPARE 1
#    endif
#  else
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COPY
#      define ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COPY 0
#    endif
#    ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COMPARE
#      define ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COPY
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COPY 0
#endif /* !defined ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COPY */

#ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COMPARE
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COMPARE 0
#endif /* !defined ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COMPARE */

#ifdef ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP
#  if ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP
#    ifndef ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY
#      define ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY 1
#    endif
#    ifndef ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE
#      define ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE 1
#    endif
#  else
#    ifndef ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY
#      define ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY 0
#    endif
#    ifndef ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE
#      define ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY 0
#endif /* !defined ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY */

#ifndef ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE 0
#endif /* !defined ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE */

#ifdef ERR_ERRMAPINTVCALLBACK_P_DEEP
#  if ERR_ERRMAPINTVCALLBACK_P_DEEP
#    ifndef ERR_ERRMAPINTVCALLBACK_P_DEEP_COPY
#      define ERR_ERRMAPINTVCALLBACK_P_DEEP_COPY 1
#    endif
#    ifndef ERR_ERRMAPINTVCALLBACK_P_DEEP_COMPARE
#      define ERR_ERRMAPINTVCALLBACK_P_DEEP_COMPARE 1
#    endif
#  else
#    ifndef ERR_ERRMAPINTVCALLBACK_P_DEEP_COPY
#      define ERR_ERRMAPINTVCALLBACK_P_DEEP_COPY 0
#    endif
#    ifndef ERR_ERRMAPINTVCALLBACK_P_DEEP_COMPARE
#      define ERR_ERRMAPINTVCALLBACK_P_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef ERR_ERRMAPINTVCALLBACK_P_DEEP_COPY
#define ERR_ERRMAPINTVCALLBACK_P_DEEP_COPY 0
#endif /* !defined ERR_ERRMAPINTVCALLBACK_P_DEEP_COPY */

#ifndef ERR_ERRMAPINTVCALLBACK_P_DEEP_COMPARE
#define ERR_ERRMAPINTVCALLBACK_P_DEEP_COMPARE 0
#endif /* !defined ERR_ERRMAPINTVCALLBACK_P_DEEP_COMPARE */

#ifdef ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP
#  if ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP
#    ifndef ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COPY
#      define ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COPY 1
#    endif
#    ifndef ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COMPARE
#      define ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COMPARE 1
#    endif
#  else
#    ifndef ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COPY
#      define ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COPY 0
#    endif
#    ifndef ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COMPARE
#      define ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COPY
#define ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COPY 0
#endif /* !defined ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COPY */

#ifndef ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COMPARE
#define ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COMPARE 0
#endif /* !defined ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COMPARE */

#ifdef ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP
#  if ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP
#    ifndef ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COPY
#      define ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COPY 1
#    endif
#    ifndef ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COMPARE
#      define ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COMPARE 1
#    endif
#  else
#    ifndef ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COPY
#      define ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COPY 0
#    endif
#    ifndef ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COMPARE
#      define ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COMPARE 0
#    endif
#  endif
#endif
#ifndef ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COPY
#define ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COPY 0
#endif /* !defined ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COPY */

#ifndef ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COMPARE
#define ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COMPARE 0
#endif /* !defined ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COMPARE */

#if ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE && !defined(ERR_ERR_MAP_INT_V_CALLBACK_TP_HASHVAL)
#define ERR_ERR_MAP_INT_V_CALLBACK_TP_HASHVAL(A1) err_map_int_v_callback_hashval((A1))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COMPARE && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_HASHVAL)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_HASHVAL(A1) err_map_int_v_callback_hashval((A1))
#endif

#if ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE && !defined(ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_HASHVAL)
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_HASHVAL(A1) err_map_int_v_callback_hashval((A1))
#endif

#if ERR_ERRMAPINTVCALLBACKP_DEEP_COMPARE && !defined(ERR_ERRMAPINTVCALLBACKP_HASHVAL)
#define ERR_ERRMAPINTVCALLBACKP_HASHVAL(A1) ((A1)->hashval())
#endif

#if ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COMPARE && !defined(ERR_ERRMAPINTVCALLBACK_CONSTP_HASHVAL)
#define ERR_ERRMAPINTVCALLBACK_CONSTP_HASHVAL(A1) ((A1)->hashval())
#endif

#if ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COMPARE && !defined(ERR_CONST_ERRMAPINTVCALLBACKP_HASHVAL)
#define ERR_CONST_ERRMAPINTVCALLBACKP_HASHVAL(A1) ((A1)->hashval())
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_P_HASHVAL)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_P_HASHVAL(A1) err_map_int_v_callback_hashval((A1))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COMPARE && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_HASHVAL)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_HASHVAL(A1) err_map_int_v_callback_hashval((A1))
#endif

#if ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE && !defined(ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_HASHVAL)
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_HASHVAL(A1) err_map_int_v_callback_hashval((A1))
#endif

#if ERR_ERRMAPINTVCALLBACK_P_DEEP_COMPARE && !defined(ERR_ERRMAPINTVCALLBACK_P_HASHVAL)
#define ERR_ERRMAPINTVCALLBACK_P_HASHVAL(A1) ((A1)->hashval())
#endif

#if ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COMPARE && !defined(ERR_ERRMAPINTVCALLBACK_CONST_P_HASHVAL)
#define ERR_ERRMAPINTVCALLBACK_CONST_P_HASHVAL(A1) ((A1)->hashval())
#endif

#if ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COMPARE && !defined(ERR_CONST_ERRMAPINTVCALLBACK_P_HASHVAL)
#define ERR_CONST_ERRMAPINTVCALLBACK_P_HASHVAL(A1) ((A1)->hashval())
#endif

#ifndef ERR_ERRMAPINTVCALLBACK_HASHVAL
#define ERR_ERRMAPINTVCALLBACK_HASHVAL(A1) ((A1).hashval())
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE && !defined(ERR_ERR_MAP_INT_V_CALLBACK_TP_CMP)
#define ERR_ERR_MAP_INT_V_CALLBACK_TP_CMP(A1,A2) err_map_int_v_callback_cmp((A1),(A2))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COMPARE && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_CMP)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_CMP(A1,A2) err_map_int_v_callback_cmp((A1),(A2))
#endif

#if ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE && !defined(ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_CMP)
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_CMP(A1,A2) err_map_int_v_callback_cmp((A1),(A2))
#endif

#if ERR_ERRMAPINTVCALLBACKP_DEEP_COMPARE && !defined(ERR_ERRMAPINTVCALLBACKP_CMP)
#define ERR_ERRMAPINTVCALLBACKP_CMP(A1,A2) ((A1)->cmp((A2)))
#endif

#if ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COMPARE && !defined(ERR_ERRMAPINTVCALLBACK_CONSTP_CMP)
#define ERR_ERRMAPINTVCALLBACK_CONSTP_CMP(A1,A2) ((A1)->cmp((A2)))
#endif

#if ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COMPARE && !defined(ERR_CONST_ERRMAPINTVCALLBACKP_CMP)
#define ERR_CONST_ERRMAPINTVCALLBACKP_CMP(A1,A2) ((A1)->cmp((A2)))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_P_CMP)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_P_CMP(A1,A2) err_map_int_v_callback_cmp((A1),(A2))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COMPARE && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_CMP)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_CMP(A1,A2) err_map_int_v_callback_cmp((A1),(A2))
#endif

#if ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE && !defined(ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_CMP)
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_CMP(A1,A2) err_map_int_v_callback_cmp((A1),(A2))
#endif

#if ERR_ERRMAPINTVCALLBACK_P_DEEP_COMPARE && !defined(ERR_ERRMAPINTVCALLBACK_P_CMP)
#define ERR_ERRMAPINTVCALLBACK_P_CMP(A1,A2) ((A1)->cmp((A2)))
#endif

#if ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COMPARE && !defined(ERR_ERRMAPINTVCALLBACK_CONST_P_CMP)
#define ERR_ERRMAPINTVCALLBACK_CONST_P_CMP(A1,A2) ((A1)->cmp((A2)))
#endif

#if ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COMPARE && !defined(ERR_CONST_ERRMAPINTVCALLBACK_P_CMP)
#define ERR_CONST_ERRMAPINTVCALLBACK_P_CMP(A1,A2) ((A1)->cmp((A2)))
#endif

#ifndef ERR_ERRMAPINTVCALLBACK_CMP
#define ERR_ERRMAPINTVCALLBACK_CMP(A1,A2) ((A1).cmp((A2)))
#endif

#ifndef ERR_ERRMAPINTVCALLBACK_ZERO
#define ERR_ERRMAPINTVCALLBACK_ZERO (ErrMapIntVCallback::static_zero())
#endif

#ifndef ERR_ERR_MAP_INT_V_CALLBACK_TP_CONSTANT_ZERO
#define ERR_ERR_MAP_INT_V_CALLBACK_TP_CONSTANT_ZERO(A1) err_map_int_v_callback_constant_zero((A1))
#endif

#ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_CONSTANT_ZERO
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_CONSTANT_ZERO(A1) err_map_int_v_callback_constant_zero((A1))
#endif

#ifndef ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_CONSTANT_ZERO
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_CONSTANT_ZERO(A1) err_map_int_v_callback_constant_zero((A1))
#endif

#ifndef ERR_ERRMAPINTVCALLBACKP_CONSTANT_ZERO
#define ERR_ERRMAPINTVCALLBACKP_CONSTANT_ZERO(A1) ((A1)->constant_zero())
#endif

#ifndef ERR_ERRMAPINTVCALLBACK_CONSTP_CONSTANT_ZERO
#define ERR_ERRMAPINTVCALLBACK_CONSTP_CONSTANT_ZERO(A1) ((A1)->constant_zero())
#endif

#ifndef ERR_CONST_ERRMAPINTVCALLBACKP_CONSTANT_ZERO
#define ERR_CONST_ERRMAPINTVCALLBACKP_CONSTANT_ZERO(A1) ((A1)->constant_zero())
#endif

#ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_P_CONSTANT_ZERO
#define ERR_ERR_MAP_INT_V_CALLBACK_T_P_CONSTANT_ZERO(A1) err_map_int_v_callback_constant_zero((A1))
#endif

#ifndef ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_CONSTANT_ZERO
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_CONSTANT_ZERO(A1) err_map_int_v_callback_constant_zero((A1))
#endif

#ifndef ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_CONSTANT_ZERO
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_CONSTANT_ZERO(A1) err_map_int_v_callback_constant_zero((A1))
#endif

#ifndef ERR_ERRMAPINTVCALLBACK_P_CONSTANT_ZERO
#define ERR_ERRMAPINTVCALLBACK_P_CONSTANT_ZERO(A1) ((A1)->constant_zero())
#endif

#ifndef ERR_ERRMAPINTVCALLBACK_CONST_P_CONSTANT_ZERO
#define ERR_ERRMAPINTVCALLBACK_CONST_P_CONSTANT_ZERO(A1) ((A1)->constant_zero())
#endif

#ifndef ERR_CONST_ERRMAPINTVCALLBACK_P_CONSTANT_ZERO
#define ERR_CONST_ERRMAPINTVCALLBACK_P_CONSTANT_ZERO(A1) ((A1)->constant_zero())
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE && !defined(ERR_ERR_MAP_INT_V_CALLBACK_TP_EQUAL)
#define ERR_ERR_MAP_INT_V_CALLBACK_TP_EQUAL(A1,A2) err_map_int_v_callback_equal((A1),(A2))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COMPARE && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_EQUAL)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_EQUAL(A1,A2) err_map_int_v_callback_equal((A1),(A2))
#endif

#if ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COMPARE && !defined(ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_EQUAL)
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_EQUAL(A1,A2) err_map_int_v_callback_equal((A1),(A2))
#endif

#if ERR_ERRMAPINTVCALLBACKP_DEEP_COMPARE && !defined(ERR_ERRMAPINTVCALLBACKP_EQUAL)
#define ERR_ERRMAPINTVCALLBACKP_EQUAL(A1,A2) ((A1)->equal((A2)))
#endif

#if ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COMPARE && !defined(ERR_ERRMAPINTVCALLBACK_CONSTP_EQUAL)
#define ERR_ERRMAPINTVCALLBACK_CONSTP_EQUAL(A1,A2) ((A1)->equal((A2)))
#endif

#if ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COMPARE && !defined(ERR_CONST_ERRMAPINTVCALLBACKP_EQUAL)
#define ERR_CONST_ERRMAPINTVCALLBACKP_EQUAL(A1,A2) ((A1)->equal((A2)))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_P_EQUAL)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_P_EQUAL(A1,A2) err_map_int_v_callback_equal((A1),(A2))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COMPARE && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_EQUAL)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_EQUAL(A1,A2) err_map_int_v_callback_equal((A1),(A2))
#endif

#if ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COMPARE && !defined(ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_EQUAL)
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_EQUAL(A1,A2) err_map_int_v_callback_equal((A1),(A2))
#endif

#if ERR_ERRMAPINTVCALLBACK_P_DEEP_COMPARE && !defined(ERR_ERRMAPINTVCALLBACK_P_EQUAL)
#define ERR_ERRMAPINTVCALLBACK_P_EQUAL(A1,A2) ((A1)->equal((A2)))
#endif

#if ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COMPARE && !defined(ERR_ERRMAPINTVCALLBACK_CONST_P_EQUAL)
#define ERR_ERRMAPINTVCALLBACK_CONST_P_EQUAL(A1,A2) ((A1)->equal((A2)))
#endif

#if ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COMPARE && !defined(ERR_CONST_ERRMAPINTVCALLBACK_P_EQUAL)
#define ERR_CONST_ERRMAPINTVCALLBACK_P_EQUAL(A1,A2) ((A1)->equal((A2)))
#endif

#ifndef ERR_ERRMAPINTVCALLBACK_EQUAL
#define ERR_ERRMAPINTVCALLBACK_EQUAL(A1,A2) ((A1).equal((A2)))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_TP_ICOPY)
#define ERR_ERR_MAP_INT_V_CALLBACK_TP_ICOPY(A1,A2) err_map_int_v_callback_copy_err((A1),(A2))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_ICOPY)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_ICOPY(A1,A2) err_map_int_v_callback_copy_err((A1),(A2))
#endif

#if ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY && !defined(ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_ICOPY)
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_ICOPY(A1,A2) err_map_int_v_callback_copy_err((A1),(A2))
#endif

#if ERR_ERRMAPINTVCALLBACKP_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACKP_ICOPY)
#define ERR_ERRMAPINTVCALLBACKP_ICOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACK_CONSTP_ICOPY)
#define ERR_ERRMAPINTVCALLBACK_CONSTP_ICOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COPY && !defined(ERR_CONST_ERRMAPINTVCALLBACKP_ICOPY)
#define ERR_CONST_ERRMAPINTVCALLBACKP_ICOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_P_ICOPY)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_P_ICOPY(A1,A2) err_map_int_v_callback_copy_err((A1),(A2))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_ICOPY)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_ICOPY(A1,A2) err_map_int_v_callback_copy_err((A1),(A2))
#endif

#if ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY && !defined(ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_ICOPY)
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_ICOPY(A1,A2) err_map_int_v_callback_copy_err((A1),(A2))
#endif

#if ERR_ERRMAPINTVCALLBACK_P_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACK_P_ICOPY)
#define ERR_ERRMAPINTVCALLBACK_P_ICOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACK_CONST_P_ICOPY)
#define ERR_ERRMAPINTVCALLBACK_CONST_P_ICOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COPY && !defined(ERR_CONST_ERRMAPINTVCALLBACK_P_ICOPY)
#define ERR_CONST_ERRMAPINTVCALLBACK_P_ICOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_TP_OCOPY)
#define ERR_ERR_MAP_INT_V_CALLBACK_TP_OCOPY(A1,A2) err_map_int_v_callback_copy_err((A1),(A2))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_OCOPY)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_OCOPY(A1,A2) err_map_int_v_callback_copy_err((A1),(A2))
#endif

#if ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY && !defined(ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_OCOPY)
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_OCOPY(A1,A2) err_map_int_v_callback_copy_err((A1),(A2))
#endif

#if ERR_ERRMAPINTVCALLBACKP_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACKP_OCOPY)
#define ERR_ERRMAPINTVCALLBACKP_OCOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACK_CONSTP_OCOPY)
#define ERR_ERRMAPINTVCALLBACK_CONSTP_OCOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COPY && !defined(ERR_CONST_ERRMAPINTVCALLBACKP_OCOPY)
#define ERR_CONST_ERRMAPINTVCALLBACKP_OCOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_P_OCOPY)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_P_OCOPY(A1,A2) err_map_int_v_callback_copy_err((A1),(A2))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_OCOPY)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_OCOPY(A1,A2) err_map_int_v_callback_copy_err((A1),(A2))
#endif

#if ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY && !defined(ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_OCOPY)
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_OCOPY(A1,A2) err_map_int_v_callback_copy_err((A1),(A2))
#endif

#if ERR_ERRMAPINTVCALLBACK_P_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACK_P_OCOPY)
#define ERR_ERRMAPINTVCALLBACK_P_OCOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACK_CONST_P_OCOPY)
#define ERR_ERRMAPINTVCALLBACK_CONST_P_OCOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COPY && !defined(ERR_CONST_ERRMAPINTVCALLBACK_P_OCOPY)
#define ERR_CONST_ERRMAPINTVCALLBACK_P_OCOPY(A1,A2) ((A1)->copy_err((A2)))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_TP_IFREE)
#define ERR_ERR_MAP_INT_V_CALLBACK_TP_IFREE(A1) err_map_int_v_callback_delete((A1))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_IFREE)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_IFREE(A1) err_map_int_v_callback_delete((A1))
#endif

#if ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY && !defined(ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_IFREE)
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_IFREE(A1) err_map_int_v_callback_delete((A1))
#endif

#if ERR_ERRMAPINTVCALLBACKP_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACKP_IFREE)
#define ERR_ERRMAPINTVCALLBACKP_IFREE(A1) delete((A1))
#endif

#if ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACK_CONSTP_IFREE)
#define ERR_ERRMAPINTVCALLBACK_CONSTP_IFREE(A1) delete((A1))
#endif

#if ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COPY && !defined(ERR_CONST_ERRMAPINTVCALLBACKP_IFREE)
#define ERR_CONST_ERRMAPINTVCALLBACKP_IFREE(A1) delete((A1))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_P_IFREE)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_P_IFREE(A1) err_map_int_v_callback_delete((A1))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_IFREE)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_IFREE(A1) err_map_int_v_callback_delete((A1))
#endif

#if ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY && !defined(ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_IFREE)
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_IFREE(A1) err_map_int_v_callback_delete((A1))
#endif

#if ERR_ERRMAPINTVCALLBACK_P_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACK_P_IFREE)
#define ERR_ERRMAPINTVCALLBACK_P_IFREE(A1) delete((A1))
#endif

#if ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACK_CONST_P_IFREE)
#define ERR_ERRMAPINTVCALLBACK_CONST_P_IFREE(A1) delete((A1))
#endif

#if ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COPY && !defined(ERR_CONST_ERRMAPINTVCALLBACK_P_IFREE)
#define ERR_CONST_ERRMAPINTVCALLBACK_P_IFREE(A1) delete((A1))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_TP_OFREE)
#define ERR_ERR_MAP_INT_V_CALLBACK_TP_OFREE(A1) err_map_int_v_callback_delete((A1))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_OFREE)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONSTP_OFREE(A1) err_map_int_v_callback_delete((A1))
#endif

#if ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_DEEP_COPY && !defined(ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_OFREE)
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_TP_OFREE(A1) err_map_int_v_callback_delete((A1))
#endif

#if ERR_ERRMAPINTVCALLBACKP_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACKP_OFREE)
#define ERR_ERRMAPINTVCALLBACKP_OFREE(A1) delete((A1))
#endif

#if ERR_ERRMAPINTVCALLBACK_CONSTP_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACK_CONSTP_OFREE)
#define ERR_ERRMAPINTVCALLBACK_CONSTP_OFREE(A1) delete((A1))
#endif

#if ERR_CONST_ERRMAPINTVCALLBACKP_DEEP_COPY && !defined(ERR_CONST_ERRMAPINTVCALLBACKP_OFREE)
#define ERR_CONST_ERRMAPINTVCALLBACKP_OFREE(A1) delete((A1))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_P_OFREE)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_P_OFREE(A1) err_map_int_v_callback_delete((A1))
#endif

#if ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_DEEP_COPY && !defined(ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_OFREE)
#define ERR_ERR_MAP_INT_V_CALLBACK_T_CONST_P_OFREE(A1) err_map_int_v_callback_delete((A1))
#endif

#if ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_DEEP_COPY && !defined(ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_OFREE)
#define ERR_CONST_ERR_MAP_INT_V_CALLBACK_T_P_OFREE(A1) err_map_int_v_callback_delete((A1))
#endif

#if ERR_ERRMAPINTVCALLBACK_P_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACK_P_OFREE)
#define ERR_ERRMAPINTVCALLBACK_P_OFREE(A1) delete((A1))
#endif

#if ERR_ERRMAPINTVCALLBACK_CONST_P_DEEP_COPY && !defined(ERR_ERRMAPINTVCALLBACK_CONST_P_OFREE)
#define ERR_ERRMAPINTVCALLBACK_CONST_P_OFREE(A1) delete((A1))
#endif

#if ERR_CONST_ERRMAPINTVCALLBACK_P_DEEP_COPY && !defined(ERR_CONST_ERRMAPINTVCALLBACK_P_OFREE)
#define ERR_CONST_ERRMAPINTVCALLBACK_P_OFREE(A1) delete((A1))
#endif


#endif /* ERWIN_ERR_MAP_INT_CHAR_P_h */
