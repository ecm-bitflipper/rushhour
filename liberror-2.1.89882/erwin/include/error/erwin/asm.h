/* -*- Mode: C -*-
 *
 * Author: Henrik Theiling
 * Description:
 *     This file contains all the additional assembly parts.
 *     There should be a generic version of each part of assembly code written
 *     in C so that this is exchangable.
 *
 * @@Begin: Licencing and Copying@@
 *
 * Copyright (c) Henrik Theiling
 * Licence Version 2, Special Version for Erwin.
 *
 * The term 'this software' used in the following, additional to its
 * usual usage, also includes the instantiated source files generated by
 * tools of this package.
 *
 * This software is provided 'as-is', without warranty of any kind,
 * express or implied.  In no event will the authors or copyright holders
 * be held liable for any damages arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must
 * not claim that you wrote the original software. If you use this
 * software in a product, an acknowledgment in the product documentation
 * would be appreciated.
 *
 * 2. Altered source versions must be plainly marked as such, and must
 * not be misrepresented as being the original software.
 *
 * 3. You must not use any of the names of the authors or copyright
 * holders of the original software for advertising or publicity
 * pertaining to distribution without specific, written prior permission.
 *
 * 4. If you change this software and redistribute parts or all of it in
 * any form, you must make the source code of the altered version of this
 * software available.  As an exception, files that were generated by
 * tools of this package may be used freely, including modification.
 *
 * 5. This notice must not be removed or altered from any source
 * distribution.
 *
 * This licence is governed by the Laws of Germany.  Disputes shall be
 * settled by Saarbruecken City Court.
 *
 * @@End: Licencing and Copying@@
 *
 */

#ifdef ERWIN_DEBUG_INCLUDE
#warning "Including asm.h."
#endif

#ifndef ERR_ERWIN_ASM_H
#define ERR_ERWIN_ASM_H

#ifdef ERWIN_DEBUG_INCLUDE
#warning "First inclusion of asm.h."
#endif

#ifdef ERR_ERWIN_REQUIRE_DETERMINISM
#  ifndef ERR_SIZEOF_HASHVAL_T
#  define ERR_SIZEOF_HASHVAL_T 4
#  endif /* !defined ERR_SIZEOF_HASHVAL_T */
#endif

#if defined(ERR_SIZEOF_HASHVAL_T) && ERR_SIZEOF_HASHVAL_T == 8 && defined(ERWIN_U64)
/* User forces 64 bit hashval. */
/* Note: this is a new feature so the user can preselect a given size
 * of the hash values.  Since ERWIN_HASHVAL_64 does not have a Global
 * prefix, we cannot #define that macro in this case.  The new interface
 * is now to check the value of ERR_ERWIN_SIZEOF_HASHVAL_T. */

   /* User forces 64 bits, so ERWIN_U64 better be defined. */
   typedef ERWIN_U64                     err_hashval_t;
#  define ERR_HASHVAL_C(X)            ERWIN_U64_C(X)
#  ifndef err_hashval_t_TYPE_INFO
#  define err_hashval_t_TYPE_INFO    ERWIN_U64_TYPE_INFO
#  endif /* !defined err_hashval_t_TYPE_INFO */
#  ifndef ERR_ERR_HASHVAL_T_CMP
#  define ERR_ERR_HASHVAL_T_CMP   ERR_ERWIN_U64_CMP
#  endif /* !defined ERR_ERR_HASHVAL_T_CMP */
#  ifndef ERR_ERR_HASHVAL_T_HASH
#  define ERR_ERR_HASHVAL_T_HASH  ERR_ERWIN_U64_HASH
#  endif /* !defined ERR_ERR_HASHVAL_T_HASH */
#  define err_erwin_swap_hash         err_erwin_swap64
#  define err_hashval_t_hash          err_erwin_u64_hash

#elif defined(ERR_SIZEOF_HASHVAL_T) && ERR_SIZEOF_HASHVAL_T == 4
/* User forces 32 bit hashval. */

   typedef ERWIN_U32 err_hashval_t;
#  define ERR_HASHVAL_C(X)            X
#  ifndef err_hashval_t_TYPE_INFO
#  define err_hashval_t_TYPE_INFO    unsigned_TYPE_INFO
#  endif /* !defined err_hashval_t_TYPE_INFO */
#  ifndef ERR_ERR_HASHVAL_T_CMP
#  define ERR_ERR_HASHVAL_T_CMP   ERR_UNSIGNED_CMP
#  endif /* !defined ERR_ERR_HASHVAL_T_CMP */
#  ifndef ERR_ERR_HASHVAL_T_HASH
#  define ERR_ERR_HASHVAL_T_HASH  ERR_UNSIGNED_HASH
#  endif /* !defined ERR_ERR_HASHVAL_T_HASH */
#  define err_erwin_swap_hash         err_erwin_swap32
#  define err_hashval_t_hash          err_erwin_u32_hash

#elif defined(ERR_SIZEOF_HASHVAL_T)
#  error "The forced ERR_SIZEOF_HASHVAL_T cannot be used."
#elif SIZEOF_LONG >= 8

   typedef unsigned long err_hashval_t;
#  define ERWIN_HASHVAL_64               1 /*deprecated*/
#  define ERR_SIZEOF_HASHVAL_T        8
#  define ERR_HASHVAL_C(X)            ERWIN_UL(X)
#  ifndef err_hashval_t_TYPE_INFO
#  define err_hashval_t_TYPE_INFO    unsigned_long_TYPE_INFO
#  endif /* !defined err_hashval_t_TYPE_INFO */
#  ifndef ERR_ERR_HASHVAL_T_CMP
#  define ERR_ERR_HASHVAL_T_CMP   ERR_UNSIGNED_LONG_CMP
#  endif /* !defined ERR_ERR_HASHVAL_T_CMP */
#  ifndef ERR_ERR_HASHVAL_T_HASH
#  define ERR_ERR_HASHVAL_T_HASH  ERR_UNSIGNED_LONG_HASH
#  endif /* !defined ERR_ERR_HASHVAL_T_HASH */
#  define err_erwin_swap_hash         err_erwin_swap64
#  define err_hashval_t_hash          err_long_hash

#elif (SIZEOF_VOIDP == 8) && defined(ERWIN_U64)

   typedef ERWIN_U64                     err_hashval_t;
#  define ERWIN_HASHVAL_64               1 /*deprecated*/
#  define ERR_SIZEOF_HASHVAL_T        8
#  define ERR_HASHVAL_C(X)            ERWIN_U64_C(X)
#  ifndef err_hashval_t_TYPE_INFO
#  define err_hashval_t_TYPE_INFO    ERWIN_U64_TYPE_INFO
#  endif /* !defined err_hashval_t_TYPE_INFO */
#  ifndef ERR_ERR_HASHVAL_T_CMP
#  define ERR_ERR_HASHVAL_T_CMP   ERR_ERWIN_U64_CMP
#  endif /* !defined ERR_ERR_HASHVAL_T_CMP */
#  ifndef ERR_ERR_HASHVAL_T_HASH
#  define ERR_ERR_HASHVAL_T_HASH  ERR_ERWIN_U64_HASH
#  endif /* !defined ERR_ERR_HASHVAL_T_HASH */
#  define err_erwin_swap_hash         err_erwin_swap64
#  define err_hashval_t_hash          err_erwin_u64_hash

#else

   typedef ERWIN_U32 err_hashval_t;
#  define ERWIN_HASHVAL_64               0 /*deprecated*/
#  define ERR_SIZEOF_HASHVAL_T        4
#  define ERR_HASHVAL_C(X)            X
#  ifndef err_hashval_t_TYPE_INFO
#  define err_hashval_t_TYPE_INFO    unsigned_TYPE_INFO
#  endif /* !defined err_hashval_t_TYPE_INFO */
#  ifndef ERR_ERR_HASHVAL_T_CMP
#  define ERR_ERR_HASHVAL_T_CMP   ERR_UNSIGNED_CMP
#  endif /* !defined ERR_ERR_HASHVAL_T_CMP */
#  ifndef ERR_ERR_HASHVAL_T_HASH
#  define ERR_ERR_HASHVAL_T_HASH  ERR_UNSIGNED_HASH
#  endif /* !defined ERR_ERR_HASHVAL_T_HASH */
#  define err_erwin_swap_hash         err_erwin_swap32
#  define err_hashval_t_hash          err_erwin_u32_hash

#endif

#ifndef ERR_HASHVAL_CAST
#define ERR_HASHVAL_CAST(X) ((err_hashval_t)(unsigned long)(X))
#endif /* !defined ERR_HASHVAL_CAST */

/* Prototypes: */
ERWIN_WRAPPER err_hashval_t err_erwin_mulh (err_hashval_t, err_hashval_t)
    ATTR_CONST;

ERWIN_WRAPPER ERWIN_U32 err_erwin_mulh32 (ERWIN_U32, ERWIN_U32) ATTR_CONST;
#ifdef ERWIN_U64
ERWIN_WRAPPER ERWIN_U64 err_erwin_mulh64 (ERWIN_U64, ERWIN_U64) ATTR_CONST;
#endif


ERWIN_WRAPPER err_hashval_t err_erwin_golden_mul (err_hashval_t, err_hashval_t)
    ATTR_CONST;

ERWIN_WRAPPER ERWIN_U32 err_erwin_golden_mul32 (ERWIN_U32, ERWIN_U32) ATTR_CONST;
#ifdef ERWIN_U64
ERWIN_WRAPPER ERWIN_U64 err_erwin_golden_mul64 (ERWIN_U64, ERWIN_U64) ATTR_CONST;
#endif


ERWIN_WRAPPER int err_erwin_count_bits       (unsigned long) ATTR_CONST;
ERWIN_WRAPPER int err_erwin_count_bits_non0  (unsigned long) ATTR_CONST;
ERWIN_WRAPPER int err_erwin_trailing_0s      (unsigned long) ATTR_CONST;
ERWIN_WRAPPER int err_erwin_trailing_0s_non0 (unsigned long) ATTR_CONST;

ERWIN_WRAPPER int err_erwin_sign             (long) ATTR_CONST;
#ifdef ERWIN_S64
ERWIN_WRAPPER int err_erwin_sign64           (ERWIN_S64) ATTR_CONST;
#endif

ERWIN_WRAPPER int err_erwin_count_set_bits  (unsigned long) ATTR_CONST;

ERWIN_WRAPPER ERR_ERWIN_BOOL err_erwin_is_power2          (unsigned long) ATTR_CONST;
ERWIN_WRAPPER unsigned long     err_erwin_next_power2        (unsigned long) ATTR_CONST;
ERWIN_WRAPPER unsigned long     err_erwin_next_power2_minus1 (unsigned long) ATTR_CONST;
ERWIN_WRAPPER unsigned long     err_erwin_prev_power2        (unsigned long) ATTR_CONST;

ERWIN_WRAPPER ERWIN_U16 err_erwin_rol16   (ERWIN_U16, unsigned) ATTR_CONST;
ERWIN_WRAPPER ERWIN_U16 err_erwin_ror16   (ERWIN_U16, unsigned) ATTR_CONST;
ERWIN_WRAPPER ERWIN_U16 err_erwin_rol1_16 (ERWIN_U16)           ATTR_CONST;
ERWIN_WRAPPER ERWIN_U16 err_erwin_ror1_16 (ERWIN_U16)           ATTR_CONST;

ERWIN_WRAPPER ERWIN_U32 err_erwin_rol32   (ERWIN_U32, unsigned) ATTR_CONST;
ERWIN_WRAPPER ERWIN_U32 err_erwin_ror32   (ERWIN_U32, unsigned) ATTR_CONST;
ERWIN_WRAPPER ERWIN_U32 err_erwin_rol1_32 (ERWIN_U32)           ATTR_CONST;
ERWIN_WRAPPER ERWIN_U32 err_erwin_ror1_32 (ERWIN_U32)           ATTR_CONST;

#ifdef ERWIN_U64
ERWIN_WRAPPER ERWIN_U64 err_erwin_rol64   (ERWIN_U64, unsigned) ATTR_CONST;
ERWIN_WRAPPER ERWIN_U64 err_erwin_ror64   (ERWIN_U64, unsigned) ATTR_CONST;
ERWIN_WRAPPER ERWIN_U64 err_erwin_rol1_64 (ERWIN_U64)           ATTR_CONST;
ERWIN_WRAPPER ERWIN_U64 err_erwin_ror1_64 (ERWIN_U64)           ATTR_CONST;
#endif

ERWIN_WRAPPER err_hashval_t err_erwin_rol  (err_hashval_t, unsigned) ATTR_CONST;
ERWIN_WRAPPER err_hashval_t err_erwin_ror  (err_hashval_t, unsigned) ATTR_CONST;
ERWIN_WRAPPER err_hashval_t err_erwin_rol1 (err_hashval_t)           ATTR_CONST;
ERWIN_WRAPPER err_hashval_t err_erwin_ror1 (err_hashval_t)           ATTR_CONST;

ERWIN_WRAPPER ERWIN_U16 err_erwin_swap16    (ERWIN_U16 x) ATTR_CONST;
ERWIN_WRAPPER ERWIN_U32 err_erwin_swap32_16 (ERWIN_U32 x) ATTR_CONST;
ERWIN_WRAPPER ERWIN_U32 err_erwin_swap32    (ERWIN_U32 x) ATTR_CONST;

#ifdef ERWIN_U64
ERWIN_WRAPPER ERWIN_U64 err_erwin_swap64_32 (ERWIN_U64 x) ATTR_CONST;
ERWIN_WRAPPER ERWIN_U64 err_erwin_swap64_16 (ERWIN_U64 x) ATTR_CONST;
ERWIN_WRAPPER ERWIN_U64 err_erwin_swap64    (ERWIN_U64 x) ATTR_CONST;
#endif

ERWIN_WRAPPER err_hashval_t err_erwin_swap       (err_hashval_t x) ATTR_CONST;
ERWIN_WRAPPER err_hashval_t err_erwin_swap_low32 (err_hashval_t x) ATTR_CONST;

ERWIN_WRAPPER ERWIN_U32 err_erwin_bitswap32_8 (ERWIN_U32 x) ATTR_CONST;
ERWIN_WRAPPER ERWIN_U32 err_erwin_bitswap32   (ERWIN_U32 x) ATTR_CONST;

#ifdef ERWIN_U64
ERWIN_WRAPPER ERWIN_U64 err_erwin_bitswap64_8 (ERWIN_U64 x) ATTR_CONST;
ERWIN_WRAPPER ERWIN_U64 err_erwin_bitswap64   (ERWIN_U64 x) ATTR_CONST;
#endif

ERWIN_WRAPPER err_hashval_t err_erwin_bitswap_8 (err_hashval_t x) ATTR_CONST;
ERWIN_WRAPPER err_hashval_t err_erwin_bitswap   (err_hashval_t x) ATTR_CONST;

#ifdef err_erwin_mul_ok
#  ifdef __GNUC__
#    warning "Some older Erwin header was included before this.  Trying to fix."
#  endif
#  undef err_erwin_mul_ok
#endif
ERWIN_WRAPPER ERR_ERWIN_BOOL err_erwin_mul_ok    (size_t a, size_t b) ATTR_CONST;

#ifdef ERWIN_U64
ERWIN_WRAPPER ERR_ERWIN_BOOL err_erwin_umul64_ok (ERWIN_U64 a, ERWIN_U64 b) ATTR_CONST;
#endif

#ifdef ERWIN_S64
ERWIN_WRAPPER ERR_ERWIN_BOOL err_erwin_smul64_ok (ERWIN_S64 a, ERWIN_S64 b) ATTR_CONST;
#endif

/* Note: There is currently no 64-bit variant for 32-bit machines,
 *       so the slower generic code will be used. */
#if defined(ERWIN_GNUC_I386_ASM)
#  ifdef ERR_ERWIN_COMPILING
#    include "error/erwin/asm_i386.h"
#  else
#    include <error/erwin/asm_i386.h>
#  endif
#elif defined(ERWIN_GNUC_X86_64_ASM)
#  ifdef ERR_ERWIN_COMPILING
#    include "error/erwin/asm_8664.h"
#  else
#    include <error/erwin/asm_8664.h>
#  endif
#elif defined(ERWIN_GNUC_PPC_ASM)
#  ifdef ERR_ERWIN_COMPILING
#    include "error/erwin/asm_ppc.h"
#  else
#    include <error/erwin/asm_ppc.h>
#  endif
#elif defined(ERWIN_MSVC_I386_ASM)
#  ifdef ERR_ERWIN_COMPILING
#    include "error/erwin/asm_msvc.h"
#  else
#    include <error/erwin/asm_msvc.h>
#  endif
#endif


/* Define those generically that are not defined yet: */
#ifdef ERR_ERWIN_COMPILING
#  include "error/erwin/asm_gen.h"
#else
#  include <error/erwin/asm_gen.h>
#endif


#endif
