/* -*- Mode: C -*-
 * Author:Henrik Theiling
 * Description:
 *     Assembly routines for the i386:
 *
 * @@Begin: Licencing and Copying@@
 *
 * Copyright (c) Henrik Theiling
 * Licence Version 2, Special Version for Erwin.
 *
 * The term 'this software' used in the following, additional to its
 * usual usage, also includes the instantiated source files generated by
 * tools of this package.
 *
 * This software is provided 'as-is', without warranty of any kind,
 * express or implied.  In no event will the authors or copyright holders
 * be held liable for any damages arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must
 * not claim that you wrote the original software. If you use this
 * software in a product, an acknowledgment in the product documentation
 * would be appreciated.
 *
 * 2. Altered source versions must be plainly marked as such, and must
 * not be misrepresented as being the original software.
 *
 * 3. You must not use any of the names of the authors or copyright
 * holders of the original software for advertising or publicity
 * pertaining to distribution without specific, written prior permission.
 *
 * 4. If you change this software and redistribute parts or all of it in
 * any form, you must make the source code of the altered version of this
 * software available.  As an exception, files that were generated by
 * tools of this package may be used freely, including modification.
 *
 * 5. This notice must not be removed or altered from any source
 * distribution.
 *
 * This licence is governed by the Laws of Germany.  Disputes shall be
 * settled by Saarbruecken City Court.
 *
 * @@End: Licencing and Copying@@
 *
 */

#ifdef ERWIN_DEBUG_INCLUDE
#warning "Including asm_i386.h."
#endif

#ifndef ERR_ERWIN_ASM_I386_H
#define ERR_ERWIN_ASM_I386_H

#ifdef ERWIN_DEBUG_INCLUDE
#warning "First inclusion of asm_i386.h."
#endif

/* ********************************************************************** */
/* ********************************************************************** */
#if defined(ERWIN_GNUC_I386_ASM_NEW)
/* The new gcc does not like the old asm command. */
/* ********************************************************************** */
#define err_erwin_mulh32_defined 1

ERWIN_WRAPPER ERWIN_U32 err_erwin_mulh32 (ERWIN_U32 i, ERWIN_U32 mod)
{
    ERWIN_U32 __result;
    ERWIN_U32 long __muell;
    __asm__ (
       "mull  %3"
     : "=&d" (__result), "=a" (__muell)  /* outputs */
     : "a" (i), "rm" (mod)               /* inputs */
     : "cc");                            /* clobbered */
    return __result;
}

/* ********************************************************************** */
#define err_erwin_count_bits_defined 1

ERWIN_WRAPPER int err_erwin_count_bits (unsigned long x)
{
   long r;
   __asm__("bsrl   %1,%0\n"
         "\tjnz    1f\n"
         "\tmovl   $-1,%0\n"
           "1:"
      : "=&r" (r)
      : "rm" (x)
      : "cc");
   return r+1;
}

/* ********************************************************************** */
#define err_erwin_count_bits_non0_defined 1

/* Undefined for x=0: may return 0 or 1 */
ERWIN_WRAPPER int err_erwin_count_bits_non0 (unsigned long x)
{
   __asm__("bsrl %1,%0"
      : "=r" (x)
      : "rm" (x)
      : "cc");
   return x+1;
}

/* ********************************************************************** */
#define err_erwin_trailing_0s_defined 1

ERWIN_WRAPPER int err_erwin_trailing_0s (unsigned long x)
{
   long r;
   __asm__("bsfl   %1,%0\n"
         "\tjnz    1f\n"
         "\tmovl   $32,%0\n"
           "1:"
      : "=&r" (r)
      : "rm" (x)
      : "cc");
   return r;
}

/* ********************************************************************** */
#define err_erwin_trailing_0s_non0_defined 1

/* Undefined for x=0: may return 0 or 1 */
ERWIN_WRAPPER int err_erwin_trailing_0s_non0 (unsigned long x)
{
   __asm__("bsfl %1,%0"
      : "=r" (x)
      : "rm" (x)
      : "cc");
   return x;
}

/* ********************************************************************** */
#elif defined(ERWIN_GNUC_I386_ASM_OLD)
/* ********************************************************************** */
#define err_erwin_mulh32_defined 1

ERWIN_WRAPPER unsigned err_erwin_mulh32 (ERWIN_U32 i, ERWIN_U32 mod)
{
    err_hashval_t __result;
    __asm__ (
       /* "imull $2654435769,%%eax,%%eax\n\t" */
       "mull  %2"
     : "=d" (__result)          /* outputs */
     : "a" (i), "cbDS" (mod)    /* inputs */
     : "ax", "dx");             /* clobbered */
    return __result;
}

/* ********************************************************************** */
#endif /* GNUC_I386_ASM_OLD */
/* ********************************************************************** */

/* ********************************************************************** */
#define err_erwin_ror16_defined 1

ERWIN_WRAPPER ERWIN_U16 err_erwin_ror16 (ERWIN_U16 x, unsigned n)
{
   __asm__("rorw %b2,%0"
      : "=rm" (x)
      : "0"   (x), "cI" (n)
      : "cc");
   return x;
}

/* ********************************************************************** */
#define err_erwin_ror32_defined 1

ERWIN_WRAPPER ERWIN_U32 err_erwin_ror32 (ERWIN_U32 x, unsigned n)
{
   __asm__("rorl %b2,%0"
      : "=rm" (x)
      : "0"   (x), "cI" (n)
      : "cc");
   return x;
}

/* ********************************************************************** */
#define err_erwin_rol16_defined 1

ERWIN_WRAPPER ERWIN_U16 err_erwin_rol16 (ERWIN_U16 x, unsigned n)
{
   __asm__("rolw %b2,%0"
      : "=rm" (x)
      : "0"   (x), "cI" (n)
      : "cc");
   return x;
}

/* ********************************************************************** */
#define err_erwin_rol32_defined 1

ERWIN_WRAPPER ERWIN_U32 err_erwin_rol32 (ERWIN_U32 x, unsigned n)
{
   __asm__("roll %b2,%0"
      : "=rm" (x)
      : "0"   (x), "cI" (n)
      : "cc");
   return x;
}

/* ********************************************************************** */
#define err_erwin_swap32_defined 1

ERWIN_WRAPPER ERWIN_U32 err_erwin_swap32 (ERWIN_U32 x)
{
#if defined(__i586)
   /* 'bswap' is not available on old machines (or broken) */
   __asm__("bswapl %0"
      : "=r" (x)
      : "0"  (x)
      : "cc");
#else
# if 0
   /* dunno which one is better: */
   /* esi, edi, ebp, esp not possible, but xchgb instead of rolw $8: */
   __asm__("xchgb %w0,%h0\n"
         "\troll  $16,%0\n"
         "\txchgb %w0,%h0"
      : "=q" (x)
      : "0"  (x)
      : "cc");
# else
   /* more freedom of registe choice, but rolb $8 instead of xchgb. Is rolw $8 as fast as xchgb? */
   __asm__("rolw  $8,%w0\n"
         "\troll  $16,%0\n"
         "\trolw  $8,%w0"
      : "=r" (x)
      : "0"  (x)
      : "cc");
# endif
#endif
   return x;
}

/* ********************************************************************** */
/* swap64_32 is recognised by gcc and optimised well. no need for that.    */
/* swap64    is also quite good (uses swap32 and the recognised swap64_32) */

/* ********************************************************************** */
#ifdef ERWIN_U64
#define err_erwin_swap64_16_defined 1

ERWIN_WRAPPER ERWIN_U64 err_erwin_swap64_16 (ERWIN_U64 x)
{
   __asm__("roll  $16,%%eax\n"
         "\txchgl %%edx,%%eax\n"
         "\troll  $16,%%eax"
      : "=A" (x)
      : "0"  (x)
      : "cc");
   return x;
}
#endif

/* ********************************************************************** */

#endif
