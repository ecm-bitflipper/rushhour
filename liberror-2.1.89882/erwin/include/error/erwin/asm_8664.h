/* -*- Mode: C -*-
 * Author:Henrik Theiling
 * Description:
 *     Assembly routines for the i86-64:
 *
 * @@Begin: Licencing and Copying@@
 *
 * Copyright (c) Henrik Theiling
 * Licence Version 2, Special Version for Erwin.
 *
 * The term 'this software' used in the following, additional to its
 * usual usage, also includes the instantiated source files generated by
 * tools of this package.
 *
 * This software is provided 'as-is', without warranty of any kind,
 * express or implied.  In no event will the authors or copyright holders
 * be held liable for any damages arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must
 * not claim that you wrote the original software. If you use this
 * software in a product, an acknowledgment in the product documentation
 * would be appreciated.
 *
 * 2. Altered source versions must be plainly marked as such, and must
 * not be misrepresented as being the original software.
 *
 * 3. You must not use any of the names of the authors or copyright
 * holders of the original software for advertising or publicity
 * pertaining to distribution without specific, written prior permission.
 *
 * 4. If you change this software and redistribute parts or all of it in
 * any form, you must make the source code of the altered version of this
 * software available.  As an exception, files that were generated by
 * tools of this package may be used freely, including modification.
 *
 * 5. This notice must not be removed or altered from any source
 * distribution.
 *
 * This licence is governed by the Laws of Germany.  Disputes shall be
 * settled by Saarbruecken City Court.
 *
 * @@End: Licencing and Copying@@
 *
 */

#ifdef ERWIN_DEBUG_INCLUDE
#warning "Including asm_8664.h."
#endif

#ifndef ERR_ERWIN_ASM_8664_H
#define ERR_ERWIN_ASM_8664_H

#ifdef ERWIN_DEBUG_INCLUDE
#warning "First inclusion of asm_8664.h."
#endif

/* x86_64 gcc assembly
 * --------------------
 *
 * Operand modifiers in assembly string:
 *     %w0   :    eax/rax   >  ax
 *     %b0   :    eax/rax   >  al
 *     %h0   :    eax/rax   >  ah
 *     %k0   :    rax       >  eax
 *
 * Operands:
 *     abcd  :   ax,bx,cx,dx / eax,ebx,ecx,edx  / rax,rbx,...
 *     I     :   const 0..31
 *     J     :   const 0..63
 */

/* ********************************************************************** */
/* hash_into as 32 and 64 bit version */

#define err_erwin_mulh32_defined 1

/* 64 * 32 bit version (tested):
 * This is currently better than the full 64 bit version, since the hash
 * tables use int sizes anyway.  Only the hashval is 64 bits on this machine.
 */

ERWIN_WRAPPER ERWIN_U32 err_erwin_mulh32 (ERWIN_U32 i, ERWIN_U32 mod)
{
    ERWIN_U32 __result;
    ERWIN_U32 __muell;
    /* full 64 bit, working version: */
    __asm__ (
        "mull %3"
     : "=&d" (__result), "=a" (__muell) /* outputs */
     : "a" (i), "rm" (mod)              /* inputs */
     : "cc");                           /* clobbered */
    return __result;
}


#define err_erwin_mulh64_defined 1

ERWIN_WRAPPER ERWIN_U64 err_erwin_mulh64 (ERWIN_U64 i, ERWIN_U64 mod)
{
    ERWIN_U64 __result;
    ERWIN_U64 __muell;
    __asm__ (
       "mulq %3"
     : "=d" (__result), "=a" (__muell) /* outputs */
     : "a" (i), "rm" (mod)             /* inputs */
     : "cc");                          /* clobbered */
    return __result;
}

/* ********************************************************************** */
#define err_erwin_count_bits_defined 1

ERWIN_WRAPPER int err_erwin_count_bits (unsigned long x)
{
   long r;
   __asm__("bsrq   %1,%0\n"
         "\tjnz    1f\n"
         "\tmovq   $-1,%0\n"
           "1:"
      : "=&r" (r)
      : "rm" (x)
      : "cc");
   return r+1;
}

/* ********************************************************************** */
#define err_erwin_count_bits_non0_defined 1

ERWIN_WRAPPER int err_erwin_count_bits_non0 (unsigned long x)
{
   __asm__("bsrq %1,%0"
      : "=r" (x)
      : "rm" (x)
      : "cc");
   return x+1;
}

/* ********************************************************************** */
#define err_erwin_trailing_0s_defined 1

ERWIN_WRAPPER int err_erwin_trailing_0s (unsigned long x)
{
   long r;
   __asm__("bsfq   %1,%0\n"
         "\tjnz    1f\n"
         "\tmovq   $64,%0\n"
           "1:"
      : "=&r" (r)
      : "rm" (x)
      : "cc");
   return r;
}

/* ********************************************************************** */
#define err_erwin_trailing_0s_non0_defined 1

ERWIN_WRAPPER int err_erwin_trailing_0s_non0 (unsigned long x)
{
   __asm__("bsfq %1,%0"
      : "=r" (x)
      : "rm" (x)
      : "cc");
   return x;
}

/* ********************************************************************** */
#define err_erwin_ror16_defined 1

ERWIN_WRAPPER ERWIN_U16 err_erwin_ror16 (ERWIN_U16 x, unsigned n)
{
   __asm__("rorw %b2,%0"
      : "=rm" (x)
      : "0"   (x), "cJ" (n)
      : "cc");
   return x;
}

/* ********************************************************************** */
#define err_erwin_ror32_defined 1

ERWIN_WRAPPER ERWIN_U32 err_erwin_ror32 (ERWIN_U32 x, unsigned n)
{
   __asm__("rorl %b2,%0"
      : "=rm" (x)
      : "0"   (x), "cJ" (n)
      : "cc");
   return x;
}

/* ********************************************************************** */
#define err_erwin_rol16_defined 1

ERWIN_WRAPPER ERWIN_U16 err_erwin_rol16 (ERWIN_U16 x, unsigned n)
{
   __asm__("rolw %b2,%0"
      : "=rm" (x)
      : "0"   (x), "cJ" (n)
      : "cc");
   return x;
}

/* ********************************************************************** */
#define err_erwin_rol32_defined 1

ERWIN_WRAPPER ERWIN_U32 err_erwin_rol32 (ERWIN_U32 x, unsigned n)
{
   __asm__("roll %b2,%0"
      : "=rm" (x)
      : "0"   (x), "cJ" (n)
      : "cc");
   return x;
}

/* ********************************************************************** */
#define err_erwin_ror64_defined 1

ERWIN_WRAPPER ERWIN_U64 err_erwin_ror64 (ERWIN_U64 x, unsigned n)
{
   __asm__("rorq %b2,%0"
      : "=rm" (x)
      : "0"   (x), "cJ" (n)
      : "cc");
   return x;
}

/* ********************************************************************** */
#define err_erwin_rol64_defined 1

ERWIN_WRAPPER ERWIN_U64 err_erwin_rol64 (ERWIN_U64 x, unsigned n)
{
   __asm__("rolq %b2,%0"
      : "=rm" (x)
      : "0"   (x), "cJ" (n)
      : "cc");
   return x;
}

/* ********************************************************************** */
#define err_erwin_swap32_defined 1

ERWIN_WRAPPER ERWIN_U32 err_erwin_swap32 (ERWIN_U32 x)
{
   __asm__("bswapl %0"
      : "=r" (x)
      : "0"  (x)
      : "cc");
   return x;
}

/* ********************************************************************** */
#define err_erwin_swap32low_defined 1

ERWIN_WRAPPER ERWIN_U64 err_erwin_swap32low (ERWIN_U64 x) ATTR_CONST;
ERWIN_WRAPPER ERWIN_U64 err_erwin_swap32low (ERWIN_U64 x)
{
   __asm__("bswapl %k0"
      : "=r" (x)
      : "0"  (x)
      : "cc");
   return x;
}

/* ********************************************************************** */
#define err_erwin_swap64_defined 1

ERWIN_WRAPPER ERWIN_U64 err_erwin_swap64 (ERWIN_U64 x)
{
   __asm__("bswapq %0"
      : "=r" (x)
      : "0"  (x)
      : "cc");
   return x;
}

/* ********************************************************************** */
#endif /* ERR_ERWIN_ASM_8664_H */
