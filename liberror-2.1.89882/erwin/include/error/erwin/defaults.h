/* -*- Mode: C -*- */
/* Author: Henrik Theiling
 * Description:
 *       The Erwin library for standard data structures and algorithms.
 *
 *       This file is included by the implementation of the data
 *       structures to get default definitions of important macros
 *       if the user did not provide them.  For many standard types,
 *       it is obvious how they should be hashed and compared.  This
 *       is defined here.
 *
 *       DO NOT INCLUDE THIS FILE IN YOUR APPLICATION!  THAT WILL BREAK
 *       THE #INCLUSION ORDER.
 *
 * @@Begin: Licencing and Copying@@
 * 
 * Copyright (c) Henrik Theiling
 * Licence Version 2, Special Version for Erwin.
 * 
 * The term 'this software' used in the following, additional to its
 * usual usage, also includes the instantiated source files generated by
 * tools of this package.
 * 
 * This software is provided 'as-is', without warranty of any kind,
 * express or implied.  In no event will the authors or copyright holders
 * be held liable for any damages arising from the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 * 1. The origin of this software must not be misrepresented; you must
 * not claim that you wrote the original software. If you use this
 * software in a product, an acknowledgment in the product documentation
 * would be appreciated.
 * 
 * 2. Altered source versions must be plainly marked as such, and must
 * not be misrepresented as being the original software.
 * 
 * 3. You must not use any of the names of the authors or copyright
 * holders of the original software for advertising or publicity
 * pertaining to distribution without specific, written prior permission.
 * 
 * 4. If you change this software and redistribute parts or all of it in
 * any form, you must make the source code of the altered version of this
 * software available.  As an exception, files that were generated by
 * tools of this package may be used freely, including modification.
 * 
 * 5. This notice must not be removed or altered from any source
 * distribution.
 * 
 * This licence is governed by the Laws of Germany.  Disputes shall be
 * settled by Saarbruecken City Court.
 * 
 * @@End: Licencing and Copying@@
 *
 */

#ifdef ERWIN_DEBUG_INCLUDE
#warning "Including defaults.h."
#endif

#ifndef ERR_ERWIN_DEFAULTS_H
#define ERR_ERWIN_DEFAULTS_H

#ifdef ERWIN_DEBUG_INCLUDE
#warning "First inclusion of defaults.h."
#endif

/* Provide hash values and comparisons for simple types.
 * Please note that there are no defaults for char *, since
 * you have to choose whether it is case sensitive. */

#ifndef ERR_ERWIN_DEFAULT_CMP
#define ERR_ERWIN_DEFAULT_CMP(X,Y)     (((X) < (Y)) ? -1 : (((X) > (Y)) ? 1 : 0))
#endif /* !defined ERR_ERWIN_DEFAULT_CMP */
#ifndef ERR_ERWIN_DEFAULT_EQUAL
#define ERR_ERWIN_DEFAULT_EQUAL(X,Y)   ((X) == (Y))
#endif /* !defined ERR_ERWIN_DEFAULT_EQUAL */

#ifndef ERR_ERWIN_INT_SUBCMP
#define ERR_ERWIN_INT_SUBCMP(X,Y)      (((int)(X)) - ((int)(Y)))
#endif /* !defined ERR_ERWIN_INT_SUBCMP */
   /* Only works if sizeof(X) < sizeof(int)! */

#ifndef ERR_ERWIN_DEFAULT_HASH_RAW
#define ERR_ERWIN_DEFAULT_HASH_RAW(X)  ERR_HASHVAL_CAST(X)
#endif /* !defined ERR_ERWIN_DEFAULT_HASH_RAW */

/* compat: */
#ifndef ERR_ERWIN_DEFAULT_HASHVAL
#define ERR_ERWIN_DEFAULT_HASHVAL ERR_ERWIN_DEFAULT_HASH_RAW
#endif /* !defined ERR_ERWIN_DEFAULT_HASHVAL */


/* Lexical comparisons: */

#ifndef ERR_ERWIN_LEXICAL_CMP
#define ERR_ERWIN_LEXICAL_CMP(RESULT,T,X,Y,V) \
           ((((RESULT) = T##_CMP((X),(Y))) != 0) ? (RESULT) : (V))
#endif /* !defined ERR_ERWIN_LEXICAL_CMP */
  /* For comparisons of structs.
   * RESULT is a local variable that may be used for computations.
   *
   * It would be better to declare the variable in a macro, but this is not possible
   * in standard C.
   */


/* Unrolled for some depth.  These also all need a local variable `result'! */
#ifndef ERR_ERWIN_LEXICAL_CMP1
#define ERR_ERWIN_LEXICAL_CMP1(R,T1,X1,Y1)      \
            ERR_ERWIN_LEXICAL_CMP(R, T1,X1,Y1, 0)
#endif /* !defined ERR_ERWIN_LEXICAL_CMP1 */

#ifndef ERR_ERWIN_LEXICAL_CMP2
#define ERR_ERWIN_LEXICAL_CMP2(R, T1,X1,Y1, T2,X2,Y2) \
            ERR_ERWIN_LEXICAL_CMP(R, T1,X1,Y1,         \
                ERR_ERWIN_LEXICAL_CMP1(R, T2,X2,Y2))
#endif /* !defined ERR_ERWIN_LEXICAL_CMP2 */
   /* usage:
    * int something_compare (something const *a, something const *b)
    * {
    *     int result;
    *     return ERWIN_LEXICAL_CMP2 (result,
    *               STRING_CASE, a->name, b->name,
    *               INT,         a->age,  b->age);
    * }
    */

#ifndef ERR_ERWIN_LEXICAL_CMP3
#define ERR_ERWIN_LEXICAL_CMP3(R, T1,X1,Y1, T2,X2,Y2, T3,X3,Y3) \
            ERR_ERWIN_LEXICAL_CMP(R, T1, X1, Y1,                 \
                ERR_ERWIN_LEXICAL_CMP2(R, T2,X2,Y2, T3,X3,Y3))
#endif /* !defined ERR_ERWIN_LEXICAL_CMP3 */

#ifndef ERR_ERWIN_LEXICAL_CMP4
#define ERR_ERWIN_LEXICAL_CMP4(R, T1,X1,Y1, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4) \
            ERR_ERWIN_LEXICAL_CMP(R, T1, X1, Y1,                           \
                ERR_ERWIN_LEXICAL_CMP3(R, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4))
#endif /* !defined ERR_ERWIN_LEXICAL_CMP4 */

#ifndef ERR_ERWIN_LEXICAL_CMP5
#define ERR_ERWIN_LEXICAL_CMP5(R, T1,X1,Y1, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5) \
            ERR_ERWIN_LEXICAL_CMP(R, T1,X1,Y1,                                       \
                ERR_ERWIN_LEXICAL_CMP4(R, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5))
#endif /* !defined ERR_ERWIN_LEXICAL_CMP5 */

#ifndef ERR_ERWIN_LEXICAL_CMP6
#define ERR_ERWIN_LEXICAL_CMP6(R, T1,X1,Y1, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5, T6,X6,Y6) \
            ERR_ERWIN_LEXICAL_CMP(R, T1,X1,Y1,                                                 \
                ERR_ERWIN_LEXICAL_CMP5(R, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5,              \
                                             T6,X6,Y6))
#endif /* !defined ERR_ERWIN_LEXICAL_CMP6 */

#ifndef ERR_ERWIN_LEXICAL_CMP7
#define ERR_ERWIN_LEXICAL_CMP7(R, T1,X1,Y1, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5, \
                                     T6,X6,Y6, T7,X7,Y7)                                \
            ERR_ERWIN_LEXICAL_CMP(R, T1,X1, Y1,                                      \
                ERR_ERWIN_LEXICAL_CMP6(R, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5,    \
                                             T6,X6,Y6, T7,X7,Y7))
#endif /* !defined ERR_ERWIN_LEXICAL_CMP7 */

#ifndef ERR_ERWIN_LEXICAL_CMP8
#define ERR_ERWIN_LEXICAL_CMP8(R, T1,X1,Y1, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5, \
                                     T6,X6,Y6, T7,X7,Y7, T8,X8,Y8)                      \
            ERR_ERWIN_LEXICAL_CMP(R, T1, X1, Y1,                                     \
                ERR_ERWIN_LEXICAL_CMP7(R, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5,    \
                                             T6,X6,Y6, T7,X7,Y7, T8,X8,Y8))
#endif /* !defined ERR_ERWIN_LEXICAL_CMP8 */

#ifndef ERR_ERWIN_LEXICAL_CMP9
#define ERR_ERWIN_LEXICAL_CMP9(R, T1,X1,Y1, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5, \
                                     T6,X6,Y6, T7,X7,Y7, T8,X8,Y8, T9,X9,Y9)            \
            ERR_ERWIN_LEXICAL_CMP(R, T1, X1, Y1,                                     \
                ERR_ERWIN_LEXICAL_CMP8(R, T2,X2,Y2, T3,X3,Y3, T4,X4,Y4, T5,X5,Y5,    \
                                             T6,X6,Y6, T7,X7,Y7, T8,X8,Y8, T9,X9,Y9))
#endif /* !defined ERR_ERWIN_LEXICAL_CMP9 */

/* ********************************************************************** */

#ifndef ERR_ERWIN_LEXICAL_CMP_THIS
#define ERR_ERWIN_LEXICAL_CMP_THIS(R,O,T1,M1,V)           \
            ERR_ERWIN_LEXICAL_CMP(R, T1, M1, (O).M1, V)
#endif /* !defined ERR_ERWIN_LEXICAL_CMP_THIS */
  /* For comparisons of classes */

/* unrolled: */
#ifndef ERR_ERWIN_LEXICAL_CMP_THIS1
#define ERR_ERWIN_LEXICAL_CMP_THIS1(R,O,T1,M1)   \
            ERR_ERWIN_LEXICAL_CMP1(R, T1, M1, (O).M1)
#endif /* !defined ERR_ERWIN_LEXICAL_CMP_THIS1 */

#ifndef ERR_ERWIN_LEXICAL_CMP_THIS2
#define ERR_ERWIN_LEXICAL_CMP_THIS2(R,O,T1,M1,T2,M2) \
            ERR_ERWIN_LEXICAL_CMP2(R, T1,M1,(O).M1, T2,M2,(O).M2)
#endif /* !defined ERR_ERWIN_LEXICAL_CMP_THIS2 */

#ifndef ERR_ERWIN_LEXICAL_CMP_THIS3
#define ERR_ERWIN_LEXICAL_CMP_THIS3(R,O,T1,M1,T2,M2,T3,M3) \
            ERR_ERWIN_LEXICAL_CMP3(                         \
                R, T1,M1,(O).M1, T2,M2,(O).M2, T3,M3,(O).M3)
#endif /* !defined ERR_ERWIN_LEXICAL_CMP_THIS3 */

#ifndef ERR_ERWIN_LEXICAL_CMP_THIS4
#define ERR_ERWIN_LEXICAL_CMP_THIS4(R,O,T1,M1,T2,M2,T3,M3,T4,M4)       \
            ERR_ERWIN_LEXICAL_CMP4(                                     \
                R, T1,M1,(O).M1, T2,M2,(O).M2, T3,M3,(O).M3, T4,M4,(O).M4)
#endif /* !defined ERR_ERWIN_LEXICAL_CMP_THIS4 */

#ifndef ERR_ERWIN_LEXICAL_CMP_THIS5
#define ERR_ERWIN_LEXICAL_CMP_THIS5(R,O,T1,M1,T2,M2,T3,M3,T4,M4,T5,M5)               \
            ERR_ERWIN_LEXICAL_CMP5(                                                   \
                R, T1,M1,(O).M1, T2,M2,(O).M2, T3,M3,(O).M3, T4,M4,(O).M4, T5,M5,(O).M5)
#endif /* !defined ERR_ERWIN_LEXICAL_CMP_THIS5 */

#ifndef ERR_ERWIN_LEXICAL_CMP_THIS6
#define ERR_ERWIN_LEXICAL_CMP_THIS6(R,O,T1,M1,T2,M2,T3,M3,T4,M4,T5,M5,T6,M6)         \
            ERR_ERWIN_LEXICAL_CMP6(                                                   \
                R, T1,M1,(O).M1, T2,M2,(O).M2, T3,M3,(O).M3, T4,M4,(O).M4, T5,M5,(O).M5, \
                T6,M6,(O).M6)
#endif /* !defined ERR_ERWIN_LEXICAL_CMP_THIS6 */

#ifndef ERR_ERWIN_LEXICAL_CMP_THIS7
#define ERR_ERWIN_LEXICAL_CMP_THIS7(R,O,T1,M1,T2,M2,T3,M3,T4,M4,T5,M5,T6,M6,T7,M7)   \
            ERR_ERWIN_LEXICAL_CMP7(                                                   \
                R, T1,M1,(O).M1, T2,M2,(O).M2, T3,M3,(O).M3, T4,M4,(O).M4, T5,M5,(O).M5, \
                T6,M6,(O).M6, T7,M7,(O).M7)
#endif /* !defined ERR_ERWIN_LEXICAL_CMP_THIS7 */

#ifndef ERR_ERWIN_LEXICAL_CMP_THIS8
#define ERR_ERWIN_LEXICAL_CMP_THIS8(R,O,T1,M1,T2,M2,T3,M3,T4,M4,T5,M5,T6,M6,T7,M7,T8,M8) \
            ERR_ERWIN_LEXICAL_CMP8(                                                       \
                R, T1,M1,(O).M1, T2,M2,(O).M2, T3,M3,(O).M3, T4,M4,(O).M4, T5,M5,(O).M5,     \
                T6,M6,(O).M6, T7,M7,(O).M7, T8,M8,(O).M8)
#endif /* !defined ERR_ERWIN_LEXICAL_CMP_THIS8 */

#ifndef ERR_ERWIN_LEXICAL_CMP_THIS9
#define ERR_ERWIN_LEXICAL_CMP_THIS9(R,O,T1,M1,T2,M2,T3,M3,T4,M4,T5,M5,T6,M6,T7,M7,T8,M8,T9,M9) \
            ERR_ERWIN_LEXICAL_CMP9(                                                             \
                R, T1,M1,(O).M1, T2,M2,(O).M2, T3,M3,(O).M3, T4,M4,(O).M4, T5,M5,(O).M5,           \
                T6,M6,(O).M6, T7,M7,(O).M7, T8,M8,(O).M8, T9,M9,(O).M9)
#endif /* !defined ERR_ERWIN_LEXICAL_CMP_THIS9 */

/* ********************************************************************** */

#ifndef ERR_ERWIN_WRAP_NULL_CMP
#define ERR_ERWIN_WRAP_NULL_CMP(X,Y,V) \
          ((X) == NULL ? ((Y) == NULL ? 0 : -1) : ((Y) == NULL ? 1 : (V)))
#endif /* !defined ERR_ERWIN_WRAP_NULL_CMP */
  /* This checks X and Y to be non-zero before evaluating the real
   * comparison value V.  NULL pointers are assumed to be smaller than
   * anything else.
   *
   * This is the table of values:
   *      X         Y          result
   *      NULL      NULL       0
   *      NULL      non-NULL   -1
   *      non-NULL  NULL       +1
   *      non-NULL  non-NULL   V
   */

/* EQUAL */
/* _EQUAL: mostly redundant, but:
 * The definitions of EQUAL are for compilers that do not understand and optimise
 * CMP(X,Y) == 0, and for unsigned types that generate a warning when compared
 * with 0 (since x < 0 is  always false).
 *
 * If _CMP is defined but not _EQUAL, we must use _CMP instead.
 *
 * Unfortunately, this is now very long. :-(
 */

#ifndef ERR_ERWIN_POINTER_EQUAL
#define ERR_ERWIN_POINTER_EQUAL(X,Y)            ERR_ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined ERR_ERWIN_POINTER_EQUAL */

#ifdef ERR_ERWIN_INT_CMP
#ifndef ERR_ERWIN_INT_EQUAL
#define ERR_ERWIN_INT_EQUAL(X,Y)                (ERR_ERWIN_INT_CMP(X,Y) == 0)
#endif /* !defined ERR_ERWIN_INT_EQUAL */
#endif /* defined ERR_ERWIN_INT_CMP */
#ifndef ERR_ERWIN_INT_EQUAL
#define ERR_ERWIN_INT_EQUAL(X,Y)                ERR_ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined ERR_ERWIN_INT_EQUAL */

#ifdef ERR_BOOL_CMP
#ifndef ERR_BOOL_EQUAL
#define ERR_BOOL_EQUAL(X,Y)                     (ERR_BOOL_CMP(X,Y) == 0)
#endif /* !defined ERR_BOOL_EQUAL */
#endif /* defined ERR_BOOL_CMP */
#ifndef ERR_BOOL_EQUAL
#define ERR_BOOL_EQUAL(X,Y)                     ERR_ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined ERR_BOOL_EQUAL */

/* This type used to be called ERR_ERWIN_BOOL.  Now it is ERWIN_BOOL. */
#ifdef ERR_ERR_ERWIN_BOOL_CMP
#ifndef ERR_ERR_ERWIN_BOOL_EQUAL
#define ERR_ERR_ERWIN_BOOL_EQUAL(X,Y)        (ERR_ERR_ERWIN_BOOL_CMP(X,Y) == 0)
#endif /* !defined ERR_ERR_ERWIN_BOOL_EQUAL */
#endif /* defined ERR_ERR_ERWIN_BOOL_CMP */
#ifndef ERR_ERR_ERWIN_BOOL_EQUAL
#define ERR_ERR_ERWIN_BOOL_EQUAL             ERR_BOOL_EQUAL
#endif /* !defined ERR_ERR_ERWIN_BOOL_EQUAL */

#ifdef ERR_ERWIN_BOOL_CMP
#ifndef ERR_ERWIN_BOOL_EQUAL
#define ERR_ERWIN_BOOL_EQUAL(X,Y)               (ERR_ERWIN_BOOL_CMP(X,Y) == 0)
#endif /* !defined ERR_ERWIN_BOOL_EQUAL */
#endif /* defined ERR_ERWIN_BOOL_CMP */
#ifndef ERR_ERWIN_BOOL_EQUAL
#define ERR_ERWIN_BOOL_EQUAL                    ERR_BOOL_EQUAL
#endif /* !defined ERR_ERWIN_BOOL_EQUAL */

#ifdef ERR_CHAR_CMP
#ifndef ERR_CHAR_EQUAL
#define ERR_CHAR_EQUAL(X,Y)                     (ERR_CHAR_CMP(X,Y) == 0)
#endif /* !defined ERR_CHAR_EQUAL */
#endif /* defined ERR_CHAR_CMP */
#ifndef ERR_CHAR_EQUAL
#define ERR_CHAR_EQUAL(X,Y)                     ERR_ERWIN_INT_EQUAL(X,Y)
#endif /* !defined ERR_CHAR_EQUAL */

#ifdef ERR_UNSIGNED_CHAR_CMP
#ifndef ERR_UNSIGNED_CHAR_EQUAL
#define ERR_UNSIGNED_CHAR_EQUAL(X,Y)            (ERR_UNSIGNED_CHAR_CMP(X,Y) == 0)
#endif /* !defined ERR_UNSIGNED_CHAR_EQUAL */
#endif /* defined ERR_UNSIGNED_CHAR_CMP */
#ifndef ERR_UNSIGNED_CHAR_EQUAL
#define ERR_UNSIGNED_CHAR_EQUAL                 ERR_CHAR_EQUAL
#endif /* !defined ERR_UNSIGNED_CHAR_EQUAL */

#ifdef ERR_SIGNED_CHAR_CMP
#ifndef ERR_SIGNED_CHAR_EQUAL
#define ERR_SIGNED_CHAR_EQUAL(X,Y)              (ERR_SIGNED_CHAR_CMP(X,Y) == 0)
#endif /* !defined ERR_SIGNED_CHAR_EQUAL */
#endif /* defined ERR_SIGNED_CHAR_CMP */
#ifndef ERR_SIGNED_CHAR_EQUAL
#define ERR_SIGNED_CHAR_EQUAL                   ERR_CHAR_EQUAL
#endif /* !defined ERR_SIGNED_CHAR_EQUAL */

#ifdef ERR_CHAR_CASE_CMP
#ifndef ERR_CHAR_CASE_EQUAL
#define ERR_CHAR_CASE_EQUAL(X,Y)                (ERR_CHAR_CASE_CMP(X,Y) == 0)
#endif /* !defined ERR_CHAR_CASE_EQUAL */
#endif /* defined ERR_CHAR_CASE_CMP */
#ifndef ERR_CHAR_CASE_EQUAL
#define ERR_CHAR_CASE_EQUAL(X,Y)  \
                    ERR_CHAR_EQUAL(err_char_to_lower(X),err_char_to_lower(Y))
#endif /* !defined ERR_CHAR_CASE_EQUAL */

#ifdef ERR_UNSIGNED_CHAR_CASE_CMP
#ifndef ERR_UNSIGNED_CHAR_CASE_EQUAL
#define ERR_UNSIGNED_CHAR_CASE_EQUAL(X,Y)       (ERR_UNSIGNED_CHAR_CASE_CMP(X,Y) == 0)
#endif /* !defined ERR_UNSIGNED_CHAR_CASE_EQUAL */
#endif /* defined ERR_UNSIGNED_CHAR_CASE_CMP */
#ifndef ERR_UNSIGNED_CHAR_CASE_EQUAL
#define ERR_UNSIGNED_CHAR_CASE_EQUAL            ERR_CHAR_CASE_EQUAL
#endif /* !defined ERR_UNSIGNED_CHAR_CASE_EQUAL */

#ifdef ERR_SIGNED_CHAR_CASE_CMP
#ifndef ERR_SIGNED_CHAR_CASE_EQUAL
#define ERR_SIGNED_CHAR_CASE_EQUAL(X,Y)         (ERR_SIGNED_CHAR_CASE_CMP(X,Y) == 0)
#endif /* !defined ERR_SIGNED_CHAR_CASE_EQUAL */
#endif /* defined ERR_SIGNED_CHAR_CASE_CMP */
#ifndef ERR_SIGNED_CHAR_CASE_EQUAL
#define ERR_SIGNED_CHAR_CASE_EQUAL              ERR_CHAR_CASE_EQUAL
#endif /* !defined ERR_SIGNED_CHAR_CASE_EQUAL */

#ifdef ERR_SHORT_CMP
#ifndef ERR_SHORT_EQUAL
#define ERR_SHORT_EQUAL(X,Y)                    (ERR_SHORT_CMP(X,Y) == 0)
#endif /* !defined ERR_SHORT_EQUAL */
#endif /* defined ERR_SHORT_CMP */
#ifndef ERR_SHORT_EQUAL
#define ERR_SHORT_EQUAL(X,Y)                    ERR_ERWIN_INT_EQUAL(X,Y)
#endif /* !defined ERR_SHORT_EQUAL */

#ifdef ERR_SHORT_INT_CMP
#ifndef ERR_SHORT_INT_EQUAL
#define ERR_SHORT_INT_EQUAL(X,Y)                (ERR_SHORT_INT_CMP(X,Y) == 0)
#endif /* !defined ERR_SHORT_INT_EQUAL */
#endif /* defined ERR_SHORT_INT_CMP */
#ifndef ERR_SHORT_INT_EQUAL
#define ERR_SHORT_INT_EQUAL                     ERR_SHORT_EQUAL
#endif /* !defined ERR_SHORT_INT_EQUAL */

#ifdef ERR_UNSIGNED_SHORT_CMP
#ifndef ERR_UNSIGNED_SHORT_EQUAL
#define ERR_UNSIGNED_SHORT_EQUAL(X,Y)           (ERR_UNSIGNED_SHORT_CMP(X,Y) == 0)
#endif /* !defined ERR_UNSIGNED_SHORT_EQUAL */
#endif /* defined ERR_UNSIGNED_SHORT_CMP */
#ifndef ERR_UNSIGNED_SHORT_EQUAL
#define ERR_UNSIGNED_SHORT_EQUAL                ERR_SHORT_EQUAL
#endif /* !defined ERR_UNSIGNED_SHORT_EQUAL */

#ifdef ERR_UNSIGNED_SHORT_INT_CMP
#ifndef ERR_UNSIGNED_SHORT_INT_EQUAL
#define ERR_UNSIGNED_SHORT_INT_EQUAL(X,Y)       (ERR_UNSIGNED_SHORT_INT_CMP(X,Y) == 0)
#endif /* !defined ERR_UNSIGNED_SHORT_INT_EQUAL */
#endif /* defined ERR_UNSIGNED_SHORT_INT_CMP */
#ifndef ERR_UNSIGNED_SHORT_INT_EQUAL
#define ERR_UNSIGNED_SHORT_INT_EQUAL            ERR_SHORT_EQUAL
#endif /* !defined ERR_UNSIGNED_SHORT_INT_EQUAL */

#ifdef ERR_INT_CMP
#ifndef ERR_INT_EQUAL
#define ERR_INT_EQUAL(X,Y)                      (ERR_INT_CMP(X,Y) == 0)
#endif /* !defined ERR_INT_EQUAL */
#endif /* defined ERR_INT_CMP */
#ifndef ERR_INT_EQUAL
#define ERR_INT_EQUAL(X,Y)                      ERR_ERWIN_INT_EQUAL(X,Y)
#endif /* !defined ERR_INT_EQUAL */

#ifdef ERR_UNSIGNED_CMP
#ifndef ERR_UNSIGNED_EQUAL
#define ERR_UNSIGNED_EQUAL(X,Y)                 (ERR_UNSIGNED_CMP(X,Y) == 0)
#endif /* !defined ERR_UNSIGNED_EQUAL */
#endif /* defined ERR_UNSIGNED_CMP */
#ifndef ERR_UNSIGNED_EQUAL
#define ERR_UNSIGNED_EQUAL                      ERR_INT_EQUAL
#endif /* !defined ERR_UNSIGNED_EQUAL */

#ifdef ERR_UNSIGNED_INT_CMP
#ifndef ERR_UNSIGNED_INT_EQUAL
#define ERR_UNSIGNED_INT_EQUAL(X,Y)             (ERR_UNSIGNED_INT_CMP(X,Y) == 0)
#endif /* !defined ERR_UNSIGNED_INT_EQUAL */
#endif /* defined ERR_UNSIGNED_INT_CMP */
#ifndef ERR_UNSIGNED_INT_EQUAL
#define ERR_UNSIGNED_INT_EQUAL                  ERR_INT_EQUAL
#endif /* !defined ERR_UNSIGNED_INT_EQUAL */

#ifdef ERR_LONG_CMP
#ifndef ERR_LONG_EQUAL
#define ERR_LONG_EQUAL(X,Y)                     (ERR_LONG_CMP(X,Y) == 0)
#endif /* !defined ERR_LONG_EQUAL */
#endif /* defined ERR_LONG_CMP */
#ifndef ERR_LONG_EQUAL
#define ERR_LONG_EQUAL(X,Y)                     ERR_ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined ERR_LONG_EQUAL */

#ifdef ERR_LONG_INT_CMP
#ifndef ERR_LONG_INT_EQUAL
#define ERR_LONG_INT_EQUAL(X,Y)                 (ERR_LONG_INT_CMP(X,Y) == 0)
#endif /* !defined ERR_LONG_INT_EQUAL */
#endif /* defined ERR_LONG_INT_CMP */
#ifndef ERR_LONG_INT_EQUAL
#define ERR_LONG_INT_EQUAL                      ERR_LONG_EQUAL
#endif /* !defined ERR_LONG_INT_EQUAL */

#ifdef ERR_UNSIGNED_LONG_CMP
#ifndef ERR_UNSIGNED_LONG_EQUAL
#define ERR_UNSIGNED_LONG_EQUAL(X,Y)            (ERR_UNSIGNED_LONG_CMP(X,Y) == 0)
#endif /* !defined ERR_UNSIGNED_LONG_EQUAL */
#endif /* defined ERR_UNSIGNED_LONG_CMP */
#ifndef ERR_UNSIGNED_LONG_EQUAL
#define ERR_UNSIGNED_LONG_EQUAL                 ERR_LONG_EQUAL
#endif /* !defined ERR_UNSIGNED_LONG_EQUAL */

#ifdef ERR_UNSIGNED_LONG_INT_CMP
#ifndef ERR_UNSIGNED_LONG_INT_EQUAL
#define ERR_UNSIGNED_LONG_INT_EQUAL(X,Y)        (ERR_UNSIGNED_LONG_INT_CMP(X,Y) == 0)
#endif /* !defined ERR_UNSIGNED_LONG_INT_EQUAL */
#endif /* defined ERR_UNSIGNED_LONG_INT_CMP */
#ifndef ERR_UNSIGNED_LONG_INT_EQUAL
#define ERR_UNSIGNED_LONG_INT_EQUAL             ERR_LONG_EQUAL
#endif /* !defined ERR_UNSIGNED_LONG_INT_EQUAL */

#ifdef ERR_ERWIN_LONG_LONG_CMP
#ifndef ERR_ERWIN_LONG_LONG_EQUAL
#define ERR_ERWIN_LONG_LONG_EQUAL(X,Y)          (ERR_ERWIN_LONG_LONG_CMP(X,Y) == 0)
#endif /* !defined ERR_ERWIN_LONG_LONG_EQUAL */
#endif /* defined ERR_ERWIN_LONG_LONG_CMP */
#ifndef ERR_ERWIN_LONG_LONG_EQUAL
#define ERR_ERWIN_LONG_LONG_EQUAL(X,Y)          ERR_ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined ERR_ERWIN_LONG_LONG_EQUAL */

#ifdef ERR_ERWIN_UNSIGNED_LONG_LONG_CMP
#ifndef ERR_ERWIN_UNSIGNED_LONG_LONG_EQUAL
#define ERR_ERWIN_UNSIGNED_LONG_LONG_EQUAL(X,Y) (ERR_ERWIN_UNSIGNED_LONG_LONG_CMP(X,Y)==0)
#endif /* !defined ERR_ERWIN_UNSIGNED_LONG_LONG_EQUAL */
#endif /* defined ERR_ERWIN_UNSIGNED_LONG_LONG_CMP */
#ifndef ERR_ERWIN_UNSIGNED_LONG_LONG_EQUAL
#define ERR_ERWIN_UNSIGNED_LONG_LONG_EQUAL      ERR_ERWIN_LONG_LONG_EQUAL
#endif /* !defined ERR_ERWIN_UNSIGNED_LONG_LONG_EQUAL */

#ifdef ERR_ERWIN_U8_CMP
#ifndef ERR_ERWIN_U8_EQUAL
#define ERR_ERWIN_U8_EQUAL(X,Y)                 (ERR_ERWIN_U8_CMP(X,Y) == 0)
#endif /* !defined ERR_ERWIN_U8_EQUAL */
#endif /* defined ERR_ERWIN_U8_CMP */
#ifndef ERR_ERWIN_U8_EQUAL
#define ERR_ERWIN_U8_EQUAL                      ERR_ERWIN_DEFAULT_EQUAL
#endif /* !defined ERR_ERWIN_U8_EQUAL */

#ifdef ERR_ERWIN_U16_CMP
#ifndef ERR_ERWIN_U16_EQUAL
#define ERR_ERWIN_U16_EQUAL(X,Y)                (ERR_ERWIN_U16_CMP(X,Y) == 0)
#endif /* !defined ERR_ERWIN_U16_EQUAL */
#endif /* defined ERR_ERWIN_U16_CMP */
#ifndef ERR_ERWIN_U16_EQUAL
#define ERR_ERWIN_U16_EQUAL                     ERR_ERWIN_DEFAULT_EQUAL
#endif /* !defined ERR_ERWIN_U16_EQUAL */

#ifdef ERR_ERWIN_U32_CMP
#ifndef ERR_ERWIN_U32_EQUAL
#define ERR_ERWIN_U32_EQUAL(X,Y)                (ERR_ERWIN_U32_CMP(X,Y) == 0)
#endif /* !defined ERR_ERWIN_U32_EQUAL */
#endif /* defined ERR_ERWIN_U32_CMP */
#ifndef ERR_ERWIN_U32_EQUAL
#define ERR_ERWIN_U32_EQUAL                     ERR_ERWIN_DEFAULT_EQUAL
#endif /* !defined ERR_ERWIN_U32_EQUAL */

#ifdef ERR_ERWIN_U64_CMP
#ifndef ERR_ERWIN_U64_EQUAL
#define ERR_ERWIN_U64_EQUAL(X,Y)                (ERR_ERWIN_U64_CMP(X,Y) == 0)
#endif /* !defined ERR_ERWIN_U64_EQUAL */
#endif /* defined ERR_ERWIN_U64_CMP */
#ifndef ERR_ERWIN_U64_EQUAL
#define ERR_ERWIN_U64_EQUAL                     ERR_ERWIN_DEFAULT_EQUAL
#endif /* !defined ERR_ERWIN_U64_EQUAL */

#ifdef ERR_ERWIN_S8_CMP
#ifndef ERR_ERWIN_S8_EQUAL
#define ERR_ERWIN_S8_EQUAL(X,Y)                 (ERR_ERWIN_S8_CMP(X,Y) == 0)
#endif /* !defined ERR_ERWIN_S8_EQUAL */
#endif /* defined ERR_ERWIN_S8_CMP */
#ifndef ERR_ERWIN_S8_EQUAL
#define ERR_ERWIN_S8_EQUAL                      ERR_ERWIN_DEFAULT_EQUAL
#endif /* !defined ERR_ERWIN_S8_EQUAL */

#ifdef ERR_ERWIN_S16_CMP
#ifndef ERR_ERWIN_S16_EQUAL
#define ERR_ERWIN_S16_EQUAL(X,Y)                (ERR_ERWIN_S16_CMP(X,Y) == 0)
#endif /* !defined ERR_ERWIN_S16_EQUAL */
#endif /* defined ERR_ERWIN_S16_CMP */
#ifndef ERR_ERWIN_S16_EQUAL
#define ERR_ERWIN_S16_EQUAL                     ERR_ERWIN_DEFAULT_EQUAL
#endif /* !defined ERR_ERWIN_S16_EQUAL */

#ifdef ERR_ERWIN_S32_CMP
#ifndef ERR_ERWIN_S32_EQUAL
#define ERR_ERWIN_S32_EQUAL(X,Y)                (ERR_ERWIN_S32_CMP(X,Y) == 0)
#endif /* !defined ERR_ERWIN_S32_EQUAL */
#endif /* defined ERR_ERWIN_S32_CMP */
#ifndef ERR_ERWIN_S32_EQUAL
#define ERR_ERWIN_S32_EQUAL                     ERR_ERWIN_DEFAULT_EQUAL
#endif /* !defined ERR_ERWIN_S32_EQUAL */

#ifdef ERR_ERWIN_S64_CMP
#ifndef ERR_ERWIN_S64_EQUAL
#define ERR_ERWIN_S64_EQUAL(X,Y)                (ERR_ERWIN_S64_CMP(X,Y) == 0)
#endif /* !defined ERR_ERWIN_S64_EQUAL */
#endif /* defined ERR_ERWIN_S64_CMP */
#ifndef ERR_ERWIN_S64_EQUAL
#define ERR_ERWIN_S64_EQUAL                     ERR_ERWIN_DEFAULT_EQUAL
#endif /* !defined ERR_ERWIN_S64_EQUAL */

#ifdef ERR_FLOAT_CMP
#ifndef ERR_FLOAT_EQUAL
#define ERR_FLOAT_EQUAL(X,Y)                    (ERR_FLOAT_CMP(X,Y) == 0)
#endif /* !defined ERR_FLOAT_EQUAL */
#endif /* defined ERR_FLOAT_CMP */
#ifndef ERR_FLOAT_EQUAL
#define ERR_FLOAT_EQUAL(X,Y)                    ERR_ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined ERR_FLOAT_EQUAL */

#ifdef ERR_DOUBLE_CMP
#ifndef ERR_DOUBLE_EQUAL
#define ERR_DOUBLE_EQUAL(X,Y)                   (ERR_DOUBLE_CMP(X,Y) == 0)
#endif /* !defined ERR_DOUBLE_EQUAL */
#endif /* defined ERR_DOUBLE_CMP */
#ifndef ERR_DOUBLE_EQUAL
#define ERR_DOUBLE_EQUAL(X,Y)                   ERR_ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined ERR_DOUBLE_EQUAL */

#ifdef ERR_LONG_DOUBLE_CMP
#ifndef ERR_LONG_DOUBLE_EQUAL
#define ERR_LONG_DOUBLE_EQUAL(X,Y)              (ERR_LONG_DOUBLE_CMP(X,Y) == 0)
#endif /* !defined ERR_LONG_DOUBLE_EQUAL */
#endif /* defined ERR_LONG_DOUBLE_CMP */
#ifndef ERR_LONG_DOUBLE_EQUAL
#define ERR_LONG_DOUBLE_EQUAL(X,Y)              ERR_ERWIN_DEFAULT_EQUAL(X,Y)
#endif /* !defined ERR_LONG_DOUBLE_EQUAL */

/* equal for void*: */
#ifdef ERR_VOIDP_CMP
#ifndef ERR_VOIDP_EQUAL
#define ERR_VOIDP_EQUAL(X,Y)                    (ERR_VOIDP_CMP(X,Y) == 0)
#endif /* !defined ERR_VOIDP_EQUAL */
#endif /* defined ERR_VOIDP_CMP */
#ifndef ERR_VOIDP_EQUAL
#define ERR_VOIDP_EQUAL(X,Y)                    ERR_ERWIN_POINTER_EQUAL(X,Y)
#endif /* !defined ERR_VOIDP_EQUAL */

#ifdef ERR_VOID_P_CMP
#ifndef ERR_VOID_P_EQUAL
#define ERR_VOID_P_EQUAL(X,Y)                   (ERR_VOID_P_CMP(X,Y) == 0)
#endif /* !defined ERR_VOID_P_EQUAL */
#endif /* defined ERR_VOID_P_CMP */
#ifndef ERR_VOID_P_EQUAL
#define ERR_VOID_P_EQUAL                        ERR_VOIDP_EQUAL
#endif /* !defined ERR_VOID_P_EQUAL */

#ifdef ERR_CONST_VOIDP_CMP
#ifndef ERR_CONST_VOIDP_EQUAL
#define ERR_CONST_VOIDP_EQUAL(X,Y)              (ERR_CONST_VOIDP_CMP(X,Y) == 0)
#endif /* !defined ERR_CONST_VOIDP_EQUAL */
#endif /* defined ERR_CONST_VOIDP_CMP */
#ifndef ERR_CONST_VOIDP_EQUAL
#define ERR_CONST_VOIDP_EQUAL                   ERR_VOIDP_EQUAL
#endif /* !defined ERR_CONST_VOIDP_EQUAL */

#ifdef ERR_CONST_VOID_P_CMP
#ifndef ERR_CONST_VOID_P_EQUAL
#define ERR_CONST_VOID_P_EQUAL(X,Y)             (ERR_CONST_VOID_P_CMP(X,Y) == 0)
#endif /* !defined ERR_CONST_VOID_P_EQUAL */
#endif /* defined ERR_CONST_VOID_P_CMP */
#ifndef ERR_CONST_VOID_P_EQUAL
#define ERR_CONST_VOID_P_EQUAL                  ERR_VOIDP_EQUAL
#endif /* !defined ERR_CONST_VOID_P_EQUAL */

#ifdef ERR_VOIDP_CONST_CMP
#ifndef ERR_VOIDP_CONST_EQUAL
#define ERR_VOIDP_CONST_EQUAL(X,Y)              (ERR_VOIDP_CONST_CMP(X,Y) == 0)
#endif /* !defined ERR_VOIDP_CONST_EQUAL */
#endif /* defined ERR_VOIDP_CONST_CMP */
#ifndef ERR_VOIDP_CONST_EQUAL
#define ERR_VOIDP_CONST_EQUAL                   ERR_VOIDP_EQUAL
#endif /* !defined ERR_VOIDP_CONST_EQUAL */

#ifdef ERR_VOID_CONST_P_CMP
#ifndef ERR_VOID_CONST_P_EQUAL
#define ERR_VOID_CONST_P_EQUAL(X,Y)             (ERR_VOID_CONST_P_CMP(X,Y) == 0)
#endif /* !defined ERR_VOID_CONST_P_EQUAL */
#endif /* defined ERR_VOID_CONST_P_CMP */
#ifndef ERR_VOID_CONST_P_EQUAL
#define ERR_VOID_CONST_P_EQUAL                  ERR_VOIDP_EQUAL
#endif /* !defined ERR_VOID_CONST_P_EQUAL */

/* ********************************************************************** */
/* CMP */
#ifndef ERR_ERWIN_POINTER_CMP
#define ERR_ERWIN_POINTER_CMP(X,Y)              ERR_PTRINT_CMP( \
                                                        (ERWIN_PTRINT)(X),(ERWIN_PTRINT)(Y))
#endif /* !defined ERR_ERWIN_POINTER_CMP */

/* For special types: */
#ifndef ERR_ERWIN_INT_CMP
#define ERR_ERWIN_INT_CMP                       ERR_ERWIN_DEFAULT_CMP
#endif /* !defined ERR_ERWIN_INT_CMP */
#ifndef ERR_ERWIN_UNSIGNED_CMP
#define ERR_ERWIN_UNSIGNED_CMP                  ERR_ERWIN_DEFAULT_CMP
#endif /* !defined ERR_ERWIN_UNSIGNED_CMP */

#ifndef ERR_BOOL_CMP
#define ERR_BOOL_CMP                            ERR_ERWIN_INT_SUBCMP
#endif /* !defined ERR_BOOL_CMP */
/* This type used to be called ERR_ERWIN_BOOL.  Now it is ERWIN_BOOL. */
#ifndef ERR_ERR_ERWIN_BOOL_CMP
#define ERR_ERR_ERWIN_BOOL_CMP               ERR_BOOL_CMP
#endif /* !defined ERR_ERR_ERWIN_BOOL_CMP */
#ifndef ERR_ERWIN_BOOL_CMP
#define ERR_ERWIN_BOOL_CMP                      ERR_BOOL_CMP
#endif /* !defined ERR_ERWIN_BOOL_CMP */

#ifndef ERR_CHAR_CMP
#define ERR_CHAR_CMP                            ERR_ERWIN_INT_SUBCMP
#endif /* !defined ERR_CHAR_CMP */
#ifndef ERR_UNSIGNED_CHAR_CMP
#define ERR_UNSIGNED_CHAR_CMP                   ERR_ERWIN_INT_SUBCMP
#endif /* !defined ERR_UNSIGNED_CHAR_CMP */
#ifndef ERR_SIGNED_CHAR_CMP
#define ERR_SIGNED_CHAR_CMP                     ERR_ERWIN_INT_SUBCMP
#endif /* !defined ERR_SIGNED_CHAR_CMP */

#ifndef ERR_CHAR_CASE_CMP
#define ERR_CHAR_CASE_CMP(X,Y)  \
                    ERR_CHAR_CMP(err_char_to_lower(X),err_char_to_lower(Y))
#endif /* !defined ERR_CHAR_CASE_CMP */
#ifndef ERR_UNSIGNED_CHAR_CASE_CMP
#define ERR_UNSIGNED_CHAR_CASE_CMP              ERR_CHAR_CASE_CMP
#endif /* !defined ERR_UNSIGNED_CHAR_CASE_CMP */
#ifndef ERR_SIGNED_CHAR_CASE_CMP
#define ERR_SIGNED_CHAR_CASE_CMP                ERR_CHAR_CASE_CMP
#endif /* !defined ERR_SIGNED_CHAR_CASE_CMP */

#ifndef ERR_SHORT_CMP
#define ERR_SHORT_CMP                           ERR_ERWIN_INT_SUBCMP
#endif /* !defined ERR_SHORT_CMP */
#ifndef ERR_UNSIGNED_SHORT_CMP
#define ERR_UNSIGNED_SHORT_CMP                  ERR_ERWIN_INT_SUBCMP
#endif /* !defined ERR_UNSIGNED_SHORT_CMP */
#ifndef ERR_SHORT_INT_CMP
#define ERR_SHORT_INT_CMP                       ERR_ERWIN_SHORT_CMP
#endif /* !defined ERR_SHORT_INT_CMP */
#ifndef ERR_UNSIGNED_SHORT_INT_CMP
#define ERR_UNSIGNED_SHORT_INT_CMP              ERR_ERWIN_UNSIGNED_SHORT_CMP
#endif /* !defined ERR_UNSIGNED_SHORT_INT_CMP */

#ifndef ERR_INT_CMP
#define ERR_INT_CMP                             ERR_ERWIN_INT_CMP
#endif /* !defined ERR_INT_CMP */
#ifndef ERR_UNSIGNED_CMP
#define ERR_UNSIGNED_CMP                        ERR_ERWIN_UNSIGNED_CMP
#endif /* !defined ERR_UNSIGNED_CMP */
#ifndef ERR_UNSIGNED_INT_CMP
#define ERR_UNSIGNED_INT_CMP                    ERR_UNSIGNED_CMP
#endif /* !defined ERR_UNSIGNED_INT_CMP */

#ifndef ERR_LONG_CMP
#define ERR_LONG_CMP                            ERR_ERWIN_DEFAULT_CMP
#endif /* !defined ERR_LONG_CMP */
#ifndef ERR_UNSIGNED_LONG_CMP
#define ERR_UNSIGNED_LONG_CMP                   ERR_ERWIN_DEFAULT_CMP
#endif /* !defined ERR_UNSIGNED_LONG_CMP */
#ifndef ERR_LONG_INT_CMP
#define ERR_LONG_INT_CMP                        ERR_LONG_CMP
#endif /* !defined ERR_LONG_INT_CMP */
#ifndef ERR_UNSIGNED_LONG_INT_CMP
#define ERR_UNSIGNED_LONG_INT_CMP               ERR_UNSIGNED_LONG_CMP
#endif /* !defined ERR_UNSIGNED_LONG_INT_CMP */

#ifndef ERR_ERWIN_LONG_LONG_CMP
#define ERR_ERWIN_LONG_LONG_CMP                 ERR_ERWIN_DEFAULT_CMP
#endif /* !defined ERR_ERWIN_LONG_LONG_CMP */
#ifndef ERR_ERWIN_UNSIGNED_LONG_LONG_CMP
#define ERR_ERWIN_UNSIGNED_LONG_LONG_CMP        ERR_ERWIN_DEFAULT_CMP
#endif /* !defined ERR_ERWIN_UNSIGNED_LONG_LONG_CMP */

#ifndef ERR_ERWIN_S8_CMP
#define ERR_ERWIN_S8_CMP                        ERR_ERWIN_SIGNED_CHAR_CMP
#endif /* !defined ERR_ERWIN_S8_CMP */
#ifndef ERR_ERWIN_U8_CMP
#define ERR_ERWIN_U8_CMP                        ERR_ERWIN_UNSIGNED_CHAR_CMP
#endif /* !defined ERR_ERWIN_U8_CMP */

#ifndef ERR_ERWIN_S16_CMP
#define ERR_ERWIN_S16_CMP                       ERR_ERWIN_SHORT_CMP
#endif /* !defined ERR_ERWIN_S16_CMP */
#ifndef ERR_ERWIN_U16_CMP
#define ERR_ERWIN_U16_CMP                       ERR_ERWIN_UNSIGNED_SHORT_CMP
#endif /* !defined ERR_ERWIN_U16_CMP */

#ifndef ERR_ERWIN_S32_CMP
#define ERR_ERWIN_S32_CMP                       ERR_ERWIN_DEFAULT_CMP
#endif /* !defined ERR_ERWIN_S32_CMP */
#ifndef ERR_ERWIN_U32_CMP
#define ERR_ERWIN_U32_CMP                       ERR_ERWIN_DEFAULT_CMP
#endif /* !defined ERR_ERWIN_U32_CMP */

#ifndef ERR_ERWIN_S64_CMP
#define ERR_ERWIN_S64_CMP                       ERR_ERWIN_DEFAULT_CMP
#endif /* !defined ERR_ERWIN_S64_CMP */
#ifndef ERR_ERWIN_U64_CMP
#define ERR_ERWIN_U64_CMP                       ERR_ERWIN_DEFAULT_CMP
#endif /* !defined ERR_ERWIN_U64_CMP */

#ifndef ERR_FLOAT_CMP
#define ERR_FLOAT_CMP                           ERR_ERWIN_DEFAULT_CMP
#endif /* !defined ERR_FLOAT_CMP */

#ifndef ERR_DOUBLE_CMP
#define ERR_DOUBLE_CMP                          ERR_ERWIN_DEFAULT_CMP
#endif /* !defined ERR_DOUBLE_CMP */

#ifndef ERR_LONG_DOUBLE_CMP
#define ERR_LONG_DOUBLE_CMP                     ERR_ERWIN_DEFAULT_CMP
#endif /* !defined ERR_LONG_DOUBLE_CMP */

#ifndef ERR_STRING_CMP
#define ERR_STRING_CMP                          err_string_cmp
#endif /* !defined ERR_STRING_CMP */

#ifndef ERR_STRING_CASE_CMP
#define ERR_STRING_CASE_CMP                     err_string_case_cmp
#endif /* !defined ERR_STRING_CASE_CMP */

/* cmp for void*: */
#ifndef ERR_VOIDP_CMP
#define ERR_VOIDP_CMP                           ERR_ERWIN_POINTER_CMP
#endif /* !defined ERR_VOIDP_CMP */
#ifndef ERR_VOID_P_CMP
#define ERR_VOID_P_CMP                          ERR_VOIDP_CMP
#endif /* !defined ERR_VOID_P_CMP */
#ifndef ERR_CONST_VOIDP_CMP
#define ERR_CONST_VOIDP_CMP                     ERR_VOIDP_CMP
#endif /* !defined ERR_CONST_VOIDP_CMP */
#ifndef ERR_CONST_VOID_P_CMP
#define ERR_CONST_VOID_P_CMP                    ERR_VOIDP_CMP
#endif /* !defined ERR_CONST_VOID_P_CMP */
#ifndef ERR_VOIDP_CONST_CMP
#define ERR_VOIDP_CONST_CMP                     ERR_VOIDP_CMP
#endif /* !defined ERR_VOIDP_CONST_CMP */
#ifndef ERR_VOID_CONST_P_CMP
#define ERR_VOID_CONST_P_CMP                    ERR_VOIDP_CMP
#endif /* !defined ERR_VOID_CONST_P_CMP */

/* constant zero for void*: */
#ifndef ERR_VOIDP_CONSTANT_ZERO
#define ERR_VOIDP_CONSTANT_ZERO 1
#endif /* !defined ERR_VOIDP_CONSTANT_ZERO */
#ifndef ERR_CONST_VOIDP_CONSTANT_ZERO
#define ERR_CONST_VOIDP_CONSTANT_ZERO 1
#endif /* !defined ERR_CONST_VOIDP_CONSTANT_ZERO */
#ifndef ERR_VOIDP_CONST_CONSTANT_ZERO
#define ERR_VOIDP_CONST_CONSTANT_ZERO 1
#endif /* !defined ERR_VOIDP_CONST_CONSTANT_ZERO */
#ifndef ERR_VOID_P_CONSTANT_ZERO
#define ERR_VOID_P_CONSTANT_ZERO 1
#endif /* !defined ERR_VOID_P_CONSTANT_ZERO */
#ifndef ERR_CONST_VOID_P_CONSTANT_ZERO
#define ERR_CONST_VOID_P_CONSTANT_ZERO 1
#endif /* !defined ERR_CONST_VOID_P_CONSTANT_ZERO */
#ifndef ERR_VOID_P_CONST_CONSTANT_ZERO
#define ERR_VOID_P_CONST_CONSTANT_ZERO 1
#endif /* !defined ERR_VOID_P_CONST_CONSTANT_ZERO */

/* ********************************************************************** */
/* HASH */
/* Hashing (most functions are in map.(c,h)) */
#ifndef ERR_ERWIN_POINTER_HASH
#define ERR_ERWIN_POINTER_HASH(X)               err_voidp_hash((void*)(X))
#endif /* !defined ERR_ERWIN_POINTER_HASH */

#ifndef ERR_CHAR_HASH
#define ERR_CHAR_HASH(X)                        err_char_hash(X)
#endif /* !defined ERR_CHAR_HASH */
#ifndef ERR_UNSIGNED_CHAR_HASH
#define ERR_UNSIGNED_CHAR_HASH                  ERR_CHAR_HASH
#endif /* !defined ERR_UNSIGNED_CHAR_HASH */
#ifndef ERR_SIGNED_CHAR_HASH
#define ERR_SIGNED_CHAR_HASH                    ERR_CHAR_HASH
#endif /* !defined ERR_SIGNED_CHAR_HASH */

#ifndef ERR_CHAR_CASE_HASH
#define ERR_CHAR_CASE_HASH(X)                   err_char_case_hash(X)
#endif /* !defined ERR_CHAR_CASE_HASH */
#ifndef ERR_UNSIGNED_CHAR_CASE_HASH
#define ERR_UNSIGNED_CHAR_CASE_HASH             ERR_CHAR_CASE_HASH
#endif /* !defined ERR_UNSIGNED_CHAR_CASE_HASH */
#ifndef ERR_SIGNED_CHAR_CASE_HASH
#define ERR_SIGNED_CHAR_CASE_HASH               ERR_CHAR_CASE_HASH
#endif /* !defined ERR_SIGNED_CHAR_CASE_HASH */

#ifndef ERR_BOOL_HASH
#define ERR_BOOL_HASH                           ERR_CHAR_HASH
#endif /* !defined ERR_BOOL_HASH */
#ifndef ERR_ERR_ERWIN_BOOL_HASH
#define ERR_ERR_ERWIN_BOOL_HASH              ERR_CHAR_HASH
#endif /* !defined ERR_ERR_ERWIN_BOOL_HASH */
#ifndef ERR_ERWIN_BOOL_HASH
#define ERR_ERWIN_BOOL_HASH                     ERR_CHAR_HASH
#endif /* !defined ERR_ERWIN_BOOL_HASH */

#ifndef ERR_SHORT_HASH
#define ERR_SHORT_HASH(X)                       err_short_hash(X)
#endif /* !defined ERR_SHORT_HASH */
#ifndef ERR_UNSIGNED_SHORT_HASH
#define ERR_UNSIGNED_SHORT_HASH                 ERR_SHORT_HASH
#endif /* !defined ERR_UNSIGNED_SHORT_HASH */
#ifndef ERR_UNSIGNED_SHORT_INT_HASH
#define ERR_UNSIGNED_SHORT_INT_HASH             ERR_SHORT_HASH
#endif /* !defined ERR_UNSIGNED_SHORT_INT_HASH */

#ifndef ERR_INT_HASH
#define ERR_INT_HASH(X)                         err_int_hash(X)
#endif /* !defined ERR_INT_HASH */
#ifndef ERR_UNSIGNED_HASH
#define ERR_UNSIGNED_HASH                       ERR_INT_HASH
#endif /* !defined ERR_UNSIGNED_HASH */
#ifndef ERR_UNSIGNED_INT_HASH
#define ERR_UNSIGNED_INT_HASH                   ERR_INT_HASH
#endif /* !defined ERR_UNSIGNED_INT_HASH */

#ifndef ERR_LONG_HASH
#define ERR_LONG_HASH(X)                        err_long_hash(X)
#endif /* !defined ERR_LONG_HASH */
#ifndef ERR_UNSIGNED_LONG_HASH
#define ERR_UNSIGNED_LONG_HASH                  ERR_LONG_HASH
#endif /* !defined ERR_UNSIGNED_LONG_HASH */
#ifndef ERR_UNSIGNED_LONG_INT_HASH
#define ERR_UNSIGNED_LONG_INT_HASH              ERR_LONG_HASH
#endif /* !defined ERR_UNSIGNED_LONG_INT_HASH */

#ifndef ERR_ERWIN_LONG_LONG_HASH
#define ERR_ERWIN_LONG_LONG_HASH(X)             (((err_hashval_t)(X)) + err_long_hash(X))
#endif /* !defined ERR_ERWIN_LONG_LONG_HASH */
#ifndef ERR_ERWIN_UNSIGNED_LONG_LONG_HASH
#define ERR_ERWIN_UNSIGNED_LONG_LONG_HASH       ERR_ERWIN_LONG_LONG_HASH
#endif /* !defined ERR_ERWIN_UNSIGNED_LONG_LONG_HASH */

#ifndef ERR_STRING_HASH
#define ERR_STRING_HASH(X)                      err_string_hash(X)
#endif /* !defined ERR_STRING_HASH */

#ifndef ERR_STRING_CASE_HASH
#define ERR_STRING_CASE_HASH(X)                 err_string_case_hash(X)
#endif /* !defined ERR_STRING_CASE_HASH */

#ifndef ERR_VOIDP_HASH
#define ERR_VOIDP_HASH(X)                       ERR_ERWIN_POINTER_HASH(X)
#endif /* !defined ERR_VOIDP_HASH */
#ifndef ERR_VOID_P_HASH
#define ERR_VOID_P_HASH                         ERR_VOIDP_HASH
#endif /* !defined ERR_VOID_P_HASH */
#ifndef ERR_CONST_VOIDP_HASH
#define ERR_CONST_VOIDP_HASH                    ERR_VOIDP_HASH
#endif /* !defined ERR_CONST_VOIDP_HASH */
#ifndef ERR_CONST_VOID_P_HASH
#define ERR_CONST_VOID_P_HASH                   ERR_VOIDP_HASH
#endif /* !defined ERR_CONST_VOID_P_HASH */
#ifndef ERR_VOIDP_CONST_HASH
#define ERR_VOIDP_CONST_HASH                    ERR_VOIDP_HASH
#endif /* !defined ERR_VOIDP_CONST_HASH */
#ifndef ERR_VOID_CONST_P_HASH
#define ERR_VOID_CONST_P_HASH                   ERR_VOIDP_HASH
#endif /* !defined ERR_VOID_CONST_P_HASH */

/* ********************************************************************** */
/* Printing of basic types.  This is handy for debugging (it is only
 * needed in map::dump(). */

#ifndef ERR_BOOL_PRINT
#define ERR_BOOL_PRINT(F,X)                     fputs((X) ? "true" : "false", (F))
#endif /* !defined ERR_BOOL_PRINT */
#ifndef ERR_ERR_ERWIN_BOOL_PRINT
#define ERR_ERR_ERWIN_BOOL_PRINT             ERR_BOOL_PRINT
#endif /* !defined ERR_ERR_ERWIN_BOOL_PRINT */
#ifndef ERR_ERWIN_BOOL_PRINT
#define ERR_ERWIN_BOOL_PRINT                    ERR_BOOL_PRINT
#endif /* !defined ERR_ERWIN_BOOL_PRINT */

#ifndef ERR_INT_PRINT
#define ERR_INT_PRINT(F,X)                      fprintf((F), "%d", (X))
#endif /* !defined ERR_INT_PRINT */

#ifndef ERR_SHORT_PRINT
#define ERR_SHORT_PRINT                         ERR_INT_PRINT
#endif /* !defined ERR_SHORT_PRINT */

#ifndef ERR_UNSIGNED_PRINT
#define ERR_UNSIGNED_PRINT(F,X)                 fprintf((F), "%u", (X))
#endif /* !defined ERR_UNSIGNED_PRINT */
#ifndef ERR_UNSIGNED_INT_PRINT
#define ERR_UNSIGNED_INT_PRINT                  ERR_UNSIGNED_PRINT
#endif /* !defined ERR_UNSIGNED_INT_PRINT */
                                                    
#ifndef ERR_UNSIGNED_SHORT_PRINT
#define ERR_UNSIGNED_SHORT_PRINT                ERR_UNSIGNED_PRINT
#endif /* !defined ERR_UNSIGNED_SHORT_PRINT */
                                                    
#ifndef ERR_LONG_PRINT
#define ERR_LONG_PRINT(F,X)                     fprintf((F), "%ld", (X))
#endif /* !defined ERR_LONG_PRINT */
                                                    
#ifndef ERR_UNSIGNED_LONG_PRINT
#define ERR_UNSIGNED_LONG_PRINT(F,X)            fprintf((F), "%lu", (X))
#endif /* !defined ERR_UNSIGNED_LONG_PRINT */
                                                    
#ifndef ERR_DOUBLE_PRINT
#define ERR_DOUBLE_PRINT(F,X)                   fprintf((F), "%g", (X))
#endif /* !defined ERR_DOUBLE_PRINT */
                                                    
#ifndef ERR_FLOAT_PRINT
#define ERR_FLOAT_PRINT                         ERR_DOUBLE_PRINT
#endif /* !defined ERR_FLOAT_PRINT */

/* No `long long' printing (yet).  It is not portable. */
/* No `long double' printing.  It is not portable. */
#ifndef ERR_VOID_P_PRINT
#define ERR_VOID_P_PRINT(F,X)                   fprintf((F), "%p", (X))
#endif /* !defined ERR_VOID_P_PRINT */
#ifndef ERR_CONST_VOID_P_PRINT
#define ERR_CONST_VOID_P_PRINT                  ERR_VOID_P_PRINT
#endif /* !defined ERR_CONST_VOID_P_PRINT */
#ifndef ERR_VOID_CONST_P_PRINT
#define ERR_VOID_CONST_P_PRINT                  ERR_VOID_P_PRINT
#endif /* !defined ERR_VOID_CONST_P_PRINT */

#ifndef ERR_CHAR_P_PRINT
#define ERR_CHAR_P_PRINT(F,X) \
        if (X == NULL) fprintf((F), "NULL"); else fprintf ((F), "%p:`%s'", (X), (X))
#endif /* !defined ERR_CHAR_P_PRINT */

#ifndef ERR_CONST_CHAR_P_PRINT
#define ERR_CONST_CHAR_P_PRINT                  ERR_CHAR_P_PRINT
#endif /* !defined ERR_CONST_CHAR_P_PRINT */
#ifndef ERR_CHAR_CONST_P_PRINT
#define ERR_CHAR_CONST_P_PRINT                  ERR_CHAR_P_PRINT
#endif /* !defined ERR_CHAR_CONST_P_PRINT */

#ifndef ERR_CHAR_PRINT
#define ERR_CHAR_PRINT(F,X)                     fprintf ((F), "%d:`%c'", (X), (X))
#endif /* !defined ERR_CHAR_PRINT */

#ifndef ERR_SIGNED_CHAR_PRINT
#define ERR_SIGNED_CHAR_PRINT                   ERR_CHAR_PRINT
#endif /* !defined ERR_SIGNED_CHAR_PRINT */
#ifndef ERR_UNSIGNED_CHAR_PRINT
#define ERR_UNSIGNED_CHAR_PRINT                 ERR_CHAR_PRINT
#endif /* !defined ERR_UNSIGNED_CHAR_PRINT */

/* ********************************************************************** */

#ifndef ERR_VOIDP_CONSTANT_ZERO
#define ERR_VOIDP_CONSTANT_ZERO        1
#endif /* !defined ERR_VOIDP_CONSTANT_ZERO */
#ifndef ERR_CONST_VOIDP_CONSTANT_ZERO
#define ERR_CONST_VOIDP_CONSTANT_ZERO  1
#endif /* !defined ERR_CONST_VOIDP_CONSTANT_ZERO */
#ifndef ERR_VOIDP_CONST_CONSTANT_ZERO
#define ERR_VOIDP_CONST_CONSTANT_ZERO  1
#endif /* !defined ERR_VOIDP_CONST_CONSTANT_ZERO */
#ifndef ERR_VOID_P_CONSTANT_ZERO
#define ERR_VOID_P_CONSTANT_ZERO       1
#endif /* !defined ERR_VOID_P_CONSTANT_ZERO */
#ifndef ERR_CONST_VOID_P_CONSTANT_ZERO
#define ERR_CONST_VOID_P_CONSTANT_ZERO 1
#endif /* !defined ERR_CONST_VOID_P_CONSTANT_ZERO */
#ifndef ERR_VOID_P_CONST_CONSTANT_ZERO
#define ERR_VOID_P_CONST_CONSTANT_ZERO 1
#endif /* !defined ERR_VOID_P_CONST_CONSTANT_ZERO */

#ifndef ERR_CHARP_CONSTANT_ZERO
#define ERR_CHARP_CONSTANT_ZERO        1
#endif /* !defined ERR_CHARP_CONSTANT_ZERO */
#ifndef ERR_CONST_CHARP_CONSTANT_ZERO
#define ERR_CONST_CHARP_CONSTANT_ZERO  1
#endif /* !defined ERR_CONST_CHARP_CONSTANT_ZERO */
#ifndef ERR_CHAR_CONSTP_CONSTANT_ZERO
#define ERR_CHAR_CONSTP_CONSTANT_ZERO  1
#endif /* !defined ERR_CHAR_CONSTP_CONSTANT_ZERO */
#ifndef ERR_CHAR_P_CONSTANT_ZERO
#define ERR_CHAR_P_CONSTANT_ZERO       1
#endif /* !defined ERR_CHAR_P_CONSTANT_ZERO */
#ifndef ERR_CONST_CHAR_P_CONSTANT_ZERO
#define ERR_CONST_CHAR_P_CONSTANT_ZERO 1
#endif /* !defined ERR_CONST_CHAR_P_CONSTANT_ZERO */
#ifndef ERR_CHAR_CONST_P_CONSTANT_ZERO
#define ERR_CHAR_CONST_P_CONSTANT_ZERO 1
#endif /* !defined ERR_CHAR_CONST_P_CONSTANT_ZERO */


#endif /* defined(ERR_ERWIN_DEFAULTS_H) */

